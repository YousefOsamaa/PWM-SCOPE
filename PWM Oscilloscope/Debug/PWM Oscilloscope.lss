
PWM Oscilloscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001df8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000526  00800060  00001df8  00001e8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000278  00800586  00800586  000023b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000023e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000055bf  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000133d  00000000  00000000  00007e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003158  00000000  00000000  000091bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e48  00000000  00000000  0000c314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e3b  00000000  00000000  0000d15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006304  00000000  00000000  0000ef97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c8  00000000  00000000  0001529b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__vector_1>
       8:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_2>
       c:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__vector_3>
      10:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__vector_4>
      14:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__vector_5>
      18:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__vector_6>
      1c:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_7>
      20:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_8>
      24:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__vector_9>
      28:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__vector_10>
      2c:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__vector_11>
      30:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__vector_12>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	b0 03       	fmuls	r19, r16
      56:	c5 03       	fmuls	r20, r21
      58:	ef 03       	fmulsu	r22, r23
      5a:	f6 03       	fmuls	r23, r22
      5c:	fd 03       	fmulsu	r23, r21
      5e:	04 04       	cpc	r0, r4
      60:	0b 04       	cpc	r0, r11

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	15 e0       	ldi	r17, 0x05	; 5
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e8 ef       	ldi	r30, 0xF8	; 248
      76:	fd e1       	ldi	r31, 0x1D	; 29
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a6 38       	cpi	r26, 0x86	; 134
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	27 e0       	ldi	r18, 0x07	; 7
      86:	a6 e8       	ldi	r26, 0x86	; 134
      88:	b5 e0       	ldi	r27, 0x05	; 5
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ae 3f       	cpi	r26, 0xFE	; 254
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
      98:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <main>:

void main(void)
{

	// //Initializaions
	PWMScope_enu_Initialization();
      a0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <PWMScope_enu_Initialization>

	// //Running the scope
	PWMScope_enu_RunScope();
      a4:	0e 94 03 01 	call	0x206	; 0x206 <PWMScope_enu_RunScope>
      a8:	08 95       	ret

000000aa <enu_GenerateScopeScreen>:
 * @brief Prints the homescreen using the defined configurations in the private header file
 * 
 * @return ErrorState_t 
 */
static ErrorState_t enu_GenerateScopeScreen(void)
{
      aa:	0f 93       	push	r16

    //Drawing Boarders
    //NOKIA5110_enu_DrawHorizontalLine(PWMSCOPE_BORDER_VERTICAL_SHIFT, PWMSCOPE_BORDER_HORIZOTAL_SHIFT, PWMSCOPE_BORDER_LENGTH, PWMSCOPE_BORDER_THICKNESS, PWMSCOPE_BORDER_COLOUR);

    //Drawing Static Texts
	NOKIA5110_enu_DrawString("Freq       kHz", 0, NOKIA5110_X_COORDINATE_MIN, NOKIA5110_BLACK_COLOUR);
      ac:	21 e0       	ldi	r18, 0x01	; 1
      ae:	40 e0       	ldi	r20, 0x00	; 0
      b0:	60 e0       	ldi	r22, 0x00	; 0
      b2:	89 e6       	ldi	r24, 0x69	; 105
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 cc 07 	call	0xf98	; 0xf98 <NOKIA5110_enu_DrawString>
	NOKIA5110_enu_DrawString("Duty        %", 9, NOKIA5110_X_COORDINATE_MIN, NOKIA5110_BLACK_COLOUR);
      ba:	21 e0       	ldi	r18, 0x01	; 1
      bc:	40 e0       	ldi	r20, 0x00	; 0
      be:	69 e0       	ldi	r22, 0x09	; 9
      c0:	88 e7       	ldi	r24, 0x78	; 120
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	0e 94 cc 07 	call	0xf98	; 0xf98 <NOKIA5110_enu_DrawString>

    //Drawing axis
    // NOKIA5110_enu_DrawHorizontalLine(PWMSCOPE_X_AXIS_VERTICAL_SHIFT, PWMSCOPE_X_AXIS_HORIZOTAL_SHIFT, PWMSCOPE_X_AXIS_LENGTH, PWMSCOPE_X_AXIS_THICKNESS, PWMSCOPE_X_AXIS_COLOUR);
    NOKIA5110_enu_DrawVerticalLine(PWMSCOPE_Y_AXIS_VERTICAL_SHIFT, PWMSCOPE_Y_AXIS_HORIZOTAL_SHIFT, PWMSCOPE_Y_AXIS_HEIGHT, PWMSCOPE_Y_AXIS_THICKNESS, PWMSCOPE_Y_AXIS_COLOUR);
      c8:	01 e0       	ldi	r16, 0x01	; 1
      ca:	21 e0       	ldi	r18, 0x01	; 1
      cc:	4c e1       	ldi	r20, 0x1C	; 28
      ce:	64 e0       	ldi	r22, 0x04	; 4
      d0:	84 e1       	ldi	r24, 0x14	; 20
      d2:	0e 94 c2 07 	call	0xf84	; 0xf84 <NOKIA5110_enu_DrawVerticalLine>

    //Drawing Arrows 
     NOKIA5110_enu_DrawCharacter(0x5E, PWMSCOPE_Y_AXIS_VERTICAL_SHIFT, PWMSCOPE_Y_AXIS_HORIZOTAL_SHIFT -2, PWMSCOPE_Y_AXIS_COLOUR, NOKIA5110_ENABLE_OVERLAP);
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	42 e0       	ldi	r20, 0x02	; 2
      dc:	64 e1       	ldi	r22, 0x14	; 20
      de:	8e e5       	ldi	r24, 0x5E	; 94
      e0:	0e 94 93 06 	call	0xd26	; 0xd26 <NOKIA5110_enu_DrawCharacter>
    // NOKIA5110_enu_DrawCharacter(0x3E, PWMSCOPE_X_AXIS_VERTICAL_SHIFT - 3, PWMSCOPE_X_AXIS_HORIZOTAL_SHIFT + 79, PWMSCOPE_X_AXIS_COLOUR, NOKIA5110_ENABLE_OVERLAP);

    //Drawing Scale
    
    return Local_u8_ErrorFlag;
}
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	0f 91       	pop	r16
      e8:	08 95       	ret

000000ea <enu_DrawPWM>:

static ErrorState_t enu_DrawPWM(f32* Copy_af32_SignalsParameters)
{
      ea:	bf 92       	push	r11
      ec:	cf 92       	push	r12
      ee:	df 92       	push	r13
      f0:	ef 92       	push	r14
      f2:	ff 92       	push	r15
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
    u8 Local_u8_ErrorFlag = ES_NOK;

    if(Copy_af32_SignalsParameters)
      fc:	00 97       	sbiw	r24, 0x00	; 0
      fe:	09 f0       	breq	.+2      	; 0x102 <enu_DrawPWM+0x18>
     100:	4c c0       	rjmp	.+152    	; 0x19a <enu_DrawPWM+0xb0>
        }
        
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	50 c0       	rjmp	.+160    	; 0x1a6 <enu_DrawPWM+0xbc>
        u8 Local_u8_TonStartingPoint = 0, Local_Ton_EndingPoint = 0, Local_u8_TonLength = 0; //All in pixels
        u8 Local_u8_ToffStartingPoint = 0, Local_ToffEndingPoint = 0, Local_u8_ToffLength = 0; //All in pixels

        for (u8 Local_u8_WaveNumber = 0; Local_u8_WaveNumber <= 1; Local_u8_WaveNumber++)
        {
            Local_u8_TonStartingPoint = Local_u8_WaveNumber*PWMSCOPE_T_LENGTH + PWMSCOPE_Y_AXIS_HORIZOTAL_SHIFT;
     106:	c8 e2       	ldi	r28, 0x28	; 40
     108:	1c 9f       	mul	r17, r28
     10a:	c0 2d       	mov	r28, r0
     10c:	11 24       	eor	r1, r1
     10e:	68 94       	set
     110:	ee 24       	eor	r14, r14
     112:	e2 f8       	bld	r14, 2
     114:	ec 0e       	add	r14, r28
            Local_u8_TonLength = ((Copy_af32_SignalsParameters[1]/100UL))*PWMSCOPE_T_LENGTH; // in pixels
     116:	f6 01       	movw	r30, r12
     118:	64 81       	ldd	r22, Z+4	; 0x04
     11a:	75 81       	ldd	r23, Z+5	; 0x05
     11c:	86 81       	ldd	r24, Z+6	; 0x06
     11e:	97 81       	ldd	r25, Z+7	; 0x07
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	48 ec       	ldi	r20, 0xC8	; 200
     126:	52 e4       	ldi	r21, 0x42	; 66
     128:	0e 94 91 0c 	call	0x1922	; 0x1922 <__divsf3>
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	40 e2       	ldi	r20, 0x20	; 32
     132:	52 e4       	ldi	r21, 0x42	; 66
     134:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__mulsf3>
     138:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
     13c:	d6 2f       	mov	r29, r22
            Local_u8_ToffStartingPoint = Local_u8_TonStartingPoint + Local_u8_TonLength;
     13e:	be 2c       	mov	r11, r14
     140:	b6 0e       	add	r11, r22
            Local_u8_ToffLength = PWMSCOPE_T_LENGTH - Local_u8_TonLength -1;
     142:	97 e2       	ldi	r25, 0x27	; 39
     144:	f9 2e       	mov	r15, r25
     146:	fd 1a       	sub	r15, r29
            
            //Erasing Existig PWM wave
            NOKIA5110_enu_DrawFillRectangle(PWMSCOPE_5V_VERTICAL_SHIFT, Local_u8_TonStartingPoint + 1, PWMSCOPE_T_LENGTH, PWMSCOPE_X_AXIS_VERTICAL_SHIFT, NOKIA5110_WHITE_COLOUR);
     148:	65 e0       	ldi	r22, 0x05	; 5
     14a:	6c 0f       	add	r22, r28
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	2f e2       	ldi	r18, 0x2F	; 47
     150:	48 e2       	ldi	r20, 0x28	; 40
     152:	8b e1       	ldi	r24, 0x1B	; 27
     154:	0e 94 99 06 	call	0xd32	; 0xd32 <NOKIA5110_enu_DrawFillRectangle>

            //Drawing Rising Edge
            if(Local_u8_TonLength != 0)
     158:	dd 23       	and	r29, r29
     15a:	39 f0       	breq	.+14     	; 0x16a <enu_DrawPWM+0x80>
            {
                NOKIA5110_enu_DrawVerticalLine(PWMSCOPE_5V_VERTICAL_SHIFT, Local_u8_TonStartingPoint, 5*PWMSCOPE_Y_AXIS_SCALE, 1, NOKIA5110_BLACK_COLOUR);
     15c:	01 e0       	ldi	r16, 0x01	; 1
     15e:	21 e0       	ldi	r18, 0x01	; 1
     160:	44 e1       	ldi	r20, 0x14	; 20
     162:	6e 2d       	mov	r22, r14
     164:	8b e1       	ldi	r24, 0x1B	; 27
     166:	0e 94 c2 07 	call	0xf84	; 0xf84 <NOKIA5110_enu_DrawVerticalLine>
            }
            
            //Drawing Ton portion
            NOKIA5110_enu_DrawHorizontalLine(PWMSCOPE_5V_VERTICAL_SHIFT, Local_u8_TonStartingPoint, Local_u8_TonLength, 1, NOKIA5110_BLACK_COLOUR);
     16a:	01 e0       	ldi	r16, 0x01	; 1
     16c:	21 e0       	ldi	r18, 0x01	; 1
     16e:	4d 2f       	mov	r20, r29
     170:	6e 2d       	mov	r22, r14
     172:	8b e1       	ldi	r24, 0x1B	; 27
     174:	0e 94 c7 07 	call	0xf8e	; 0xf8e <NOKIA5110_enu_DrawHorizontalLine>

            //Drawing Falling Edge
            if(Local_u8_TonLength != 0)
     178:	dd 23       	and	r29, r29
     17a:	31 f0       	breq	.+12     	; 0x188 <enu_DrawPWM+0x9e>
            {
                NOKIA5110_enu_DrawVerticalLine(PWMSCOPE_5V_VERTICAL_SHIFT, Local_u8_ToffStartingPoint, 5*PWMSCOPE_Y_AXIS_SCALE, 1, NOKIA5110_BLACK_COLOUR);
     17c:	21 e0       	ldi	r18, 0x01	; 1
     17e:	44 e1       	ldi	r20, 0x14	; 20
     180:	6b 2d       	mov	r22, r11
     182:	8b e1       	ldi	r24, 0x1B	; 27
     184:	0e 94 c2 07 	call	0xf84	; 0xf84 <NOKIA5110_enu_DrawVerticalLine>
            }

            //Drawing Toff portion
            NOKIA5110_enu_DrawHorizontalLine(PWMSCOPE_X_AXIS_VERTICAL_SHIFT, Local_u8_ToffStartingPoint, Local_u8_ToffLength, 1, NOKIA5110_BLACK_COLOUR);
     188:	01 e0       	ldi	r16, 0x01	; 1
     18a:	21 e0       	ldi	r18, 0x01	; 1
     18c:	4f 2d       	mov	r20, r15
     18e:	6b 2d       	mov	r22, r11
     190:	8f e2       	ldi	r24, 0x2F	; 47
     192:	0e 94 c7 07 	call	0xf8e	; 0xf8e <NOKIA5110_enu_DrawHorizontalLine>
    {

        u8 Local_u8_TonStartingPoint = 0, Local_Ton_EndingPoint = 0, Local_u8_TonLength = 0; //All in pixels
        u8 Local_u8_ToffStartingPoint = 0, Local_ToffEndingPoint = 0, Local_u8_ToffLength = 0; //All in pixels

        for (u8 Local_u8_WaveNumber = 0; Local_u8_WaveNumber <= 1; Local_u8_WaveNumber++)
     196:	1f 5f       	subi	r17, 0xFF	; 255
     198:	02 c0       	rjmp	.+4      	; 0x19e <enu_DrawPWM+0xb4>
     19a:	6c 01       	movw	r12, r24
     19c:	10 e0       	ldi	r17, 0x00	; 0
     19e:	12 30       	cpi	r17, 0x02	; 2
     1a0:	08 f4       	brcc	.+2      	; 0x1a4 <enu_DrawPWM+0xba>
     1a2:	b1 cf       	rjmp	.-158    	; 0x106 <enu_DrawPWM+0x1c>
    return Local_u8_ErrorFlag;
}

static ErrorState_t enu_DrawPWM(f32* Copy_af32_SignalsParameters)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
     1a4:	81 e0       	ldi	r24, 0x01	; 1
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    }
    
    return Local_u8_ErrorFlag;

}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	1f 91       	pop	r17
     1ac:	0f 91       	pop	r16
     1ae:	ff 90       	pop	r15
     1b0:	ef 90       	pop	r14
     1b2:	df 90       	pop	r13
     1b4:	cf 90       	pop	r12
     1b6:	bf 90       	pop	r11
     1b8:	08 95       	ret

000001ba <PWMScope_enu_Initialization>:
 * @brief Initializes all the modules needed and prints the home screen
 * 
 * @return ErrorState_t 
 */
extern ErrorState_t PWMScope_enu_Initialization(void)
{
     1ba:	0f 93       	push	r16
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
    u8 Local_u8_ErrorFlag = ES_NOK;

    //Initializations    
    NOKIA5110_enu_Initialization();    //Initializing LCD
     1c0:	0e 94 09 06 	call	0xc12	; 0xc12 <NOKIA5110_enu_Initialization>

    ICU_enu_Initialization(); //Initializing ICU
     1c4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <ICU_enu_Initialization>
    
    //Drawing Scope Screen
    enu_GenerateScopeScreen();
     1c8:	0e 94 55 00 	call	0xaa	; 0xaa <enu_GenerateScopeScreen>

    //Displaying Frequency in HZ
    NOKIA5110_enu_DrawNumber(LOC_af32_SignalsParameters[0], 0, 30, NOKIA5110_BLACK_COLOUR);
     1cc:	c2 e9       	ldi	r28, 0x92	; 146
     1ce:	d5 e0       	ldi	r29, 0x05	; 5
     1d0:	68 81       	ld	r22, Y
     1d2:	79 81       	ldd	r23, Y+1	; 0x01
     1d4:	8a 81       	ldd	r24, Y+2	; 0x02
     1d6:	9b 81       	ldd	r25, Y+3	; 0x03
     1d8:	01 e0       	ldi	r16, 0x01	; 1
     1da:	2e e1       	ldi	r18, 0x1E	; 30
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	0e 94 9e 06 	call	0xd3c	; 0xd3c <NOKIA5110_enu_DrawNumber>
            
    //Displaying Duty Ratio in %
    NOKIA5110_enu_DrawNumber(LOC_af32_SignalsParameters[1], 9, 30, NOKIA5110_BLACK_COLOUR);
     1e2:	6c 81       	ldd	r22, Y+4	; 0x04
     1e4:	7d 81       	ldd	r23, Y+5	; 0x05
     1e6:	8e 81       	ldd	r24, Y+6	; 0x06
     1e8:	9f 81       	ldd	r25, Y+7	; 0x07
     1ea:	2e e1       	ldi	r18, 0x1E	; 30
     1ec:	49 e0       	ldi	r20, 0x09	; 9
     1ee:	0e 94 9e 06 	call	0xd3c	; 0xd3c <NOKIA5110_enu_DrawNumber>

    //Drawing PWM 0 initially
    enu_DrawPWM(LOC_af32_SignalsParameters);
     1f2:	ce 01       	movw	r24, r28
     1f4:	0e 94 75 00 	call	0xea	; 0xea <enu_DrawPWM>

    //Setting GIE
    SREG_vid_EnableBitI();
     1f8:	0e 94 35 0a 	call	0x146a	; 0x146a <SREG_vid_EnableBitI>

    return Local_u8_ErrorFlag;
}
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	0f 91       	pop	r16
     204:	08 95       	ret

00000206 <PWMScope_enu_RunScope>:
    u8 Local_u8_NewWave = False;

    while(1)
    {
        //Saving Old Values
        LOC_af32_OldSignalsParameters[0] = LOC_af32_SignalsParameters[0];
     206:	c2 e9       	ldi	r28, 0x92	; 146
     208:	d5 e0       	ldi	r29, 0x05	; 5
     20a:	88 81       	ld	r24, Y
     20c:	99 81       	ldd	r25, Y+1	; 0x01
     20e:	aa 81       	ldd	r26, Y+2	; 0x02
     210:	bb 81       	ldd	r27, Y+3	; 0x03
     212:	06 e8       	ldi	r16, 0x86	; 134
     214:	15 e0       	ldi	r17, 0x05	; 5
     216:	f8 01       	movw	r30, r16
     218:	80 83       	st	Z, r24
     21a:	91 83       	std	Z+1, r25	; 0x01
     21c:	a2 83       	std	Z+2, r26	; 0x02
     21e:	b3 83       	std	Z+3, r27	; 0x03
        LOC_af32_OldSignalsParameters[1] = LOC_af32_SignalsParameters[1];
     220:	8c 81       	ldd	r24, Y+4	; 0x04
     222:	9d 81       	ldd	r25, Y+5	; 0x05
     224:	ae 81       	ldd	r26, Y+6	; 0x06
     226:	bf 81       	ldd	r27, Y+7	; 0x07
     228:	84 83       	std	Z+4, r24	; 0x04
     22a:	95 83       	std	Z+5, r25	; 0x05
     22c:	a6 83       	std	Z+6, r26	; 0x06
     22e:	b7 83       	std	Z+7, r27	; 0x07
        LOC_af32_OldSignalsParameters[2] = LOC_af32_SignalsParameters[2];
     230:	88 85       	ldd	r24, Y+8	; 0x08
     232:	99 85       	ldd	r25, Y+9	; 0x09
     234:	aa 85       	ldd	r26, Y+10	; 0x0a
     236:	bb 85       	ldd	r27, Y+11	; 0x0b
     238:	80 87       	std	Z+8, r24	; 0x08
     23a:	91 87       	std	Z+9, r25	; 0x09
     23c:	a2 87       	std	Z+10, r26	; 0x0a
     23e:	b3 87       	std	Z+11, r27	; 0x0b

        ICU_enu_StartCapture();//Starting a capture
     240:	0e 94 0e 02 	call	0x41c	; 0x41c <ICU_enu_StartCapture>
        
        ICU_enu_CalculateParameters(LOC_af32_SignalsParameters);//Calculating Parameters
     244:	ce 01       	movw	r24, r28
     246:	0e 94 2a 02 	call	0x454	; 0x454 <ICU_enu_CalculateParameters>
        
        Local_u8_NewWave = (LOC_af32_OldSignalsParameters[0] != LOC_af32_SignalsParameters[0]) || (LOC_af32_OldSignalsParameters[1] != LOC_af32_SignalsParameters[1]) || (LOC_af32_OldSignalsParameters[2] != LOC_af32_SignalsParameters[2]);
     24a:	f8 01       	movw	r30, r16
     24c:	60 81       	ld	r22, Z
     24e:	71 81       	ldd	r23, Z+1	; 0x01
     250:	82 81       	ldd	r24, Z+2	; 0x02
     252:	93 81       	ldd	r25, Z+3	; 0x03
     254:	c8 80       	ld	r12, Y
     256:	d9 80       	ldd	r13, Y+1	; 0x01
     258:	ea 80       	ldd	r14, Y+2	; 0x02
     25a:	fb 80       	ldd	r15, Y+3	; 0x03
     25c:	a7 01       	movw	r20, r14
     25e:	96 01       	movw	r18, r12
     260:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__cmpsf2>
     264:	81 11       	cpse	r24, r1
     266:	2a c0       	rjmp	.+84     	; 0x2bc <PWMScope_enu_RunScope+0xb6>
     268:	60 91 8a 05 	lds	r22, 0x058A	; 0x80058a <__data_end+0x4>
     26c:	70 91 8b 05 	lds	r23, 0x058B	; 0x80058b <__data_end+0x5>
     270:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <__data_end+0x6>
     274:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <__data_end+0x7>
     278:	20 91 96 05 	lds	r18, 0x0596	; 0x800596 <LOC_af32_SignalsParameters+0x4>
     27c:	30 91 97 05 	lds	r19, 0x0597	; 0x800597 <LOC_af32_SignalsParameters+0x5>
     280:	40 91 98 05 	lds	r20, 0x0598	; 0x800598 <LOC_af32_SignalsParameters+0x6>
     284:	50 91 99 05 	lds	r21, 0x0599	; 0x800599 <LOC_af32_SignalsParameters+0x7>
     288:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__cmpsf2>
     28c:	81 11       	cpse	r24, r1
     28e:	18 c0       	rjmp	.+48     	; 0x2c0 <PWMScope_enu_RunScope+0xba>
     290:	60 91 8e 05 	lds	r22, 0x058E	; 0x80058e <__data_end+0x8>
     294:	70 91 8f 05 	lds	r23, 0x058F	; 0x80058f <__data_end+0x9>
     298:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <__data_end+0xa>
     29c:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <__data_end+0xb>
     2a0:	20 91 9a 05 	lds	r18, 0x059A	; 0x80059a <LOC_af32_SignalsParameters+0x8>
     2a4:	30 91 9b 05 	lds	r19, 0x059B	; 0x80059b <LOC_af32_SignalsParameters+0x9>
     2a8:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <LOC_af32_SignalsParameters+0xa>
     2ac:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <LOC_af32_SignalsParameters+0xb>
     2b0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__cmpsf2>
     2b4:	88 23       	and	r24, r24
     2b6:	31 f0       	breq	.+12     	; 0x2c4 <PWMScope_enu_RunScope+0xbe>
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <PWMScope_enu_RunScope+0xc0>
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	03 c0       	rjmp	.+6      	; 0x2c6 <PWMScope_enu_RunScope+0xc0>
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <PWMScope_enu_RunScope+0xc0>
     2c4:	80 e0       	ldi	r24, 0x00	; 0

        if(Local_u8_NewWave)
     2c6:	88 23       	and	r24, r24
     2c8:	09 f4       	brne	.+2      	; 0x2cc <PWMScope_enu_RunScope+0xc6>
     2ca:	9d cf       	rjmp	.-198    	; 0x206 <PWMScope_enu_RunScope>
        {
            //Displaying Frequency in KHZ
            NOKIA5110_enu_DrawNumber(LOC_af32_SignalsParameters[0]/1000.0, 0, 30, NOKIA5110_BLACK_COLOUR);
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	4a e7       	ldi	r20, 0x7A	; 122
     2d2:	54 e4       	ldi	r21, 0x44	; 68
     2d4:	c7 01       	movw	r24, r14
     2d6:	b6 01       	movw	r22, r12
     2d8:	0e 94 91 0c 	call	0x1922	; 0x1922 <__divsf3>
     2dc:	01 e0       	ldi	r16, 0x01	; 1
     2de:	2e e1       	ldi	r18, 0x1E	; 30
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <NOKIA5110_enu_DrawNumber>
            
            //Displaying Duty Ratio in %
            NOKIA5110_enu_DrawNumber(LOC_af32_SignalsParameters[1], 9, 30, NOKIA5110_BLACK_COLOUR);
     2e6:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <LOC_af32_SignalsParameters+0x4>
     2ea:	70 91 97 05 	lds	r23, 0x0597	; 0x800597 <LOC_af32_SignalsParameters+0x5>
     2ee:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <LOC_af32_SignalsParameters+0x6>
     2f2:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <LOC_af32_SignalsParameters+0x7>
     2f6:	2e e1       	ldi	r18, 0x1E	; 30
     2f8:	49 e0       	ldi	r20, 0x09	; 9
     2fa:	0e 94 9e 06 	call	0xd3c	; 0xd3c <NOKIA5110_enu_DrawNumber>
            
            //Graphics
            if(LOC_u8_FirstTrigger)
            {
                enu_DrawPWM(LOC_af32_SignalsParameters);
     2fe:	82 e9       	ldi	r24, 0x92	; 146
     300:	95 e0       	ldi	r25, 0x05	; 5
     302:	0e 94 75 00 	call	0xea	; 0xea <enu_DrawPWM>
     306:	7f cf       	rjmp	.-258    	; 0x206 <PWMScope_enu_RunScope>

00000308 <vid_IncrementOverFlowCounter>:
}

void vid_IncrementOverFlowCounter()
{

    LOC_au64_NumberOfOverflowsArray[0]++;
     308:	e0 ea       	ldi	r30, 0xA0	; 160
     30a:	f5 e0       	ldi	r31, 0x05	; 5
     30c:	20 81       	ld	r18, Z
     30e:	31 81       	ldd	r19, Z+1	; 0x01
     310:	42 81       	ldd	r20, Z+2	; 0x02
     312:	53 81       	ldd	r21, Z+3	; 0x03
     314:	64 81       	ldd	r22, Z+4	; 0x04
     316:	75 81       	ldd	r23, Z+5	; 0x05
     318:	86 81       	ldd	r24, Z+6	; 0x06
     31a:	97 81       	ldd	r25, Z+7	; 0x07
     31c:	a1 e0       	ldi	r26, 0x01	; 1
     31e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__adddi3_s8>
     322:	20 83       	st	Z, r18
     324:	31 83       	std	Z+1, r19	; 0x01
     326:	42 83       	std	Z+2, r20	; 0x02
     328:	53 83       	std	Z+3, r21	; 0x03
     32a:	64 83       	std	Z+4, r22	; 0x04
     32c:	75 83       	std	Z+5, r23	; 0x05
     32e:	86 83       	std	Z+6, r24	; 0x06
     330:	97 83       	std	Z+7, r25	; 0x07
     332:	08 95       	ret

00000334 <vid_CapturingFunction>:

u16 TestVariable;
void vid_CapturingFunction(void* Copy_pvid_FunctionParameters)
{

    switch (LOC_u8_State)
     334:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <LOC_u8_State>
     338:	82 30       	cpi	r24, 0x02	; 2
     33a:	b9 f1       	breq	.+110    	; 0x3aa <vid_CapturingFunction+0x76>
     33c:	83 30       	cpi	r24, 0x03	; 3
     33e:	c1 f0       	breq	.+48     	; 0x370 <vid_CapturingFunction+0x3c>
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	09 f0       	breq	.+2      	; 0x346 <vid_CapturingFunction+0x12>
     344:	50 c0       	rjmp	.+160    	; 0x3e6 <vid_CapturingFunction+0xb2>
        
        
        case ICU_FIRST_RISING_EDGE:
        {
            
            Timer1_enu_SetTCNT1(0);
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Timer1_enu_SetTCNT1>

            LOC_au64_NumberOfOverflowsArray[0] = 0; //Resetting Overflow Counter
     34e:	e0 ea       	ldi	r30, 0xA0	; 160
     350:	f5 e0       	ldi	r31, 0x05	; 5
     352:	10 82       	st	Z, r1
     354:	11 82       	std	Z+1, r1	; 0x01
     356:	12 82       	std	Z+2, r1	; 0x02
     358:	13 82       	std	Z+3, r1	; 0x03
     35a:	14 82       	std	Z+4, r1	; 0x04
     35c:	15 82       	std	Z+5, r1	; 0x05
     35e:	16 82       	std	Z+6, r1	; 0x06
     360:	17 82       	std	Z+7, r1	; 0x07

            Timer1_enu_SetInputCaptureEdge(TIMER1_ICU_FALLING_EDGE);            
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <Timer1_enu_SetInputCaptureEdge>
            
            LOC_u8_State = ICU_FALLING_EDGE;  //Setting state machine to Falling edge
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <LOC_u8_State>
            

            break;
     36e:	08 95       	ret
        }

        case ICU_FALLING_EDGE:
        {
            
            Timer1_enu_GetICR1(&LOC_u64_TonCounts);
     370:	88 eb       	ldi	r24, 0xB8	; 184
     372:	95 e0       	ldi	r25, 0x05	; 5
     374:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <Timer1_enu_GetICR1>

            LOC_au64_NumberOfOverflowsArray[1] = LOC_au64_NumberOfOverflowsArray[0];
     378:	e0 ea       	ldi	r30, 0xA0	; 160
     37a:	f5 e0       	ldi	r31, 0x05	; 5
     37c:	70 81       	ld	r23, Z
     37e:	61 81       	ldd	r22, Z+1	; 0x01
     380:	52 81       	ldd	r21, Z+2	; 0x02
     382:	43 81       	ldd	r20, Z+3	; 0x03
     384:	34 81       	ldd	r19, Z+4	; 0x04
     386:	25 81       	ldd	r18, Z+5	; 0x05
     388:	96 81       	ldd	r25, Z+6	; 0x06
     38a:	87 81       	ldd	r24, Z+7	; 0x07
     38c:	70 87       	std	Z+8, r23	; 0x08
     38e:	61 87       	std	Z+9, r22	; 0x09
     390:	52 87       	std	Z+10, r21	; 0x0a
     392:	43 87       	std	Z+11, r20	; 0x0b
     394:	34 87       	std	Z+12, r19	; 0x0c
     396:	25 87       	std	Z+13, r18	; 0x0d
     398:	96 87       	std	Z+14, r25	; 0x0e
     39a:	87 87       	std	Z+15, r24	; 0x0f
            
            Timer1_enu_SetInputCaptureEdge(TIMER1_ICU_RISING_EDGE);
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <Timer1_enu_SetInputCaptureEdge>
            
            LOC_u8_State = ICU_SECOND_RISING_EDGE; //Setting state machine to Falling edge
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <LOC_u8_State>
            
            


            break;
     3a8:	08 95       	ret
        }
        
        case ICU_SECOND_RISING_EDGE:
        {
            Timer1_enu_GetICR1(&LOC_u64_PeriodCounts);
     3aa:	80 ec       	ldi	r24, 0xC0	; 192
     3ac:	95 e0       	ldi	r25, 0x05	; 5
     3ae:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <Timer1_enu_GetICR1>
            
            LOC_au64_NumberOfOverflowsArray[2] = LOC_au64_NumberOfOverflowsArray[0];
     3b2:	e0 ea       	ldi	r30, 0xA0	; 160
     3b4:	f5 e0       	ldi	r31, 0x05	; 5
     3b6:	70 81       	ld	r23, Z
     3b8:	61 81       	ldd	r22, Z+1	; 0x01
     3ba:	52 81       	ldd	r21, Z+2	; 0x02
     3bc:	43 81       	ldd	r20, Z+3	; 0x03
     3be:	34 81       	ldd	r19, Z+4	; 0x04
     3c0:	25 81       	ldd	r18, Z+5	; 0x05
     3c2:	96 81       	ldd	r25, Z+6	; 0x06
     3c4:	87 81       	ldd	r24, Z+7	; 0x07
     3c6:	70 8b       	std	Z+16, r23	; 0x10
     3c8:	61 8b       	std	Z+17, r22	; 0x11
     3ca:	52 8b       	std	Z+18, r21	; 0x12
     3cc:	43 8b       	std	Z+19, r20	; 0x13
     3ce:	34 8b       	std	Z+20, r19	; 0x14
     3d0:	25 8b       	std	Z+21, r18	; 0x15
     3d2:	96 8b       	std	Z+22, r25	; 0x16
     3d4:	87 8b       	std	Z+23, r24	; 0x17

            #if ICU_MODE == ICU_SNGLE_CAPTURE_MODE
            Timer1_enu_DisableInterrupt(TIMER1_CAPTURE_EVENT_ISR);
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Timer1_enu_DisableInterrupt>
            Timer1_enu_DisableInterrupt(TIMER1_OVERFLOW_ISR);
     3dc:	83 e0       	ldi	r24, 0x03	; 3
     3de:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Timer1_enu_DisableInterrupt>
            LOC_u8_State = ICU_IDLE;
     3e2:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <LOC_u8_State>
     3e6:	08 95       	ret

000003e8 <ICU_enu_Initialization>:
extern ErrorState_t ICU_enu_Initialization()
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    //Initialize Timer peripheral: Timer1, Normal, PS 1024, and  Interrupt Mode for overflow and input capture
    Timer1_enu_Initialization();
     3e8:	0e 94 37 0a 	call	0x146e	; 0x146e <Timer1_enu_Initialization>
    Timer1_enu_DisableInterrupt(TIMER1_CAPTURE_EVENT_ISR);
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Timer1_enu_DisableInterrupt>
    Timer1_enu_DisableInterrupt(TIMER1_OVERFLOW_ISR);
     3f2:	83 e0       	ldi	r24, 0x03	; 3
     3f4:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Timer1_enu_DisableInterrupt>
    Timer1_enu_SetCallBackFunction(TIMER1_CAPTURE_EVENT_ISR, vid_CapturingFunction, NULL);
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	6a e9       	ldi	r22, 0x9A	; 154
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <Timer1_enu_SetCallBackFunction>
    Timer1_enu_SetCallBackFunction(TIMER1_OVERFLOW_ISR, vid_IncrementOverFlowCounter, NULL);
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	64 e8       	ldi	r22, 0x84	; 132
     40c:	71 e0       	ldi	r23, 0x01	; 1
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <Timer1_enu_SetCallBackFunction>


    //Initialize ICU module
    LOC_u8_State = ICU_IDLE; //State machine must start as IDLE until activation
     414:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <LOC_u8_State>
    // Timer_enu_DisableInterruptMode(ICU_TIMER_USED, TIMER_NORMAL); //Disabling Timer Interrupt
    // Timer_enu_SetCallBack(ICU_TIMER_USED, TIMER_NORMAL, vid_IncrementOverFlowCounter, NULL);//Setting Call Back Function

    return Local_u8_ErrorFlag;

}
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	08 95       	ret

0000041c <ICU_enu_StartCapture>:

extern ErrorState_t ICU_enu_StartCapture()
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(LOC_u8_State == ICU_IDLE)
     41c:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <LOC_u8_State>
     420:	81 11       	cpse	r24, r1
     422:	16 c0       	rjmp	.+44     	; 0x450 <ICU_enu_StartCapture+0x34>
    {
        
        LOC_u8_State = ICU_FIRST_RISING_EDGE; //State machine will begin from the 'FIRS_RISING_EGDE' State
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <LOC_u8_State>
        
        Timer1_enu_GetPS(&LOC_u16_Timer_PS);
     42a:	8e e9       	ldi	r24, 0x9E	; 158
     42c:	95 e0       	ldi	r25, 0x05	; 5
     42e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <Timer1_enu_GetPS>
        
        Timer1_enu_SetInputCaptureEdge(TIMER1_ICU_RISING_EDGE);
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <Timer1_enu_SetInputCaptureEdge>

        Timer1_enu_ClearFlag(TIMER1_CAPTURE_EVENT_ISR); //Clearing Flag in case of pending interrupts
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Timer1_enu_ClearFlag>
        
        Timer1_enu_ClearFlag(TIMER1_OVERFLOW_ISR); //Clearing Flag in case of pending interrupts
     43e:	83 e0       	ldi	r24, 0x03	; 3
     440:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Timer1_enu_ClearFlag>

        Timer1_enu_EnableInterrupt(TIMER1_CAPTURE_EVENT_ISR);
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Timer1_enu_EnableInterrupt>
    
        Timer1_enu_EnableInterrupt(TIMER1_OVERFLOW_ISR);
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Timer1_enu_EnableInterrupt>
    }

    return Local_u8_ErrorFlag;
}
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	08 95       	ret

00000454 <ICU_enu_CalculateParameters>:

extern ErrorState_t ICU_enu_CalculateParameters(f32* Copy_pf32_SignalParametersArray)
{
     454:	2f 92       	push	r2
     456:	3f 92       	push	r3
     458:	4f 92       	push	r4
     45a:	5f 92       	push	r5
     45c:	6f 92       	push	r6
     45e:	7f 92       	push	r7
     460:	8f 92       	push	r8
     462:	9f 92       	push	r9
     464:	af 92       	push	r10
     466:	bf 92       	push	r11
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	00 d0       	rcall	.+0      	; 0x47a <ICU_enu_CalculateParameters+0x26>
     47a:	00 d0       	rcall	.+0      	; 0x47c <ICU_enu_CalculateParameters+0x28>
     47c:	00 d0       	rcall	.+0      	; 0x47e <ICU_enu_CalculateParameters+0x2a>
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	1c 01       	movw	r2, r24
    u8 Local_u8_ErrorFlag = ES_NOK;
    u32 Local_u32_TimerFrequency = 16000000UL/LOC_u16_Timer_PS; 
     484:	20 91 9e 05 	lds	r18, 0x059E	; 0x80059e <LOC_u16_Timer_PS>
     488:	30 91 9f 05 	lds	r19, 0x059F	; 0x80059f <LOC_u16_Timer_PS+0x1>
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	74 e2       	ldi	r23, 0x24	; 36
     494:	84 ef       	ldi	r24, 0xF4	; 244
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__udivmodsi4>
    
    if(LOC_u8_State == ICU_IDLE)
     49c:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <LOC_u8_State>
     4a0:	81 11       	cpse	r24, r1
     4a2:	38 c1       	rjmp	.+624    	; 0x714 <ICU_enu_CalculateParameters+0x2c0>
     4a4:	29 83       	std	Y+1, r18	; 0x01
     4a6:	3a 83       	std	Y+2, r19	; 0x02
     4a8:	4b 83       	std	Y+3, r20	; 0x03
     4aa:	5c 83       	std	Y+4, r21	; 0x04
    {

        LOC_u64_PeriodCounts += 65536*LOC_au64_NumberOfOverflowsArray[2]; //Total Number of Period Counts
     4ac:	e0 ea       	ldi	r30, 0xA0	; 160
     4ae:	f5 e0       	ldi	r31, 0x05	; 5
     4b0:	20 89       	ldd	r18, Z+16	; 0x10
     4b2:	31 89       	ldd	r19, Z+17	; 0x11
     4b4:	42 89       	ldd	r20, Z+18	; 0x12
     4b6:	53 89       	ldd	r21, Z+19	; 0x13
     4b8:	64 89       	ldd	r22, Z+20	; 0x14
     4ba:	75 89       	ldd	r23, Z+21	; 0x15
     4bc:	86 89       	ldd	r24, Z+22	; 0x16
     4be:	97 89       	ldd	r25, Z+23	; 0x17
     4c0:	00 e1       	ldi	r16, 0x10	; 16
     4c2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__ashldi3>
     4c6:	a0 90 c0 05 	lds	r10, 0x05C0	; 0x8005c0 <LOC_u64_PeriodCounts>
     4ca:	b0 90 c1 05 	lds	r11, 0x05C1	; 0x8005c1 <LOC_u64_PeriodCounts+0x1>
     4ce:	c0 90 c2 05 	lds	r12, 0x05C2	; 0x8005c2 <LOC_u64_PeriodCounts+0x2>
     4d2:	d0 90 c3 05 	lds	r13, 0x05C3	; 0x8005c3 <LOC_u64_PeriodCounts+0x3>
     4d6:	e0 90 c4 05 	lds	r14, 0x05C4	; 0x8005c4 <LOC_u64_PeriodCounts+0x4>
     4da:	f0 90 c5 05 	lds	r15, 0x05C5	; 0x8005c5 <LOC_u64_PeriodCounts+0x5>
     4de:	00 91 c6 05 	lds	r16, 0x05C6	; 0x8005c6 <LOC_u64_PeriodCounts+0x6>
     4e2:	10 91 c7 05 	lds	r17, 0x05C7	; 0x8005c7 <LOC_u64_PeriodCounts+0x7>
     4e6:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__adddi3>
     4ea:	42 2e       	mov	r4, r18
     4ec:	53 2e       	mov	r5, r19
     4ee:	64 2e       	mov	r6, r20
     4f0:	75 2e       	mov	r7, r21
     4f2:	86 2e       	mov	r8, r22
     4f4:	97 2e       	mov	r9, r23
     4f6:	8e 83       	std	Y+6, r24	; 0x06
     4f8:	9d 83       	std	Y+5, r25	; 0x05
     4fa:	20 93 c0 05 	sts	0x05C0, r18	; 0x8005c0 <LOC_u64_PeriodCounts>
     4fe:	30 93 c1 05 	sts	0x05C1, r19	; 0x8005c1 <LOC_u64_PeriodCounts+0x1>
     502:	40 93 c2 05 	sts	0x05C2, r20	; 0x8005c2 <LOC_u64_PeriodCounts+0x2>
     506:	50 93 c3 05 	sts	0x05C3, r21	; 0x8005c3 <LOC_u64_PeriodCounts+0x3>
     50a:	60 93 c4 05 	sts	0x05C4, r22	; 0x8005c4 <LOC_u64_PeriodCounts+0x4>
     50e:	70 93 c5 05 	sts	0x05C5, r23	; 0x8005c5 <LOC_u64_PeriodCounts+0x5>
     512:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <LOC_u64_PeriodCounts+0x6>
     516:	90 93 c7 05 	sts	0x05C7, r25	; 0x8005c7 <LOC_u64_PeriodCounts+0x7>

        LOC_u64_TonCounts += 65536*LOC_au64_NumberOfOverflowsArray[1]; //Total Number of Duty Counts
     51a:	20 85       	ldd	r18, Z+8	; 0x08
     51c:	31 85       	ldd	r19, Z+9	; 0x09
     51e:	42 85       	ldd	r20, Z+10	; 0x0a
     520:	53 85       	ldd	r21, Z+11	; 0x0b
     522:	64 85       	ldd	r22, Z+12	; 0x0c
     524:	75 85       	ldd	r23, Z+13	; 0x0d
     526:	86 85       	ldd	r24, Z+14	; 0x0e
     528:	97 85       	ldd	r25, Z+15	; 0x0f
     52a:	00 e1       	ldi	r16, 0x10	; 16
     52c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__ashldi3>
     530:	a0 90 b8 05 	lds	r10, 0x05B8	; 0x8005b8 <LOC_u64_TonCounts>
     534:	b0 90 b9 05 	lds	r11, 0x05B9	; 0x8005b9 <LOC_u64_TonCounts+0x1>
     538:	c0 90 ba 05 	lds	r12, 0x05BA	; 0x8005ba <LOC_u64_TonCounts+0x2>
     53c:	d0 90 bb 05 	lds	r13, 0x05BB	; 0x8005bb <LOC_u64_TonCounts+0x3>
     540:	e0 90 bc 05 	lds	r14, 0x05BC	; 0x8005bc <LOC_u64_TonCounts+0x4>
     544:	f0 90 bd 05 	lds	r15, 0x05BD	; 0x8005bd <LOC_u64_TonCounts+0x5>
     548:	00 91 be 05 	lds	r16, 0x05BE	; 0x8005be <LOC_u64_TonCounts+0x6>
     54c:	10 91 bf 05 	lds	r17, 0x05BF	; 0x8005bf <LOC_u64_TonCounts+0x7>
     550:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__adddi3>
     554:	20 93 b8 05 	sts	0x05B8, r18	; 0x8005b8 <LOC_u64_TonCounts>
     558:	30 93 b9 05 	sts	0x05B9, r19	; 0x8005b9 <LOC_u64_TonCounts+0x1>
     55c:	40 93 ba 05 	sts	0x05BA, r20	; 0x8005ba <LOC_u64_TonCounts+0x2>
     560:	50 93 bb 05 	sts	0x05BB, r21	; 0x8005bb <LOC_u64_TonCounts+0x3>
     564:	60 93 bc 05 	sts	0x05BC, r22	; 0x8005bc <LOC_u64_TonCounts+0x4>
     568:	70 93 bd 05 	sts	0x05BD, r23	; 0x8005bd <LOC_u64_TonCounts+0x5>
     56c:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <LOC_u64_TonCounts+0x6>
     570:	90 93 bf 05 	sts	0x05BF, r25	; 0x8005bf <LOC_u64_TonCounts+0x7>

        //Calculating Frequency in Hz and Time in ms
        if(LOC_u64_PeriodCounts != 0)
     574:	24 2d       	mov	r18, r4
     576:	35 2d       	mov	r19, r5
     578:	46 2d       	mov	r20, r6
     57a:	57 2d       	mov	r21, r7
     57c:	68 2d       	mov	r22, r8
     57e:	79 2d       	mov	r23, r9
     580:	8e 81       	ldd	r24, Y+6	; 0x06
     582:	9d 81       	ldd	r25, Y+5	; 0x05
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__cmpdi2_s8>
     58a:	e9 f0       	breq	.+58     	; 0x5c6 <ICU_enu_CalculateParameters+0x172>
        {
            Copy_pf32_SignalParametersArray[0] = ((f32)Local_u32_TimerFrequency/LOC_u64_PeriodCounts);
     58c:	69 81       	ldd	r22, Y+1	; 0x01
     58e:	7a 81       	ldd	r23, Y+2	; 0x02
     590:	8b 81       	ldd	r24, Y+3	; 0x03
     592:	9c 81       	ldd	r25, Y+4	; 0x04
     594:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__floatunsisf>
     598:	6b 01       	movw	r12, r22
     59a:	7c 01       	movw	r14, r24
     59c:	24 2d       	mov	r18, r4
     59e:	35 2d       	mov	r19, r5
     5a0:	46 2d       	mov	r20, r6
     5a2:	57 2d       	mov	r21, r7
     5a4:	68 2d       	mov	r22, r8
     5a6:	79 2d       	mov	r23, r9
     5a8:	8e 81       	ldd	r24, Y+6	; 0x06
     5aa:	9d 81       	ldd	r25, Y+5	; 0x05
     5ac:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatundisf>
     5b0:	9b 01       	movw	r18, r22
     5b2:	ac 01       	movw	r20, r24
     5b4:	c7 01       	movw	r24, r14
     5b6:	b6 01       	movw	r22, r12
     5b8:	0e 94 91 0c 	call	0x1922	; 0x1922 <__divsf3>
     5bc:	f1 01       	movw	r30, r2
     5be:	60 83       	st	Z, r22
     5c0:	71 83       	std	Z+1, r23	; 0x01
     5c2:	82 83       	std	Z+2, r24	; 0x02
     5c4:	93 83       	std	Z+3, r25	; 0x03
            
        }

        //Calculating Duty Ratio in %
        if(LOC_u64_PeriodCounts != 0)
     5c6:	70 90 c0 05 	lds	r7, 0x05C0	; 0x8005c0 <LOC_u64_PeriodCounts>
     5ca:	c0 90 c1 05 	lds	r12, 0x05C1	; 0x8005c1 <LOC_u64_PeriodCounts+0x1>
     5ce:	d0 90 c2 05 	lds	r13, 0x05C2	; 0x8005c2 <LOC_u64_PeriodCounts+0x2>
     5d2:	e0 90 c3 05 	lds	r14, 0x05C3	; 0x8005c3 <LOC_u64_PeriodCounts+0x3>
     5d6:	f0 90 c4 05 	lds	r15, 0x05C4	; 0x8005c4 <LOC_u64_PeriodCounts+0x4>
     5da:	10 91 c5 05 	lds	r17, 0x05C5	; 0x8005c5 <LOC_u64_PeriodCounts+0x5>
     5de:	f0 91 c6 05 	lds	r31, 0x05C6	; 0x8005c6 <LOC_u64_PeriodCounts+0x6>
     5e2:	fe 83       	std	Y+6, r31	; 0x06
     5e4:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <LOC_u64_PeriodCounts+0x7>
     5e8:	8d 83       	std	Y+5, r24	; 0x05
     5ea:	27 2d       	mov	r18, r7
     5ec:	3c 2d       	mov	r19, r12
     5ee:	4d 2d       	mov	r20, r13
     5f0:	5e 2d       	mov	r21, r14
     5f2:	6f 2d       	mov	r22, r15
     5f4:	71 2f       	mov	r23, r17
     5f6:	8f 2f       	mov	r24, r31
     5f8:	9d 81       	ldd	r25, Y+5	; 0x05
     5fa:	a0 e0       	ldi	r26, 0x00	; 0
     5fc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__cmpdi2_s8>
     600:	79 f1       	breq	.+94     	; 0x660 <ICU_enu_CalculateParameters+0x20c>
        {
            Copy_pf32_SignalParametersArray[1] = (LOC_u64_TonCounts*100.0)/(LOC_u64_PeriodCounts);
     602:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <LOC_u64_TonCounts>
     606:	30 91 b9 05 	lds	r19, 0x05B9	; 0x8005b9 <LOC_u64_TonCounts+0x1>
     60a:	40 91 ba 05 	lds	r20, 0x05BA	; 0x8005ba <LOC_u64_TonCounts+0x2>
     60e:	50 91 bb 05 	lds	r21, 0x05BB	; 0x8005bb <LOC_u64_TonCounts+0x3>
     612:	60 91 bc 05 	lds	r22, 0x05BC	; 0x8005bc <LOC_u64_TonCounts+0x4>
     616:	70 91 bd 05 	lds	r23, 0x05BD	; 0x8005bd <LOC_u64_TonCounts+0x5>
     61a:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <LOC_u64_TonCounts+0x6>
     61e:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <LOC_u64_TonCounts+0x7>
     622:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatundisf>
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	48 ec       	ldi	r20, 0xC8	; 200
     62c:	52 e4       	ldi	r21, 0x42	; 66
     62e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__mulsf3>
     632:	4b 01       	movw	r8, r22
     634:	5c 01       	movw	r10, r24
     636:	27 2d       	mov	r18, r7
     638:	3c 2d       	mov	r19, r12
     63a:	4d 2d       	mov	r20, r13
     63c:	5e 2d       	mov	r21, r14
     63e:	6f 2d       	mov	r22, r15
     640:	71 2f       	mov	r23, r17
     642:	8e 81       	ldd	r24, Y+6	; 0x06
     644:	9d 81       	ldd	r25, Y+5	; 0x05
     646:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatundisf>
     64a:	9b 01       	movw	r18, r22
     64c:	ac 01       	movw	r20, r24
     64e:	c5 01       	movw	r24, r10
     650:	b4 01       	movw	r22, r8
     652:	0e 94 91 0c 	call	0x1922	; 0x1922 <__divsf3>
     656:	f1 01       	movw	r30, r2
     658:	64 83       	std	Z+4, r22	; 0x04
     65a:	75 83       	std	Z+5, r23	; 0x05
     65c:	86 83       	std	Z+6, r24	; 0x06
     65e:	97 83       	std	Z+7, r25	; 0x07
        }

        //Period in ms
        {
            Copy_pf32_SignalParametersArray[2] = (LOC_u64_PeriodCounts*1000/(f32)Local_u32_TimerFrequency);
     660:	f0 91 c0 05 	lds	r31, 0x05C0	; 0x8005c0 <LOC_u64_PeriodCounts>
     664:	fd 83       	std	Y+5, r31	; 0x05
     666:	b0 91 c1 05 	lds	r27, 0x05C1	; 0x8005c1 <LOC_u64_PeriodCounts+0x1>
     66a:	a0 91 c2 05 	lds	r26, 0x05C2	; 0x8005c2 <LOC_u64_PeriodCounts+0x2>
     66e:	f0 91 c3 05 	lds	r31, 0x05C3	; 0x8005c3 <LOC_u64_PeriodCounts+0x3>
     672:	e0 91 c4 05 	lds	r30, 0x05C4	; 0x8005c4 <LOC_u64_PeriodCounts+0x4>
     676:	90 90 c5 05 	lds	r9, 0x05C5	; 0x8005c5 <LOC_u64_PeriodCounts+0x5>
     67a:	80 90 c6 05 	lds	r8, 0x05C6	; 0x8005c6 <LOC_u64_PeriodCounts+0x6>
     67e:	70 90 c7 05 	lds	r7, 0x05C7	; 0x8005c7 <LOC_u64_PeriodCounts+0x7>
     682:	2d 81       	ldd	r18, Y+5	; 0x05
     684:	3b 2f       	mov	r19, r27
     686:	4a 2f       	mov	r20, r26
     688:	5f 2f       	mov	r21, r31
     68a:	6e 2f       	mov	r22, r30
     68c:	79 2d       	mov	r23, r9
     68e:	88 2d       	mov	r24, r8
     690:	97 2d       	mov	r25, r7
     692:	02 e0       	ldi	r16, 0x02	; 2
     694:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__ashldi3>
     698:	a2 2e       	mov	r10, r18
     69a:	b3 2e       	mov	r11, r19
     69c:	c4 2e       	mov	r12, r20
     69e:	d5 2e       	mov	r13, r21
     6a0:	e6 2e       	mov	r14, r22
     6a2:	f7 2e       	mov	r15, r23
     6a4:	8e 83       	std	Y+6, r24	; 0x06
     6a6:	19 2f       	mov	r17, r25
     6a8:	05 e0       	ldi	r16, 0x05	; 5
     6aa:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__ashldi3>
     6ae:	0e 81       	ldd	r16, Y+6	; 0x06
     6b0:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__subdi3>
     6b4:	ad 80       	ldd	r10, Y+5	; 0x05
     6b6:	bb 2e       	mov	r11, r27
     6b8:	ca 2e       	mov	r12, r26
     6ba:	df 2e       	mov	r13, r31
     6bc:	ee 2e       	mov	r14, r30
     6be:	f9 2c       	mov	r15, r9
     6c0:	08 2d       	mov	r16, r8
     6c2:	17 2d       	mov	r17, r7
     6c4:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__adddi3>
     6c8:	03 e0       	ldi	r16, 0x03	; 3
     6ca:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__ashldi3>
     6ce:	d2 2e       	mov	r13, r18
     6d0:	e3 2e       	mov	r14, r19
     6d2:	f4 2e       	mov	r15, r20
     6d4:	15 2f       	mov	r17, r21
     6d6:	6e 83       	std	Y+6, r22	; 0x06
     6d8:	7d 83       	std	Y+5, r23	; 0x05
     6da:	b8 2e       	mov	r11, r24
     6dc:	c9 2e       	mov	r12, r25
     6de:	69 81       	ldd	r22, Y+1	; 0x01
     6e0:	7a 81       	ldd	r23, Y+2	; 0x02
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__floatunsisf>
     6ea:	2b 01       	movw	r4, r22
     6ec:	3c 01       	movw	r6, r24
     6ee:	2d 2d       	mov	r18, r13
     6f0:	3e 2d       	mov	r19, r14
     6f2:	4f 2d       	mov	r20, r15
     6f4:	51 2f       	mov	r21, r17
     6f6:	6e 81       	ldd	r22, Y+6	; 0x06
     6f8:	7d 81       	ldd	r23, Y+5	; 0x05
     6fa:	8b 2d       	mov	r24, r11
     6fc:	9c 2d       	mov	r25, r12
     6fe:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__floatundisf>
     702:	a3 01       	movw	r20, r6
     704:	92 01       	movw	r18, r4
     706:	0e 94 91 0c 	call	0x1922	; 0x1922 <__divsf3>
     70a:	f1 01       	movw	r30, r2
     70c:	60 87       	std	Z+8, r22	; 0x08
     70e:	71 87       	std	Z+9, r23	; 0x09
     710:	82 87       	std	Z+10, r24	; 0x0a
     712:	93 87       	std	Z+11, r25	; 0x0b
        }
    
    }

    return Local_u8_ErrorFlag;
}
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	26 96       	adiw	r28, 0x06	; 6
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	ef 90       	pop	r14
     72e:	df 90       	pop	r13
     730:	cf 90       	pop	r12
     732:	bf 90       	pop	r11
     734:	af 90       	pop	r10
     736:	9f 90       	pop	r9
     738:	8f 90       	pop	r8
     73a:	7f 90       	pop	r7
     73c:	6f 90       	pop	r6
     73e:	5f 90       	pop	r5
     740:	4f 90       	pop	r4
     742:	3f 90       	pop	r3
     744:	2f 90       	pop	r2
     746:	08 95       	ret

00000748 <enu_GenerateFrame>:
    u8 Local_u8_ErrorFlag = ES_NOK;

    Local_u8_ErrorFlag = enu_CopyPixelByCooridnates(Copy_u8_Yoriginal, Copy_u8_Xoriginal, Copy_u8_Ycopied, Copy_u8_Xcopied);

    return Local_u8_ErrorFlag;
}
     748:	fb 01       	movw	r30, r22
     74a:	10 82       	st	Z, r1
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	87 30       	cpi	r24, 0x07	; 7
     750:	91 05       	cpc	r25, r1
     752:	08 f0       	brcs	.+2      	; 0x756 <enu_GenerateFrame+0xe>
     754:	67 c0       	rjmp	.+206    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     756:	fc 01       	movw	r30, r24
     758:	e6 5d       	subi	r30, 0xD6	; 214
     75a:	ff 4f       	sbci	r31, 0xFF	; 255
     75c:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__tablejump2__>
     760:	e0 e6       	ldi	r30, 0x60	; 96
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	20 81       	ld	r18, Z
     766:	91 81       	ldd	r25, Z+1	; 0x01
     768:	42 81       	ldd	r20, Z+2	; 0x02
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	22 0f       	add	r18, r18
     76e:	33 1f       	adc	r19, r19
     770:	22 0f       	add	r18, r18
     772:	33 1f       	adc	r19, r19
     774:	89 2f       	mov	r24, r25
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	20 62       	ori	r18, 0x20	; 32
     77e:	82 2b       	or	r24, r18
     780:	84 2b       	or	r24, r20
     782:	fb 01       	movw	r30, r22
     784:	80 83       	st	Z, r24
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	08 95       	ret
     78a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     78e:	88 23       	and	r24, r24
     790:	51 f0       	breq	.+20     	; 0x7a6 <enu_GenerateFrame+0x5e>
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	61 f0       	breq	.+24     	; 0x7ae <enu_GenerateFrame+0x66>
     796:	82 30       	cpi	r24, 0x02	; 2
     798:	71 f0       	breq	.+28     	; 0x7b6 <enu_GenerateFrame+0x6e>
     79a:	83 30       	cpi	r24, 0x03	; 3
     79c:	81 f4       	brne	.+32     	; 0x7be <enu_GenerateFrame+0x76>
     79e:	41 e0       	ldi	r20, 0x01	; 1
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	0f c0       	rjmp	.+30     	; 0x7c4 <enu_GenerateFrame+0x7c>
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	0b c0       	rjmp	.+22     	; 0x7c4 <enu_GenerateFrame+0x7c>
     7ae:	41 e0       	ldi	r20, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	07 c0       	rjmp	.+14     	; 0x7c4 <enu_GenerateFrame+0x7c>
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <enu_GenerateFrame+0x7c>
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	81 11       	cpse	r24, r1
     7c6:	2f c0       	rjmp	.+94     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     7c8:	29 2f       	mov	r18, r25
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	22 0f       	add	r18, r18
     7ce:	33 1f       	adc	r19, r19
     7d0:	22 0f       	add	r18, r18
     7d2:	33 1f       	adc	r19, r19
     7d4:	24 2b       	or	r18, r20
     7d6:	28 60       	ori	r18, 0x08	; 8
     7d8:	fb 01       	movw	r30, r22
     7da:	20 83       	st	Z, r18
     7dc:	08 95       	ret
     7de:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     7e2:	80 64       	ori	r24, 0x40	; 64
     7e4:	fb 01       	movw	r30, r22
     7e6:	80 83       	st	Z, r24
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	08 95       	ret
     7ec:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     7f0:	80 68       	ori	r24, 0x80	; 128
     7f2:	fb 01       	movw	r30, r22
     7f4:	80 83       	st	Z, r24
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	08 95       	ret
     7fa:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     7fe:	84 60       	ori	r24, 0x04	; 4
     800:	fb 01       	movw	r30, r22
     802:	80 83       	st	Z, r24
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	08 95       	ret
     808:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
     80c:	80 61       	ori	r24, 0x10	; 16
     80e:	fb 01       	movw	r30, r22
     810:	80 83       	st	Z, r24
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	08 95       	ret
     816:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
     81a:	80 68       	ori	r24, 0x80	; 128
     81c:	fb 01       	movw	r30, r22
     81e:	80 83       	st	Z, r24
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	08 95       	ret
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	08 95       	ret

00000828 <enu_ConvertCoordinatesToAddresses>:
     828:	00 97       	sbiw	r24, 0x00	; 0
     82a:	51 f0       	breq	.+20     	; 0x840 <enu_ConvertCoordinatesToAddresses+0x18>
     82c:	fc 01       	movw	r30, r24
     82e:	20 81       	ld	r18, Z
     830:	20 33       	cpi	r18, 0x30	; 48
     832:	40 f4       	brcc	.+16     	; 0x844 <enu_ConvertCoordinatesToAddresses+0x1c>
     834:	26 95       	lsr	r18
     836:	26 95       	lsr	r18
     838:	26 95       	lsr	r18
     83a:	20 83       	st	Z, r18
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	08 95       	ret
     840:	83 e0       	ldi	r24, 0x03	; 3
     842:	08 95       	ret
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	08 95       	ret

00000848 <enu_PassByteToSPI>:
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	1f 92       	push	r1
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	18 2f       	mov	r17, r24
     856:	ce 01       	movw	r24, r28
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	0e 94 1e 0a 	call	0x143c	; 0x143c <SPI_enu_GetCommState>
     85e:	89 81       	ldd	r24, Y+1	; 0x01
     860:	81 11       	cpse	r24, r1
     862:	15 c0       	rjmp	.+42     	; 0x88e <__stack+0x2f>
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	64 e0       	ldi	r22, 0x04	; 4
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enu_SetPinValue>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <__stack+0x11>
     870:	00 c0       	rjmp	.+0      	; 0x872 <__stack+0x13>
     872:	81 2f       	mov	r24, r17
     874:	0e 94 08 0a 	call	0x1410	; 0x1410 <SPI_enu_MasterSend>
     878:	00 c0       	rjmp	.+0      	; 0x87a <__stack+0x1b>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <__stack+0x1d>
     87c:	41 e0       	ldi	r20, 0x01	; 1
     87e:	64 e0       	ldi	r22, 0x04	; 4
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enu_SetPinValue>
     886:	00 c0       	rjmp	.+0      	; 0x888 <__stack+0x29>
     888:	00 c0       	rjmp	.+0      	; 0x88a <__stack+0x2b>
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	01 c0       	rjmp	.+2      	; 0x890 <__stack+0x31>
     88e:	84 e0       	ldi	r24, 0x04	; 4
     890:	0f 90       	pop	r0
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	08 95       	ret

0000089a <enu_SendCommand>:
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	1f 92       	push	r1
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	be 01       	movw	r22, r28
     8a6:	6f 5f       	subi	r22, 0xFF	; 255
     8a8:	7f 4f       	sbci	r23, 0xFF	; 255
     8aa:	0e 94 a4 03 	call	0x748	; 0x748 <enu_GenerateFrame>
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	63 e0       	ldi	r22, 0x03	; 3
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enu_SetPinValue>
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	0e 94 24 04 	call	0x848	; 0x848 <enu_PassByteToSPI>
     8be:	0f 90       	pop	r0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <enu_SendData>:
     8c6:	cf 93       	push	r28
     8c8:	c8 2f       	mov	r28, r24
     8ca:	41 e0       	ldi	r20, 0x01	; 1
     8cc:	63 e0       	ldi	r22, 0x03	; 3
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enu_SetPinValue>
     8d4:	8c 2f       	mov	r24, r28
     8d6:	0e 94 24 04 	call	0x848	; 0x848 <enu_PassByteToSPI>
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <enu_DrawPixel>:
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	1f 92       	push	r1
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	89 83       	std	Y+1, r24	; 0x01
     8f0:	64 35       	cpi	r22, 0x54	; 84
     8f2:	c8 f5       	brcc	.+114    	; 0x966 <enu_DrawPixel+0x88>
     8f4:	80 33       	cpi	r24, 0x30	; 48
     8f6:	c8 f5       	brcc	.+114    	; 0x96a <enu_DrawPixel+0x8c>
     8f8:	42 30       	cpi	r20, 0x02	; 2
     8fa:	c8 f5       	brcc	.+114    	; 0x96e <enu_DrawPixel+0x90>
     8fc:	f4 2e       	mov	r15, r20
     8fe:	16 2f       	mov	r17, r22
     900:	08 2f       	mov	r16, r24
     902:	07 70       	andi	r16, 0x07	; 7
     904:	ce 01       	movw	r24, r28
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	0e 94 14 04 	call	0x828	; 0x828 <enu_ConvertCoordinatesToAddresses>
     90c:	49 81       	ldd	r20, Y+1	; 0x01
     90e:	84 e5       	ldi	r24, 0x54	; 84
     910:	48 9f       	mul	r20, r24
     912:	f0 01       	movw	r30, r0
     914:	11 24       	eor	r1, r1
     916:	e7 53       	subi	r30, 0x37	; 55
     918:	fa 4f       	sbci	r31, 0xFA	; 250
     91a:	e1 0f       	add	r30, r17
     91c:	f1 1d       	adc	r31, r1
     91e:	80 81       	ld	r24, Z
     920:	21 e0       	ldi	r18, 0x01	; 1
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	00 2e       	mov	r0, r16
     926:	02 c0       	rjmp	.+4      	; 0x92c <enu_DrawPixel+0x4e>
     928:	22 0f       	add	r18, r18
     92a:	33 1f       	adc	r19, r19
     92c:	0a 94       	dec	r0
     92e:	e2 f7       	brpl	.-8      	; 0x928 <enu_DrawPixel+0x4a>
     930:	20 95       	com	r18
     932:	28 23       	and	r18, r24
     934:	8f 2d       	mov	r24, r15
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	02 c0       	rjmp	.+4      	; 0x93e <enu_DrawPixel+0x60>
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	0a 95       	dec	r16
     940:	e2 f7       	brpl	.-8      	; 0x93a <enu_DrawPixel+0x5c>
     942:	02 2f       	mov	r16, r18
     944:	08 2b       	or	r16, r24
     946:	00 83       	st	Z, r16
     948:	e0 e6       	ldi	r30, 0x60	; 96
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	44 83       	std	Z+4, r20	; 0x04
     94e:	15 83       	std	Z+5, r17	; 0x05
     950:	82 e0       	ldi	r24, 0x02	; 2
     952:	0e 94 4d 04 	call	0x89a	; 0x89a <enu_SendCommand>
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	0e 94 4d 04 	call	0x89a	; 0x89a <enu_SendCommand>
     95c:	80 2f       	mov	r24, r16
     95e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <enu_SendData>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	05 c0       	rjmp	.+10     	; 0x970 <enu_DrawPixel+0x92>
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	03 c0       	rjmp	.+6      	; 0x970 <enu_DrawPixel+0x92>
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	01 c0       	rjmp	.+2      	; 0x970 <enu_DrawPixel+0x92>
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	0f 90       	pop	r0
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	08 95       	ret

0000097e <enu_DrawFillRectangle>:
     97e:	af 92       	push	r10
     980:	bf 92       	push	r11
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	1f 92       	push	r1
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	a8 2e       	mov	r10, r24
     99a:	16 2f       	mov	r17, r22
     99c:	19 82       	std	Y+1, r1	; 0x01
     99e:	64 35       	cpi	r22, 0x54	; 84
     9a0:	28 f4       	brcc	.+10     	; 0x9ac <enu_DrawFillRectangle+0x2e>
     9a2:	8f e2       	ldi	r24, 0x2F	; 47
     9a4:	8a 15       	cp	r24, r10
     9a6:	20 f4       	brcc	.+8      	; 0x9b0 <enu_DrawFillRectangle+0x32>
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <enu_DrawFillRectangle+0x34>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <enu_DrawFillRectangle+0x34>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	45 35       	cpi	r20, 0x55	; 85
     9b4:	20 f4       	brcc	.+8      	; 0x9be <enu_DrawFillRectangle+0x40>
     9b6:	21 33       	cpi	r18, 0x31	; 49
     9b8:	20 f0       	brcs	.+8      	; 0x9c2 <enu_DrawFillRectangle+0x44>
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <enu_DrawFillRectangle+0x46>
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <enu_DrawFillRectangle+0x46>
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	69 01       	movw	r12, r18
     9c8:	ca 0c       	add	r12, r10
     9ca:	d1 1c       	adc	r13, r1
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	7a 01       	movw	r14, r20
     9d0:	e1 0e       	add	r14, r17
     9d2:	f1 1c       	adc	r15, r1
     9d4:	88 23       	and	r24, r24
     9d6:	49 f1       	breq	.+82     	; 0xa2a <enu_DrawFillRectangle+0xac>
     9d8:	02 30       	cpi	r16, 0x02	; 2
     9da:	48 f5       	brcc	.+82     	; 0xa2e <enu_DrawFillRectangle+0xb0>
     9dc:	99 23       	and	r25, r25
     9de:	49 f1       	breq	.+82     	; 0xa32 <enu_DrawFillRectangle+0xb4>
     9e0:	ce 01       	movw	r24, r28
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	0e 94 14 04 	call	0x828	; 0x828 <enu_ConvertCoordinatesToAddresses>
     9e8:	e0 e6       	ldi	r30, 0x60	; 96
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	84 83       	std	Z+4, r24	; 0x04
     9f0:	15 83       	std	Z+5, r17	; 0x05
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	0e 94 4d 04 	call	0x89a	; 0x89a <enu_SendCommand>
     9f8:	83 e0       	ldi	r24, 0x03	; 3
     9fa:	0e 94 4d 04 	call	0x89a	; 0x89a <enu_SendCommand>
     9fe:	0e c0       	rjmp	.+28     	; 0xa1c <enu_DrawFillRectangle+0x9e>
     a00:	40 2f       	mov	r20, r16
     a02:	61 2f       	mov	r22, r17
     a04:	8b 2d       	mov	r24, r11
     a06:	0e 94 6f 04 	call	0x8de	; 0x8de <enu_DrawPixel>
     a0a:	b3 94       	inc	r11
     a0c:	01 c0       	rjmp	.+2      	; 0xa10 <enu_DrawFillRectangle+0x92>
     a0e:	ba 2c       	mov	r11, r10
     a10:	8b 2d       	mov	r24, r11
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	8c 15       	cp	r24, r12
     a16:	9d 05       	cpc	r25, r13
     a18:	9c f3       	brlt	.-26     	; 0xa00 <enu_DrawFillRectangle+0x82>
     a1a:	1f 5f       	subi	r17, 0xFF	; 255
     a1c:	81 2f       	mov	r24, r17
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	8e 15       	cp	r24, r14
     a22:	9f 05       	cpc	r25, r15
     a24:	a4 f3       	brlt	.-24     	; 0xa0e <enu_DrawFillRectangle+0x90>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <enu_DrawFillRectangle+0xb6>
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	03 c0       	rjmp	.+6      	; 0xa34 <enu_DrawFillRectangle+0xb6>
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	01 c0       	rjmp	.+2      	; 0xa34 <enu_DrawFillRectangle+0xb6>
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	0f 90       	pop	r0
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	bf 90       	pop	r11
     a48:	af 90       	pop	r10
     a4a:	08 95       	ret

00000a4c <enu_DrawASCII>:
     a4c:	cf 92       	push	r12
     a4e:	df 92       	push	r13
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	c8 2e       	mov	r12, r24
     a5e:	f6 2e       	mov	r15, r22
     a60:	e4 2e       	mov	r14, r20
     a62:	d2 2e       	mov	r13, r18
     a64:	01 30       	cpi	r16, 0x01	; 1
     a66:	39 f4       	brne	.+14     	; 0xa76 <enu_DrawASCII+0x2a>
     a68:	00 e0       	ldi	r16, 0x00	; 0
     a6a:	28 e0       	ldi	r18, 0x08	; 8
     a6c:	45 e0       	ldi	r20, 0x05	; 5
     a6e:	6e 2d       	mov	r22, r14
     a70:	8f 2d       	mov	r24, r15
     a72:	0e 94 bf 04 	call	0x97e	; 0x97e <enu_DrawFillRectangle>
     a76:	10 e0       	ldi	r17, 0x00	; 0
     a78:	1e c0       	rjmp	.+60     	; 0xab6 <enu_DrawASCII+0x6a>
     a7a:	8c 2d       	mov	r24, r12
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	fc 01       	movw	r30, r24
     a80:	ee 0f       	add	r30, r30
     a82:	ff 1f       	adc	r31, r31
     a84:	ee 0f       	add	r30, r30
     a86:	ff 1f       	adc	r31, r31
     a88:	e8 0f       	add	r30, r24
     a8a:	f9 1f       	adc	r31, r25
     a8c:	e1 0f       	add	r30, r17
     a8e:	f1 1d       	adc	r31, r1
     a90:	ea 57       	subi	r30, 0x7A	; 122
     a92:	ff 4f       	sbci	r31, 0xFF	; 255
     a94:	d0 81       	ld	r29, Z
     a96:	c0 e0       	ldi	r28, 0x00	; 0
     a98:	0b c0       	rjmp	.+22     	; 0xab0 <enu_DrawASCII+0x64>
     a9a:	d0 ff       	sbrs	r29, 0
     a9c:	07 c0       	rjmp	.+14     	; 0xaac <enu_DrawASCII+0x60>
     a9e:	4d 2d       	mov	r20, r13
     aa0:	61 2f       	mov	r22, r17
     aa2:	6e 0d       	add	r22, r14
     aa4:	8c 2f       	mov	r24, r28
     aa6:	8f 0d       	add	r24, r15
     aa8:	0e 94 6f 04 	call	0x8de	; 0x8de <enu_DrawPixel>
     aac:	cf 5f       	subi	r28, 0xFF	; 255
     aae:	d6 95       	lsr	r29
     ab0:	c8 30       	cpi	r28, 0x08	; 8
     ab2:	98 f3       	brcs	.-26     	; 0xa9a <enu_DrawASCII+0x4e>
     ab4:	1f 5f       	subi	r17, 0xFF	; 255
     ab6:	15 30       	cpi	r17, 0x05	; 5
     ab8:	00 f3       	brcs	.-64     	; 0xa7a <enu_DrawASCII+0x2e>
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	08 95       	ret

00000ace <enu_DrawVerticalLine>:
     ace:	af 92       	push	r10
     ad0:	bf 92       	push	r11
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	80 33       	cpi	r24, 0x30	; 48
     ae4:	40 f4       	brcc	.+16     	; 0xaf6 <enu_DrawVerticalLine+0x28>
     ae6:	64 35       	cpi	r22, 0x54	; 84
     ae8:	40 f4       	brcc	.+16     	; 0xafa <enu_DrawVerticalLine+0x2c>
     aea:	02 30       	cpi	r16, 0x02	; 2
     aec:	40 f4       	brcc	.+16     	; 0xafe <enu_DrawVerticalLine+0x30>
     aee:	41 33       	cpi	r20, 0x31	; 49
     af0:	40 f0       	brcs	.+16     	; 0xb02 <enu_DrawVerticalLine+0x34>
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	07 c0       	rjmp	.+14     	; 0xb04 <enu_DrawVerticalLine+0x36>
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <enu_DrawVerticalLine+0x36>
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	03 c0       	rjmp	.+6      	; 0xb04 <enu_DrawVerticalLine+0x36>
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <enu_DrawVerticalLine+0x36>
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	91 11       	cpse	r25, r1
     b06:	1c c0       	rjmp	.+56     	; 0xb40 <enu_DrawVerticalLine+0x72>
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	29 c0       	rjmp	.+82     	; 0xb5e <enu_DrawVerticalLine+0x90>
     b0c:	ec 2c       	mov	r14, r12
     b0e:	f1 2c       	mov	r15, r1
     b10:	ed 0c       	add	r14, r13
     b12:	f1 1c       	adc	r15, r1
     b14:	dd 2d       	mov	r29, r13
     b16:	dc 0d       	add	r29, r12
     b18:	cd 2d       	mov	r28, r13
     b1a:	0e c0       	rjmp	.+28     	; 0xb38 <enu_DrawVerticalLine+0x6a>
     b1c:	80 e3       	ldi	r24, 0x30	; 48
     b1e:	e8 16       	cp	r14, r24
     b20:	f1 04       	cpc	r15, r1
     b22:	24 f0       	brlt	.+8      	; 0xb2c <enu_DrawVerticalLine+0x5e>
     b24:	c0 33       	cpi	r28, 0x30	; 48
     b26:	10 f0       	brcs	.+4      	; 0xb2c <enu_DrawVerticalLine+0x5e>
     b28:	d0 53       	subi	r29, 0x30	; 48
     b2a:	c0 e0       	ldi	r28, 0x00	; 0
     b2c:	40 2f       	mov	r20, r16
     b2e:	61 2f       	mov	r22, r17
     b30:	8c 2f       	mov	r24, r28
     b32:	0e 94 6f 04 	call	0x8de	; 0x8de <enu_DrawPixel>
     b36:	cf 5f       	subi	r28, 0xFF	; 255
     b38:	dc 17       	cp	r29, r28
     b3a:	80 f7       	brcc	.-32     	; 0xb1c <enu_DrawVerticalLine+0x4e>
     b3c:	1f 5f       	subi	r17, 0xFF	; 255
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <enu_DrawVerticalLine+0x7c>
     b40:	a2 2e       	mov	r10, r18
     b42:	c4 2e       	mov	r12, r20
     b44:	b6 2e       	mov	r11, r22
     b46:	d8 2e       	mov	r13, r24
     b48:	16 2f       	mov	r17, r22
     b4a:	a1 2f       	mov	r26, r17
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	ea 2d       	mov	r30, r10
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	eb 0d       	add	r30, r11
     b54:	f1 1d       	adc	r31, r1
     b56:	ae 17       	cp	r26, r30
     b58:	bf 07       	cpc	r27, r31
     b5a:	c4 f2       	brlt	.-80     	; 0xb0c <enu_DrawVerticalLine+0x3e>
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	cf 90       	pop	r12
     b6e:	bf 90       	pop	r11
     b70:	af 90       	pop	r10
     b72:	08 95       	ret

00000b74 <enu_DrawHorizontalLine>:
     b74:	af 92       	push	r10
     b76:	bf 92       	push	r11
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	80 33       	cpi	r24, 0x30	; 48
     b8a:	30 f4       	brcc	.+12     	; 0xb98 <enu_DrawHorizontalLine+0x24>
     b8c:	64 35       	cpi	r22, 0x54	; 84
     b8e:	30 f4       	brcc	.+12     	; 0xb9c <enu_DrawHorizontalLine+0x28>
     b90:	02 30       	cpi	r16, 0x02	; 2
     b92:	30 f0       	brcs	.+12     	; 0xba0 <enu_DrawHorizontalLine+0x2c>
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	05 c0       	rjmp	.+10     	; 0xba2 <enu_DrawHorizontalLine+0x2e>
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	03 c0       	rjmp	.+6      	; 0xba2 <enu_DrawHorizontalLine+0x2e>
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	01 c0       	rjmp	.+2      	; 0xba2 <enu_DrawHorizontalLine+0x2e>
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	91 11       	cpse	r25, r1
     ba4:	1c c0       	rjmp	.+56     	; 0xbde <enu_DrawHorizontalLine+0x6a>
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	29 c0       	rjmp	.+82     	; 0xbfc <enu_DrawHorizontalLine+0x88>
     baa:	ec 2c       	mov	r14, r12
     bac:	f1 2c       	mov	r15, r1
     bae:	ed 0c       	add	r14, r13
     bb0:	f1 1c       	adc	r15, r1
     bb2:	dd 2d       	mov	r29, r13
     bb4:	dc 0d       	add	r29, r12
     bb6:	cd 2d       	mov	r28, r13
     bb8:	0e c0       	rjmp	.+28     	; 0xbd6 <enu_DrawHorizontalLine+0x62>
     bba:	84 e5       	ldi	r24, 0x54	; 84
     bbc:	e8 16       	cp	r14, r24
     bbe:	f1 04       	cpc	r15, r1
     bc0:	24 f0       	brlt	.+8      	; 0xbca <enu_DrawHorizontalLine+0x56>
     bc2:	c4 35       	cpi	r28, 0x54	; 84
     bc4:	10 f0       	brcs	.+4      	; 0xbca <enu_DrawHorizontalLine+0x56>
     bc6:	d4 55       	subi	r29, 0x54	; 84
     bc8:	c0 e0       	ldi	r28, 0x00	; 0
     bca:	40 2f       	mov	r20, r16
     bcc:	6c 2f       	mov	r22, r28
     bce:	81 2f       	mov	r24, r17
     bd0:	0e 94 6f 04 	call	0x8de	; 0x8de <enu_DrawPixel>
     bd4:	cf 5f       	subi	r28, 0xFF	; 255
     bd6:	dc 17       	cp	r29, r28
     bd8:	80 f7       	brcc	.-32     	; 0xbba <enu_DrawHorizontalLine+0x46>
     bda:	1f 5f       	subi	r17, 0xFF	; 255
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <enu_DrawHorizontalLine+0x74>
     bde:	a2 2e       	mov	r10, r18
     be0:	c4 2e       	mov	r12, r20
     be2:	d6 2e       	mov	r13, r22
     be4:	b8 2e       	mov	r11, r24
     be6:	18 2f       	mov	r17, r24
     be8:	a1 2f       	mov	r26, r17
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ea 2d       	mov	r30, r10
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	eb 0d       	add	r30, r11
     bf2:	f1 1d       	adc	r31, r1
     bf4:	ae 17       	cp	r26, r30
     bf6:	bf 07       	cpc	r27, r31
     bf8:	c4 f2       	brlt	.-80     	; 0xbaa <enu_DrawHorizontalLine+0x36>
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	df 90       	pop	r13
     c0a:	cf 90       	pop	r12
     c0c:	bf 90       	pop	r11
     c0e:	af 90       	pop	r10
     c10:	08 95       	ret

00000c12 <NOKIA5110_enu_Initialization>:
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	1f 92       	push	r1
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	41 e0       	ldi	r20, 0x01	; 1
     c22:	65 e0       	ldi	r22, 0x05	; 5
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_enu_SetPinDiretion>
     c2a:	41 e0       	ldi	r20, 0x01	; 1
     c2c:	67 e0       	ldi	r22, 0x07	; 7
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_enu_SetPinDiretion>
     c34:	41 e0       	ldi	r20, 0x01	; 1
     c36:	64 e0       	ldi	r22, 0x04	; 4
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enu_SetPinValue>
     c3e:	41 e0       	ldi	r20, 0x01	; 1
     c40:	64 e0       	ldi	r22, 0x04	; 4
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_enu_SetPinDiretion>
     c48:	41 e0       	ldi	r20, 0x01	; 1
     c4a:	62 e0       	ldi	r22, 0x02	; 2
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enu_SetPinValue>
     c52:	41 e0       	ldi	r20, 0x01	; 1
     c54:	62 e0       	ldi	r22, 0x02	; 2
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_enu_SetPinDiretion>
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	63 e0       	ldi	r22, 0x03	; 3
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_enu_SetPinDiretion>
     c66:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <SPI_enu_Initialization>
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	64 e0       	ldi	r22, 0x04	; 4
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enu_SetPinValue>
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	62 e0       	ldi	r22, 0x02	; 2
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO_enu_SetPinState>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <NOKIA5110_enu_Initialization+0x6e>
     c80:	00 c0       	rjmp	.+0      	; 0xc82 <NOKIA5110_enu_Initialization+0x70>
     c82:	41 e0       	ldi	r20, 0x01	; 1
     c84:	62 e0       	ldi	r22, 0x02	; 2
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	0e 94 66 08 	call	0x10cc	; 0x10cc <DIO_enu_SetPinState>
     c8c:	be 01       	movw	r22, r28
     c8e:	6f 5f       	subi	r22, 0xFF	; 255
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	0e 94 a4 03 	call	0x748	; 0x748 <enu_GenerateFrame>
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	0e 94 24 04 	call	0x848	; 0x848 <enu_PassByteToSPI>
     c9e:	be 01       	movw	r22, r28
     ca0:	6f 5f       	subi	r22, 0xFF	; 255
     ca2:	7f 4f       	sbci	r23, 0xFF	; 255
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	0e 94 a4 03 	call	0x748	; 0x748 <enu_GenerateFrame>
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	0e 94 24 04 	call	0x848	; 0x848 <enu_PassByteToSPI>
     cb0:	00 e6       	ldi	r16, 0x60	; 96
     cb2:	10 e0       	ldi	r17, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	f8 01       	movw	r30, r16
     cb8:	82 83       	std	Z+2, r24	; 0x02
     cba:	be 01       	movw	r22, r28
     cbc:	6f 5f       	subi	r22, 0xFF	; 255
     cbe:	7f 4f       	sbci	r23, 0xFF	; 255
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	0e 94 a4 03 	call	0x748	; 0x748 <enu_GenerateFrame>
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	0e 94 24 04 	call	0x848	; 0x848 <enu_PassByteToSPI>
     ccc:	be 01       	movw	r22, r28
     cce:	6f 5f       	subi	r22, 0xFF	; 255
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	84 e0       	ldi	r24, 0x04	; 4
     cd4:	0e 94 a4 03 	call	0x748	; 0x748 <enu_GenerateFrame>
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	0e 94 24 04 	call	0x848	; 0x848 <enu_PassByteToSPI>
     cde:	be 01       	movw	r22, r28
     ce0:	6f 5f       	subi	r22, 0xFF	; 255
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	85 e0       	ldi	r24, 0x05	; 5
     ce6:	0e 94 a4 03 	call	0x748	; 0x748 <enu_GenerateFrame>
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	0e 94 24 04 	call	0x848	; 0x848 <enu_PassByteToSPI>
     cf0:	be 01       	movw	r22, r28
     cf2:	6f 5f       	subi	r22, 0xFF	; 255
     cf4:	7f 4f       	sbci	r23, 0xFF	; 255
     cf6:	86 e0       	ldi	r24, 0x06	; 6
     cf8:	0e 94 a4 03 	call	0x748	; 0x748 <enu_GenerateFrame>
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	0e 94 24 04 	call	0x848	; 0x848 <enu_PassByteToSPI>
     d02:	f8 01       	movw	r30, r16
     d04:	12 82       	std	Z+2, r1	; 0x02
     d06:	be 01       	movw	r22, r28
     d08:	6f 5f       	subi	r22, 0xFF	; 255
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	0e 94 a4 03 	call	0x748	; 0x748 <enu_GenerateFrame>
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	0e 94 24 04 	call	0x848	; 0x848 <enu_PassByteToSPI>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	0f 90       	pop	r0
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	08 95       	ret

00000d26 <NOKIA5110_enu_DrawCharacter>:
     d26:	0f 93       	push	r16
     d28:	21 e0       	ldi	r18, 0x01	; 1
     d2a:	0e 94 26 05 	call	0xa4c	; 0xa4c <enu_DrawASCII>
     d2e:	0f 91       	pop	r16
     d30:	08 95       	ret

00000d32 <NOKIA5110_enu_DrawFillRectangle>:
     d32:	0f 93       	push	r16
     d34:	0e 94 bf 04 	call	0x97e	; 0x97e <enu_DrawFillRectangle>
     d38:	0f 91       	pop	r16
     d3a:	08 95       	ret

00000d3c <NOKIA5110_enu_DrawNumber>:
     d3c:	4f 92       	push	r4
     d3e:	5f 92       	push	r5
     d40:	6f 92       	push	r6
     d42:	7f 92       	push	r7
     d44:	8f 92       	push	r8
     d46:	9f 92       	push	r9
     d48:	af 92       	push	r10
     d4a:	bf 92       	push	r11
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	2a 97       	sbiw	r28, 0x0a	; 10
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	2b 01       	movw	r4, r22
     d6e:	3c 01       	movw	r6, r24
     d70:	a4 2e       	mov	r10, r20
     d72:	b2 2e       	mov	r11, r18
     d74:	90 2e       	mov	r9, r16
     d76:	8f e2       	ldi	r24, 0x2F	; 47
     d78:	84 17       	cp	r24, r20
     d7a:	40 f0       	brcs	.+16     	; 0xd8c <NOKIA5110_enu_DrawNumber+0x50>
     d7c:	93 e5       	ldi	r25, 0x53	; 83
     d7e:	92 17       	cp	r25, r18
     d80:	38 f0       	brcs	.+14     	; 0xd90 <NOKIA5110_enu_DrawNumber+0x54>
     d82:	a1 e0       	ldi	r26, 0x01	; 1
     d84:	a0 17       	cp	r26, r16
     d86:	30 f4       	brcc	.+12     	; 0xd94 <NOKIA5110_enu_DrawNumber+0x58>
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <NOKIA5110_enu_DrawNumber+0x5a>
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <NOKIA5110_enu_DrawNumber+0x5a>
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <NOKIA5110_enu_DrawNumber+0x5a>
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	88 23       	and	r24, r24
     d98:	09 f4       	brne	.+2      	; 0xd9c <NOKIA5110_enu_DrawNumber+0x60>
     d9a:	dc c0       	rjmp	.+440    	; 0xf54 <NOKIA5110_enu_DrawNumber+0x218>
     d9c:	fe 01       	movw	r30, r28
     d9e:	31 96       	adiw	r30, 0x01	; 1
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	df 01       	movw	r26, r30
     da4:	1d 92       	st	X+, r1
     da6:	8a 95       	dec	r24
     da8:	e9 f7       	brne	.-6      	; 0xda4 <NOKIA5110_enu_DrawNumber+0x68>
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	a9 01       	movw	r20, r18
     db0:	c3 01       	movw	r24, r6
     db2:	b2 01       	movw	r22, r4
     db4:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__cmpsf2>
     db8:	88 23       	and	r24, r24
     dba:	3c f4       	brge	.+14     	; 0xdca <NOKIA5110_enu_DrawNumber+0x8e>
     dbc:	77 fa       	bst	r7, 7
     dbe:	70 94       	com	r7
     dc0:	77 f8       	bld	r7, 7
     dc2:	70 94       	com	r7
     dc4:	88 24       	eor	r8, r8
     dc6:	83 94       	inc	r8
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <NOKIA5110_enu_DrawNumber+0x90>
     dca:	81 2c       	mov	r8, r1
     dcc:	c3 01       	movw	r24, r6
     dce:	b2 01       	movw	r22, r4
     dd0:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
     dd4:	6b 01       	movw	r12, r22
     dd6:	7c 01       	movw	r14, r24
     dd8:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__floatunsisf>
     ddc:	9b 01       	movw	r18, r22
     dde:	ac 01       	movw	r20, r24
     de0:	c3 01       	movw	r24, r6
     de2:	b2 01       	movw	r22, r4
     de4:	0e 94 1f 0c 	call	0x183e	; 0x183e <__subsf3>
     de8:	2b 01       	movw	r4, r22
     dea:	3c 01       	movw	r6, r24
     dec:	10 e0       	ldi	r17, 0x00	; 0
     dee:	c7 01       	movw	r24, r14
     df0:	b6 01       	movw	r22, r12
     df2:	2a e0       	ldi	r18, 0x0A	; 10
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__udivmodsi4>
     dfe:	e1 e0       	ldi	r30, 0x01	; 1
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	ec 0f       	add	r30, r28
     e04:	fd 1f       	adc	r31, r29
     e06:	e1 0f       	add	r30, r17
     e08:	f1 1d       	adc	r31, r1
     e0a:	60 5d       	subi	r22, 0xD0	; 208
     e0c:	60 83       	st	Z, r22
     e0e:	c2 2e       	mov	r12, r18
     e10:	d3 2e       	mov	r13, r19
     e12:	e4 2e       	mov	r14, r20
     e14:	f5 2e       	mov	r15, r21
     e16:	1f 5f       	subi	r17, 0xFF	; 255
     e18:	c1 14       	cp	r12, r1
     e1a:	d1 04       	cpc	r13, r1
     e1c:	e1 04       	cpc	r14, r1
     e1e:	f1 04       	cpc	r15, r1
     e20:	31 f7       	brne	.-52     	; 0xdee <NOKIA5110_enu_DrawNumber+0xb2>
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	a9 01       	movw	r20, r18
     e28:	c3 01       	movw	r24, r6
     e2a:	b2 01       	movw	r22, r4
     e2c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__cmpsf2>
     e30:	81 11       	cpse	r24, r1
     e32:	3f c0       	rjmp	.+126    	; 0xeb2 <NOKIA5110_enu_DrawNumber+0x176>
     e34:	f1 2c       	mov	r15, r1
     e36:	4b c0       	rjmp	.+150    	; 0xece <NOKIA5110_enu_DrawNumber+0x192>
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e2       	ldi	r20, 0x20	; 32
     e3e:	51 e4       	ldi	r21, 0x41	; 65
     e40:	c3 01       	movw	r24, r6
     e42:	b2 01       	movw	r22, r4
     e44:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__mulsf3>
     e48:	2b 01       	movw	r4, r22
     e4a:	3c 01       	movw	r6, r24
     e4c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
     e50:	e1 e0       	ldi	r30, 0x01	; 1
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ec 0f       	add	r30, r28
     e56:	fd 1f       	adc	r31, r29
     e58:	ef 0d       	add	r30, r15
     e5a:	f1 1d       	adc	r31, r1
     e5c:	20 e3       	ldi	r18, 0x30	; 48
     e5e:	26 0f       	add	r18, r22
     e60:	20 83       	st	Z, r18
     e62:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__floatunsisf>
     e66:	9b 01       	movw	r18, r22
     e68:	ac 01       	movw	r20, r24
     e6a:	c3 01       	movw	r24, r6
     e6c:	b2 01       	movw	r22, r4
     e6e:	0e 94 1f 0c 	call	0x183e	; 0x183e <__subsf3>
     e72:	2b 01       	movw	r4, r22
     e74:	3c 01       	movw	r6, r24
     e76:	f3 94       	inc	r15
     e78:	0f 5f       	subi	r16, 0xFF	; 255
     e7a:	02 30       	cpi	r16, 0x02	; 2
     e7c:	e1 f4       	brne	.+56     	; 0xeb6 <NOKIA5110_enu_DrawNumber+0x17a>
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e2       	ldi	r20, 0x20	; 32
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__mulsf3>
     e8a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__fixunssfsi>
     e8e:	65 30       	cpi	r22, 0x05	; 5
     e90:	71 05       	cpc	r23, r1
     e92:	81 05       	cpc	r24, r1
     e94:	91 05       	cpc	r25, r1
     e96:	78 f0       	brcs	.+30     	; 0xeb6 <NOKIA5110_enu_DrawNumber+0x17a>
     e98:	ef 2d       	mov	r30, r15
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	31 97       	sbiw	r30, 0x01	; 1
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	8c 0f       	add	r24, r28
     ea4:	9d 1f       	adc	r25, r29
     ea6:	e8 0f       	add	r30, r24
     ea8:	f9 1f       	adc	r31, r25
     eaa:	80 81       	ld	r24, Z
     eac:	8f 5f       	subi	r24, 0xFF	; 255
     eae:	80 83       	st	Z, r24
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <NOKIA5110_enu_DrawNumber+0x17a>
     eb2:	f1 2e       	mov	r15, r17
     eb4:	00 e0       	ldi	r16, 0x00	; 0
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	a9 01       	movw	r20, r18
     ebc:	c3 01       	movw	r24, r6
     ebe:	b2 01       	movw	r22, r4
     ec0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__cmpsf2>
     ec4:	88 23       	and	r24, r24
     ec6:	19 f0       	breq	.+6      	; 0xece <NOKIA5110_enu_DrawNumber+0x192>
     ec8:	02 30       	cpi	r16, 0x02	; 2
     eca:	09 f0       	breq	.+2      	; 0xece <NOKIA5110_enu_DrawNumber+0x192>
     ecc:	b5 cf       	rjmp	.-150    	; 0xe38 <NOKIA5110_enu_DrawNumber+0xfc>
     ece:	88 20       	and	r8, r8
     ed0:	49 f0       	breq	.+18     	; 0xee4 <NOKIA5110_enu_DrawNumber+0x1a8>
     ed2:	01 e0       	ldi	r16, 0x01	; 1
     ed4:	29 2d       	mov	r18, r9
     ed6:	4b 2d       	mov	r20, r11
     ed8:	6a 2d       	mov	r22, r10
     eda:	8d e2       	ldi	r24, 0x2D	; 45
     edc:	0e 94 26 05 	call	0xa4c	; 0xa4c <enu_DrawASCII>
     ee0:	96 e0       	ldi	r25, 0x06	; 6
     ee2:	b9 0e       	add	r11, r25
     ee4:	e1 2e       	mov	r14, r17
     ee6:	13 c0       	rjmp	.+38     	; 0xf0e <NOKIA5110_enu_DrawNumber+0x1d2>
     ee8:	ee 2d       	mov	r30, r14
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	31 97       	sbiw	r30, 0x01	; 1
     eee:	a1 e0       	ldi	r26, 0x01	; 1
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ac 0f       	add	r26, r28
     ef4:	bd 1f       	adc	r27, r29
     ef6:	ea 0f       	add	r30, r26
     ef8:	fb 1f       	adc	r31, r27
     efa:	01 e0       	ldi	r16, 0x01	; 1
     efc:	29 2d       	mov	r18, r9
     efe:	4b 2d       	mov	r20, r11
     f00:	6a 2d       	mov	r22, r10
     f02:	80 81       	ld	r24, Z
     f04:	0e 94 26 05 	call	0xa4c	; 0xa4c <enu_DrawASCII>
     f08:	b6 e0       	ldi	r27, 0x06	; 6
     f0a:	bb 0e       	add	r11, r27
     f0c:	ea 94       	dec	r14
     f0e:	e1 10       	cpse	r14, r1
     f10:	eb cf       	rjmp	.-42     	; 0xee8 <NOKIA5110_enu_DrawNumber+0x1ac>
     f12:	4f ef       	ldi	r20, 0xFF	; 255
     f14:	4b 0d       	add	r20, r11
     f16:	ff 20       	and	r15, r15
     f18:	d9 f0       	breq	.+54     	; 0xf50 <NOKIA5110_enu_DrawNumber+0x214>
     f1a:	01 e0       	ldi	r16, 0x01	; 1
     f1c:	29 2d       	mov	r18, r9
     f1e:	6a 2d       	mov	r22, r10
     f20:	8e e2       	ldi	r24, 0x2E	; 46
     f22:	0e 94 26 05 	call	0xa4c	; 0xa4c <enu_DrawASCII>
     f26:	84 e0       	ldi	r24, 0x04	; 4
     f28:	b8 0e       	add	r11, r24
     f2a:	10 c0       	rjmp	.+32     	; 0xf4c <NOKIA5110_enu_DrawNumber+0x210>
     f2c:	e1 e0       	ldi	r30, 0x01	; 1
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	ec 0f       	add	r30, r28
     f32:	fd 1f       	adc	r31, r29
     f34:	e1 0f       	add	r30, r17
     f36:	f1 1d       	adc	r31, r1
     f38:	01 e0       	ldi	r16, 0x01	; 1
     f3a:	29 2d       	mov	r18, r9
     f3c:	4b 2d       	mov	r20, r11
     f3e:	6a 2d       	mov	r22, r10
     f40:	80 81       	ld	r24, Z
     f42:	0e 94 26 05 	call	0xa4c	; 0xa4c <enu_DrawASCII>
     f46:	96 e0       	ldi	r25, 0x06	; 6
     f48:	b9 0e       	add	r11, r25
     f4a:	1f 5f       	subi	r17, 0xFF	; 255
     f4c:	1f 15       	cp	r17, r15
     f4e:	70 f3       	brcs	.-36     	; 0xf2c <NOKIA5110_enu_DrawNumber+0x1f0>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <NOKIA5110_enu_DrawNumber+0x21a>
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	2a 96       	adiw	r28, 0x0a	; 10
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	bf 90       	pop	r11
     f74:	af 90       	pop	r10
     f76:	9f 90       	pop	r9
     f78:	8f 90       	pop	r8
     f7a:	7f 90       	pop	r7
     f7c:	6f 90       	pop	r6
     f7e:	5f 90       	pop	r5
     f80:	4f 90       	pop	r4
     f82:	08 95       	ret

00000f84 <NOKIA5110_enu_DrawVerticalLine>:
     f84:	0f 93       	push	r16
     f86:	0e 94 67 05 	call	0xace	; 0xace <enu_DrawVerticalLine>
     f8a:	0f 91       	pop	r16
     f8c:	08 95       	ret

00000f8e <NOKIA5110_enu_DrawHorizontalLine>:
     f8e:	0f 93       	push	r16
     f90:	0e 94 ba 05 	call	0xb74	; 0xb74 <enu_DrawHorizontalLine>
     f94:	0f 91       	pop	r16
     f96:	08 95       	ret

00000f98 <NOKIA5110_enu_DrawString>:
 * @param Copy_u8_Xstart x - coordinate of the starting point
 * @param Copy_u8_Colour Colour
 * @return ErrorState_t 
 */
extern ErrorState_t NOKIA5110_enu_DrawString(const u8* Copy_pu8_StringArray, u8 Copy_u8_Ystart, u8 Copy_u8_Xstart, u8 Copy_u8_Colour)
{
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	ec 01       	movw	r28, r24
     fa6:	e6 2e       	mov	r14, r22
     fa8:	14 2f       	mov	r17, r20
     faa:	f2 2e       	mov	r15, r18
    u8 Local_u8_ErrorFlag = ES_NOK, Local_u8_y = 0, Local_u8_x = 0;
    u8* Local_pu8_PrintingString = Copy_pu8_StringArray;

    if(Copy_pu8_StringArray)
     fac:	89 2b       	or	r24, r25
     fae:	51 f4       	brne	.+20     	; 0xfc4 <NOKIA5110_enu_DrawString+0x2c>
        
        Local_u8_ErrorFlag = ES_OK;
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	0b c0       	rjmp	.+22     	; 0xfca <NOKIA5110_enu_DrawString+0x32>
    {
        Local_u8_y = Copy_u8_Ystart;
        Local_u8_x =Copy_u8_Xstart;
        while(*Local_pu8_PrintingString)
        {
            enu_DrawASCII(*Local_pu8_PrintingString, Local_u8_y, Local_u8_x, Copy_u8_Colour, NOKIA5110_DISABLE_OVERLAP);
     fb4:	01 e0       	ldi	r16, 0x01	; 1
     fb6:	2f 2d       	mov	r18, r15
     fb8:	41 2f       	mov	r20, r17
     fba:	6e 2d       	mov	r22, r14
     fbc:	0e 94 26 05 	call	0xa4c	; 0xa4c <enu_DrawASCII>

            Local_u8_x += 6;
     fc0:	1a 5f       	subi	r17, 0xFA	; 250

            Local_pu8_PrintingString++;
     fc2:	21 96       	adiw	r28, 0x01	; 1

    if(Copy_pu8_StringArray)
    {
        Local_u8_y = Copy_u8_Ystart;
        Local_u8_x =Copy_u8_Xstart;
        while(*Local_pu8_PrintingString)
     fc4:	88 81       	ld	r24, Y
     fc6:	81 11       	cpse	r24, r1
     fc8:	f5 cf       	rjmp	.-22     	; 0xfb4 <NOKIA5110_enu_DrawString+0x1c>
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	08 95       	ret

00000fd8 <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
     fd8:	84 30       	cpi	r24, 0x04	; 4
     fda:	08 f0       	brcs	.+2      	; 0xfde <DIO_enu_SetPinDiretion+0x6>
     fdc:	6f c0       	rjmp	.+222    	; 0x10bc <DIO_enu_SetPinDiretion+0xe4>
     fde:	68 30       	cpi	r22, 0x08	; 8
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <DIO_enu_SetPinDiretion+0xc>
     fe2:	6e c0       	rjmp	.+220    	; 0x10c0 <DIO_enu_SetPinDiretion+0xe8>
     fe4:	42 30       	cpi	r20, 0x02	; 2
     fe6:	08 f0       	brcs	.+2      	; 0xfea <DIO_enu_SetPinDiretion+0x12>
     fe8:	6d c0       	rjmp	.+218    	; 0x10c4 <DIO_enu_SetPinDiretion+0xec>
    {
        switch (Copy_u8_PinGroup)
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	f9 f0       	breq	.+62     	; 0x102c <DIO_enu_SetPinDiretion+0x54>
     fee:	30 f0       	brcs	.+12     	; 0xffc <DIO_enu_SetPinDiretion+0x24>
     ff0:	82 30       	cpi	r24, 0x02	; 2
     ff2:	a1 f1       	breq	.+104    	; 0x105c <DIO_enu_SetPinDiretion+0x84>
     ff4:	83 30       	cpi	r24, 0x03	; 3
     ff6:	09 f4       	brne	.+2      	; 0xffa <DIO_enu_SetPinDiretion+0x22>
     ff8:	49 c0       	rjmp	.+146    	; 0x108c <DIO_enu_SetPinDiretion+0xb4>
     ffa:	66 c0       	rjmp	.+204    	; 0x10c8 <DIO_enu_SetPinDiretion+0xf0>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
     ffc:	2a b3       	in	r18, 0x1a	; 26
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	06 2e       	mov	r0, r22
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_enu_SetPinDiretion+0x32>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_enu_SetPinDiretion+0x2e>
    100e:	80 95       	com	r24
    1010:	82 23       	and	r24, r18
    1012:	8a bb       	out	0x1a, r24	; 26
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    1014:	2a b3       	in	r18, 0x1a	; 26
    1016:	84 2f       	mov	r24, r20
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_enu_SetPinDiretion+0x48>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	6a 95       	dec	r22
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_enu_SetPinDiretion+0x44>
    1024:	82 2b       	or	r24, r18
    1026:	8a bb       	out	0x1a, r24	; 26

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1028:	80 e0       	ldi	r24, 0x00	; 0

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
            break;
    102a:	08 95       	ret

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
    102c:	87 b3       	in	r24, 0x17	; 23
    102e:	21 e0       	ldi	r18, 0x01	; 1
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	06 2e       	mov	r0, r22
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_enu_SetPinDiretion+0x62>
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_enu_SetPinDiretion+0x5e>
    103e:	20 95       	com	r18
    1040:	28 23       	and	r18, r24
    1042:	27 bb       	out	0x17, r18	; 23
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
    1044:	27 b3       	in	r18, 0x17	; 23
    1046:	84 2f       	mov	r24, r20
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_enu_SetPinDiretion+0x78>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	6a 95       	dec	r22
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_enu_SetPinDiretion+0x74>
    1054:	82 2b       	or	r24, r18
    1056:	87 bb       	out	0x17, r24	; 23

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1058:	80 e0       	ldi	r24, 0x00	; 0
            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
            break;
    105a:	08 95       	ret

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
    105c:	84 b3       	in	r24, 0x14	; 20
    105e:	21 e0       	ldi	r18, 0x01	; 1
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	06 2e       	mov	r0, r22
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_enu_SetPinDiretion+0x92>
    1066:	22 0f       	add	r18, r18
    1068:	33 1f       	adc	r19, r19
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_enu_SetPinDiretion+0x8e>
    106e:	20 95       	com	r18
    1070:	28 23       	and	r18, r24
    1072:	24 bb       	out	0x14, r18	; 20
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    1074:	24 b3       	in	r18, 0x14	; 20
    1076:	84 2f       	mov	r24, r20
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_enu_SetPinDiretion+0xa8>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	6a 95       	dec	r22
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_enu_SetPinDiretion+0xa4>
    1084:	82 2b       	or	r24, r18
    1086:	84 bb       	out	0x14, r24	; 20

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1088:	80 e0       	ldi	r24, 0x00	; 0
            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
            break;
    108a:	08 95       	ret

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
    108c:	81 b3       	in	r24, 0x11	; 17
    108e:	21 e0       	ldi	r18, 0x01	; 1
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	06 2e       	mov	r0, r22
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_enu_SetPinDiretion+0xc2>
    1096:	22 0f       	add	r18, r18
    1098:	33 1f       	adc	r19, r19
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_enu_SetPinDiretion+0xbe>
    109e:	20 95       	com	r18
    10a0:	28 23       	and	r18, r24
    10a2:	21 bb       	out	0x11, r18	; 17
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
    10a4:	21 b3       	in	r18, 0x11	; 17
    10a6:	84 2f       	mov	r24, r20
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_enu_SetPinDiretion+0xd8>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	6a 95       	dec	r22
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_enu_SetPinDiretion+0xd4>
    10b4:	82 2b       	or	r24, r18
    10b6:	81 bb       	out	0x11, r24	; 17

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    10b8:	80 e0       	ldi	r24, 0x00	; 0
            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
            break;
    10ba:	08 95       	ret
        Local_u8_ErrorFlag = ES_OK;

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	08 95       	ret
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	08 95       	ret
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	08 95       	ret

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
    10ca:	08 95       	ret

000010cc <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <DIO_enu_SetPinState+0x6>
    10d0:	6f c0       	rjmp	.+222    	; 0x11b0 <DIO_enu_SetPinState+0xe4>
    10d2:	68 30       	cpi	r22, 0x08	; 8
    10d4:	08 f0       	brcs	.+2      	; 0x10d8 <DIO_enu_SetPinState+0xc>
    10d6:	6e c0       	rjmp	.+220    	; 0x11b4 <DIO_enu_SetPinState+0xe8>
    10d8:	42 30       	cpi	r20, 0x02	; 2
    10da:	08 f0       	brcs	.+2      	; 0x10de <DIO_enu_SetPinState+0x12>
    10dc:	6d c0       	rjmp	.+218    	; 0x11b8 <DIO_enu_SetPinState+0xec>
    {
        switch (Copy_u8_PinGroup)
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	f9 f0       	breq	.+62     	; 0x1120 <DIO_enu_SetPinState+0x54>
    10e2:	30 f0       	brcs	.+12     	; 0x10f0 <DIO_enu_SetPinState+0x24>
    10e4:	82 30       	cpi	r24, 0x02	; 2
    10e6:	a1 f1       	breq	.+104    	; 0x1150 <DIO_enu_SetPinState+0x84>
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	09 f4       	brne	.+2      	; 0x10ee <DIO_enu_SetPinState+0x22>
    10ec:	49 c0       	rjmp	.+146    	; 0x1180 <DIO_enu_SetPinState+0xb4>
    10ee:	66 c0       	rjmp	.+204    	; 0x11bc <DIO_enu_SetPinState+0xf0>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
    10f0:	2b b3       	in	r18, 0x1b	; 27
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	06 2e       	mov	r0, r22
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_enu_SetPinState+0x32>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_enu_SetPinState+0x2e>
    1102:	80 95       	com	r24
    1104:	82 23       	and	r24, r18
    1106:	8b bb       	out	0x1b, r24	; 27
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1108:	2b b3       	in	r18, 0x1b	; 27
    110a:	84 2f       	mov	r24, r20
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_enu_SetPinState+0x48>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	6a 95       	dec	r22
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_enu_SetPinState+0x44>
    1118:	82 2b       	or	r24, r18
    111a:	8b bb       	out	0x1b, r24	; 27

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    111c:	80 e0       	ldi	r24, 0x00	; 0
        switch (Copy_u8_PinGroup)
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
    111e:	08 95       	ret

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
    1120:	88 b3       	in	r24, 0x18	; 24
    1122:	21 e0       	ldi	r18, 0x01	; 1
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	06 2e       	mov	r0, r22
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_enu_SetPinState+0x62>
    112a:	22 0f       	add	r18, r18
    112c:	33 1f       	adc	r19, r19
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_enu_SetPinState+0x5e>
    1132:	20 95       	com	r18
    1134:	28 23       	and	r18, r24
    1136:	28 bb       	out	0x18, r18	; 24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1138:	28 b3       	in	r18, 0x18	; 24
    113a:	84 2f       	mov	r24, r20
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_enu_SetPinState+0x78>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	6a 95       	dec	r22
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_enu_SetPinState+0x74>
    1148:	82 2b       	or	r24, r18
    114a:	88 bb       	out	0x18, r24	; 24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    114c:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
    114e:	08 95       	ret

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
    1150:	85 b3       	in	r24, 0x15	; 21
    1152:	21 e0       	ldi	r18, 0x01	; 1
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	06 2e       	mov	r0, r22
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_enu_SetPinState+0x92>
    115a:	22 0f       	add	r18, r18
    115c:	33 1f       	adc	r19, r19
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_enu_SetPinState+0x8e>
    1162:	20 95       	com	r18
    1164:	28 23       	and	r18, r24
    1166:	25 bb       	out	0x15, r18	; 21
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1168:	25 b3       	in	r18, 0x15	; 21
    116a:	84 2f       	mov	r24, r20
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_enu_SetPinState+0xa8>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	6a 95       	dec	r22
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_enu_SetPinState+0xa4>
    1178:	82 2b       	or	r24, r18
    117a:	85 bb       	out	0x15, r24	; 21

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    117c:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
    117e:	08 95       	ret

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
    1180:	82 b3       	in	r24, 0x12	; 18
    1182:	21 e0       	ldi	r18, 0x01	; 1
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	06 2e       	mov	r0, r22
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_enu_SetPinState+0xc2>
    118a:	22 0f       	add	r18, r18
    118c:	33 1f       	adc	r19, r19
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_enu_SetPinState+0xbe>
    1192:	20 95       	com	r18
    1194:	28 23       	and	r18, r24
    1196:	22 bb       	out	0x12, r18	; 18
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
    1198:	22 b3       	in	r18, 0x12	; 18
    119a:	84 2f       	mov	r24, r20
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_enu_SetPinState+0xd8>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	6a 95       	dec	r22
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_enu_SetPinState+0xd4>
    11a8:	82 2b       	or	r24, r18
    11aa:	82 bb       	out	0x12, r24	; 18

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    11ac:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
    11ae:	08 95       	ret

        Local_u8_ErrorFlag = ES_OK;
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	08 95       	ret
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	08 95       	ret
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	08 95       	ret

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
    11be:	08 95       	ret

000011c0 <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
    11c0:	84 30       	cpi	r24, 0x04	; 4
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <DIO_enu_SetPinValue+0x6>
    11c4:	7b c0       	rjmp	.+246    	; 0x12bc <DIO_enu_SetPinValue+0xfc>
    11c6:	68 30       	cpi	r22, 0x08	; 8
    11c8:	08 f0       	brcs	.+2      	; 0x11cc <DIO_enu_SetPinValue+0xc>
    11ca:	7a c0       	rjmp	.+244    	; 0x12c0 <DIO_enu_SetPinValue+0x100>
    11cc:	42 30       	cpi	r20, 0x02	; 2
    11ce:	08 f0       	brcs	.+2      	; 0x11d2 <DIO_enu_SetPinValue+0x12>
    11d0:	79 c0       	rjmp	.+242    	; 0x12c4 <DIO_enu_SetPinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	11 f1       	breq	.+68     	; 0x121a <DIO_enu_SetPinValue+0x5a>
    11d6:	30 f0       	brcs	.+12     	; 0x11e4 <DIO_enu_SetPinValue+0x24>
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	d1 f1       	breq	.+116    	; 0x1250 <DIO_enu_SetPinValue+0x90>
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	09 f4       	brne	.+2      	; 0x11e2 <DIO_enu_SetPinValue+0x22>
    11e0:	52 c0       	rjmp	.+164    	; 0x1286 <DIO_enu_SetPinValue+0xc6>
    11e2:	72 c0       	rjmp	.+228    	; 0x12c8 <DIO_enu_SetPinValue+0x108>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
    11e4:	41 30       	cpi	r20, 0x01	; 1
    11e6:	61 f4       	brne	.+24     	; 0x1200 <DIO_enu_SetPinValue+0x40>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
    11e8:	2b b3       	in	r18, 0x1b	; 27
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_enu_SetPinValue+0x34>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	6a 95       	dec	r22
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_enu_SetPinValue+0x30>
    11f8:	82 2b       	or	r24, r18
    11fa:	8b bb       	out	0x1b, r24	; 27
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	08 95       	ret
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
    1200:	2b b3       	in	r18, 0x1b	; 27
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_enu_SetPinValue+0x4c>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	6a 95       	dec	r22
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_enu_SetPinValue+0x48>
    1210:	80 95       	com	r24
    1212:	82 23       	and	r24, r18
    1214:	8b bb       	out	0x1b, r24	; 27
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	08 95       	ret
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
    121a:	41 30       	cpi	r20, 0x01	; 1
    121c:	61 f4       	brne	.+24     	; 0x1236 <DIO_enu_SetPinValue+0x76>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
    121e:	28 b3       	in	r18, 0x18	; 24
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_enu_SetPinValue+0x6a>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	6a 95       	dec	r22
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_enu_SetPinValue+0x66>
    122e:	82 2b       	or	r24, r18
    1230:	88 bb       	out	0x18, r24	; 24
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	08 95       	ret
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
    1236:	28 b3       	in	r18, 0x18	; 24
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_enu_SetPinValue+0x82>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	6a 95       	dec	r22
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_enu_SetPinValue+0x7e>
    1246:	80 95       	com	r24
    1248:	82 23       	and	r24, r18
    124a:	88 bb       	out	0x18, r24	; 24
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	08 95       	ret
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
    1250:	41 30       	cpi	r20, 0x01	; 1
    1252:	61 f4       	brne	.+24     	; 0x126c <DIO_enu_SetPinValue+0xac>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
    1254:	25 b3       	in	r18, 0x15	; 21
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_enu_SetPinValue+0xa0>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	6a 95       	dec	r22
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_enu_SetPinValue+0x9c>
    1264:	82 2b       	or	r24, r18
    1266:	85 bb       	out	0x15, r24	; 21
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	08 95       	ret
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
    126c:	25 b3       	in	r18, 0x15	; 21
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_enu_SetPinValue+0xb8>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	6a 95       	dec	r22
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_enu_SetPinValue+0xb4>
    127c:	80 95       	com	r24
    127e:	82 23       	and	r24, r18
    1280:	85 bb       	out	0x15, r24	; 21
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	08 95       	ret
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
    1286:	41 30       	cpi	r20, 0x01	; 1
    1288:	61 f4       	brne	.+24     	; 0x12a2 <DIO_enu_SetPinValue+0xe2>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
    128a:	22 b3       	in	r18, 0x12	; 18
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_enu_SetPinValue+0xd6>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	6a 95       	dec	r22
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_enu_SetPinValue+0xd2>
    129a:	82 2b       	or	r24, r18
    129c:	82 bb       	out	0x12, r24	; 18
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	08 95       	ret
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    12a2:	22 b3       	in	r18, 0x12	; 18
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_enu_SetPinValue+0xee>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	6a 95       	dec	r22
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_enu_SetPinValue+0xea>
    12b2:	80 95       	com	r24
    12b4:	82 23       	and	r24, r18
    12b6:	82 bb       	out	0x12, r24	; 18
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	08 95       	ret


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	08 95       	ret
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	08 95       	ret
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	08 95       	ret
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
    12ca:	08 95       	ret

000012cc <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
    12cc:	1f 92       	push	r1
    12ce:	0f 92       	push	r0
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	0f 92       	push	r0
    12d4:	11 24       	eor	r1, r1
    12d6:	2f 93       	push	r18
    12d8:	3f 93       	push	r19
    12da:	4f 93       	push	r20
    12dc:	5f 93       	push	r21
    12de:	6f 93       	push	r22
    12e0:	7f 93       	push	r23
    12e2:	8f 93       	push	r24
    12e4:	9f 93       	push	r25
    12e6:	af 93       	push	r26
    12e8:	bf 93       	push	r27
    12ea:	ef 93       	push	r30
    12ec:	ff 93       	push	r31
    if(pfun_ISRPointers[EXTI_INT0])
    12ee:	e0 91 c7 07 	lds	r30, 0x07C7	; 0x8007c7 <pfun_ISRPointers>
    12f2:	f0 91 c8 07 	lds	r31, 0x07C8	; 0x8007c8 <pfun_ISRPointers+0x1>
    12f6:	30 97       	sbiw	r30, 0x00	; 0
    12f8:	29 f0       	breq	.+10     	; 0x1304 <__vector_1+0x38>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
    12fa:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <apvid_ISRParameters>
    12fe:	90 91 c2 07 	lds	r25, 0x07C2	; 0x8007c2 <apvid_ISRParameters+0x1>
    1302:	09 95       	icall
    }
}
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	7f 91       	pop	r23
    1312:	6f 91       	pop	r22
    1314:	5f 91       	pop	r21
    1316:	4f 91       	pop	r20
    1318:	3f 91       	pop	r19
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <__vector_2>:
//INT1
void __vector_2 (void)
{
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
    1330:	2f 93       	push	r18
    1332:	3f 93       	push	r19
    1334:	4f 93       	push	r20
    1336:	5f 93       	push	r21
    1338:	6f 93       	push	r22
    133a:	7f 93       	push	r23
    133c:	8f 93       	push	r24
    133e:	9f 93       	push	r25
    1340:	af 93       	push	r26
    1342:	bf 93       	push	r27
    1344:	ef 93       	push	r30
    1346:	ff 93       	push	r31
    if(pfun_ISRPointers[EXTI_INT1])
    1348:	e0 91 c9 07 	lds	r30, 0x07C9	; 0x8007c9 <pfun_ISRPointers+0x2>
    134c:	f0 91 ca 07 	lds	r31, 0x07CA	; 0x8007ca <pfun_ISRPointers+0x3>
    1350:	30 97       	sbiw	r30, 0x00	; 0
    1352:	29 f0       	breq	.+10     	; 0x135e <__vector_2+0x38>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
    1354:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <apvid_ISRParameters+0x2>
    1358:	90 91 c4 07 	lds	r25, 0x07C4	; 0x8007c4 <apvid_ISRParameters+0x3>
    135c:	09 95       	icall
    }
}
    135e:	ff 91       	pop	r31
    1360:	ef 91       	pop	r30
    1362:	bf 91       	pop	r27
    1364:	af 91       	pop	r26
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	3f 91       	pop	r19
    1374:	2f 91       	pop	r18
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	1f 90       	pop	r1
    137e:	18 95       	reti

00001380 <__vector_3>:
//INT2
void __vector_3 (void)
{
    1380:	1f 92       	push	r1
    1382:	0f 92       	push	r0
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	0f 92       	push	r0
    1388:	11 24       	eor	r1, r1
    138a:	2f 93       	push	r18
    138c:	3f 93       	push	r19
    138e:	4f 93       	push	r20
    1390:	5f 93       	push	r21
    1392:	6f 93       	push	r22
    1394:	7f 93       	push	r23
    1396:	8f 93       	push	r24
    1398:	9f 93       	push	r25
    139a:	af 93       	push	r26
    139c:	bf 93       	push	r27
    139e:	ef 93       	push	r30
    13a0:	ff 93       	push	r31
    if(pfun_ISRPointers[EXTI_INT2])
    13a2:	e0 91 cb 07 	lds	r30, 0x07CB	; 0x8007cb <pfun_ISRPointers+0x4>
    13a6:	f0 91 cc 07 	lds	r31, 0x07CC	; 0x8007cc <pfun_ISRPointers+0x5>
    13aa:	30 97       	sbiw	r30, 0x00	; 0
    13ac:	19 f0       	breq	.+6      	; 0x13b4 <__vector_3+0x34>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	09 95       	icall
    }
    
}
    13b4:	ff 91       	pop	r31
    13b6:	ef 91       	pop	r30
    13b8:	bf 91       	pop	r27
    13ba:	af 91       	pop	r26
    13bc:	9f 91       	pop	r25
    13be:	8f 91       	pop	r24
    13c0:	7f 91       	pop	r23
    13c2:	6f 91       	pop	r22
    13c4:	5f 91       	pop	r21
    13c6:	4f 91       	pop	r20
    13c8:	3f 91       	pop	r19
    13ca:	2f 91       	pop	r18
    13cc:	0f 90       	pop	r0
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	0f 90       	pop	r0
    13d2:	1f 90       	pop	r1
    13d4:	18 95       	reti

000013d6 <SPI_enu_Initialization>:
            break;
        }
    }

    return Local_u8_ErrorFlag;
}
    13d6:	8d b1       	in	r24, 0x0d	; 13
    13d8:	80 61       	ori	r24, 0x10	; 16
    13da:	8d b9       	out	0x0d, r24	; 13
    13dc:	8d b1       	in	r24, 0x0d	; 13
    13de:	8c 7f       	andi	r24, 0xFC	; 252
    13e0:	8d b9       	out	0x0d, r24	; 13
    13e2:	8d b1       	in	r24, 0x0d	; 13
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	8d b9       	out	0x0d, r24	; 13
    13e8:	8e b1       	in	r24, 0x0e	; 14
    13ea:	8e 7f       	andi	r24, 0xFE	; 254
    13ec:	8e b9       	out	0x0e, r24	; 14
    13ee:	8d b1       	in	r24, 0x0d	; 13
    13f0:	8f 77       	andi	r24, 0x7F	; 127
    13f2:	8d b9       	out	0x0d, r24	; 13
    13f4:	8d b1       	in	r24, 0x0d	; 13
    13f6:	87 7f       	andi	r24, 0xF7	; 247
    13f8:	8d b9       	out	0x0d, r24	; 13
    13fa:	8d b1       	in	r24, 0x0d	; 13
    13fc:	8b 7f       	andi	r24, 0xFB	; 251
    13fe:	8d b9       	out	0x0d, r24	; 13
    1400:	8d b1       	in	r24, 0x0d	; 13
    1402:	8f 7d       	andi	r24, 0xDF	; 223
    1404:	8d b9       	out	0x0d, r24	; 13
    1406:	8d b1       	in	r24, 0x0d	; 13
    1408:	80 64       	ori	r24, 0x40	; 64
    140a:	8d b9       	out	0x0d, r24	; 13
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	08 95       	ret

00001410 <SPI_enu_MasterSend>:
    1410:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <LOC_u8_SPIState>
    1414:	91 30       	cpi	r25, 0x01	; 1
    1416:	71 f0       	breq	.+28     	; 0x1434 <SPI_enu_MasterSend+0x24>
    1418:	91 11       	cpse	r25, r1
    141a:	0e c0       	rjmp	.+28     	; 0x1438 <SPI_enu_MasterSend+0x28>
    141c:	8f b9       	out	0x0f, r24	; 15
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <LOC_u8_SPIState>
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <SPI_enu_MasterSend+0x18>
    1426:	8f b1       	in	r24, 0x0f	; 15
    1428:	77 9b       	sbis	0x0e, 7	; 14
    142a:	fd cf       	rjmp	.-6      	; 0x1426 <SPI_enu_MasterSend+0x16>
    142c:	10 92 cd 07 	sts	0x07CD, r1	; 0x8007cd <LOC_u8_SPIState>
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	08 95       	ret
    1434:	84 e0       	ldi	r24, 0x04	; 4
    1436:	08 95       	ret
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	08 95       	ret

0000143c <SPI_enu_GetCommState>:
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	31 f0       	breq	.+12     	; 0x144c <SPI_enu_GetCommState+0x10>
    1440:	20 91 cd 07 	lds	r18, 0x07CD	; 0x8007cd <LOC_u8_SPIState>
    1444:	fc 01       	movw	r30, r24
    1446:	20 83       	st	Z, r18
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	08 95       	ret
    144c:	83 e0       	ldi	r24, 0x03	; 3
    144e:	08 95       	ret

00001450 <__vector_12>:

// ISR
void __vector_12 (void)__attribute__((signal));

void __vector_12 (void)
{
    1450:	1f 92       	push	r1
    1452:	0f 92       	push	r0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    #if SPI_ISR_STATUS == SPI_INTERNAL_ISR        
    
        #if SPI_MCU_MODE == SPI_MASTER_MODE
    
            if ((SPCR >> SPCR_MSTR) & 1) // Making sure the SPIF was rasied due to an SPI operation ending
    145a:	6c 99       	sbic	0x0d, 4	; 13
            {
                LOC_u8_SPIState = SPI_FREE;
    145c:	10 92 cd 07 	sts	0x07CD, r1	; 0x8007cd <LOC_u8_SPIState>
    #else
    
        #error SPI_EXTERNAL_ISR is invald
    
    #endif
}
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
    asm("SEI");
    146a:	78 94       	sei
    146c:	08 95       	ret

0000146e <Timer1_enu_Initialization>:
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    }

    return Local_u8_ErrorFlag;
}
    146e:	8f b5       	in	r24, 0x2f	; 47
    1470:	8c 7f       	andi	r24, 0xFC	; 252
    1472:	8f bd       	out	0x2f, r24	; 47
    1474:	8e b5       	in	r24, 0x2e	; 46
    1476:	87 7e       	andi	r24, 0xE7	; 231
    1478:	8e bd       	out	0x2e, r24	; 46
    147a:	89 b7       	in	r24, 0x39	; 57
    147c:	8b 7f       	andi	r24, 0xFB	; 251
    147e:	89 bf       	out	0x39, r24	; 57
    1480:	8e b5       	in	r24, 0x2e	; 46
    1482:	8f 7b       	andi	r24, 0xBF	; 191
    1484:	8e bd       	out	0x2e, r24	; 46
    1486:	89 b7       	in	r24, 0x39	; 57
    1488:	8f 7d       	andi	r24, 0xDF	; 223
    148a:	89 bf       	out	0x39, r24	; 57
    148c:	8e b5       	in	r24, 0x2e	; 46
    148e:	80 68       	ori	r24, 0x80	; 128
    1490:	8e bd       	out	0x2e, r24	; 46
    1492:	8e b5       	in	r24, 0x2e	; 46
    1494:	88 7f       	andi	r24, 0xF8	; 248
    1496:	8e bd       	out	0x2e, r24	; 46
    1498:	8e b5       	in	r24, 0x2e	; 46
    149a:	81 60       	ori	r24, 0x01	; 1
    149c:	8e bd       	out	0x2e, r24	; 46
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	08 95       	ret

000014a2 <Timer1_enu_GetICR1>:
    14a2:	fc 01       	movw	r30, r24
    14a4:	89 2b       	or	r24, r25
    14a6:	81 f0       	breq	.+32     	; 0x14c8 <Timer1_enu_GetICR1+0x26>
    14a8:	26 b5       	in	r18, 0x26	; 38
    14aa:	42 2f       	mov	r20, r18
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	51 83       	std	Z+1, r21	; 0x01
    14b0:	40 83       	st	Z, r20
    14b2:	97 b5       	in	r25, 0x27	; 39
    14b4:	29 2f       	mov	r18, r25
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	32 2f       	mov	r19, r18
    14ba:	22 27       	eor	r18, r18
    14bc:	24 2b       	or	r18, r20
    14be:	35 2b       	or	r19, r21
    14c0:	31 83       	std	Z+1, r19	; 0x01
    14c2:	20 83       	st	Z, r18
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	08 95       	ret
    14c8:	83 e0       	ldi	r24, 0x03	; 3
    14ca:	08 95       	ret

000014cc <Timer1_enu_SetTCNT1>:
    14cc:	9d bd       	out	0x2d, r25	; 45
    14ce:	8c bd       	out	0x2c, r24	; 44
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	08 95       	ret

000014d4 <Timer1_enu_SetCallBackFunction>:

extern ErrorState_t Timer1_enu_SetCallBackFunction(u8 Copy_u8_InterruptType, void (*Copy_pfun_AppFunction)(void*), void* Copy_pvid_Prameters)
{
    u8 Local_u8_ErrorFLag = Local_u8_ErrorFLag;

    if(Copy_pfun_AppFunction)
    14d4:	61 15       	cp	r22, r1
    14d6:	71 05       	cpc	r23, r1
    14d8:	69 f0       	breq	.+26     	; 0x14f4 <Timer1_enu_SetCallBackFunction+0x20>
    {
        LOC_apfun_IntServiceRoutinesFunctions[Copy_u8_InterruptType] = Copy_pfun_AppFunction;
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	fc 01       	movw	r30, r24
    14e2:	ea 52       	subi	r30, 0x2A	; 42
    14e4:	f8 4f       	sbci	r31, 0xF8	; 248
    14e6:	71 83       	std	Z+1, r23	; 0x01
    14e8:	60 83       	st	Z, r22

        LOC_apvid_IntServiceRoutinesParameters[Copy_u8_InterruptType] = Copy_pvid_Prameters;
    14ea:	fc 01       	movw	r30, r24
    14ec:	e2 53       	subi	r30, 0x32	; 50
    14ee:	f8 4f       	sbci	r31, 0xF8	; 248
    14f0:	51 83       	std	Z+1, r21	; 0x01
    14f2:	40 83       	st	Z, r20
    {
        Local_u8_ErrorFLag = ES_NULL_POINTER;
    }

    return Local_u8_ErrorFLag;
}
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	08 95       	ret

000014f8 <Timer1_enu_DisableInterrupt>:

extern ErrorState_t Timer1_enu_DisableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    switch (Copy_u8_InterruptType)
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	59 f0       	breq	.+22     	; 0x1512 <Timer1_enu_DisableInterrupt+0x1a>
    14fc:	28 f0       	brcs	.+10     	; 0x1508 <Timer1_enu_DisableInterrupt+0x10>
    14fe:	82 30       	cpi	r24, 0x02	; 2
    1500:	69 f0       	breq	.+26     	; 0x151c <Timer1_enu_DisableInterrupt+0x24>
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	81 f0       	breq	.+32     	; 0x1526 <Timer1_enu_DisableInterrupt+0x2e>
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <Timer1_enu_DisableInterrupt+0x38>
    {
        case TIMER1_CAPTURE_EVENT_ISR:
        {
            TIMSK &= ~(1<< TIMSK_TICIE1);
    1508:	89 b7       	in	r24, 0x39	; 57
    150a:	8f 7d       	andi	r24, 0xDF	; 223
    150c:	89 bf       	out	0x39, r24	; 57
    return Local_u8_ErrorFLag;
}

extern ErrorState_t Timer1_enu_DisableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    {
        case TIMER1_CAPTURE_EVENT_ISR:
        {
            TIMSK &= ~(1<< TIMSK_TICIE1);

            break;
    1510:	08 95       	ret
        } 
        case TIMER1_CTC_A_ISR:
        {
            TIMSK &= ~(1<< TIMSK_OCIE1A);
    1512:	89 b7       	in	r24, 0x39	; 57
    1514:	8f 7e       	andi	r24, 0xEF	; 239
    1516:	89 bf       	out	0x39, r24	; 57
    return Local_u8_ErrorFLag;
}

extern ErrorState_t Timer1_enu_DisableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    1518:	81 e0       	ldi	r24, 0x01	; 1
        } 
        case TIMER1_CTC_A_ISR:
        {
            TIMSK &= ~(1<< TIMSK_OCIE1A);

            break;
    151a:	08 95       	ret
        } 
        case TIMER1_CTC_B_ISR:
        {
            TIMSK &= ~(1<< TIMSK_OCIE1A);
    151c:	89 b7       	in	r24, 0x39	; 57
    151e:	8f 7e       	andi	r24, 0xEF	; 239
    1520:	89 bf       	out	0x39, r24	; 57
    return Local_u8_ErrorFLag;
}

extern ErrorState_t Timer1_enu_DisableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    1522:	81 e0       	ldi	r24, 0x01	; 1
        } 
        case TIMER1_CTC_B_ISR:
        {
            TIMSK &= ~(1<< TIMSK_OCIE1A);

            break;
    1524:	08 95       	ret
        } 

        case TIMER1_OVERFLOW_ISR:
        {
            TIMSK &= ~(1<< TIMSK_TOIE1);
    1526:	89 b7       	in	r24, 0x39	; 57
    1528:	8b 7f       	andi	r24, 0xFB	; 251
    152a:	89 bf       	out	0x39, r24	; 57
    return Local_u8_ErrorFLag;
}

extern ErrorState_t Timer1_enu_DisableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    152c:	81 e0       	ldi	r24, 0x01	; 1

        case TIMER1_OVERFLOW_ISR:
        {
            TIMSK &= ~(1<< TIMSK_TOIE1);
            
            break;
    152e:	08 95       	ret
        } 
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1530:	82 e0       	ldi	r24, 0x02	; 2
            break;
        }
    }
    return Local_u8_ErrorFlag;
}
    1532:	08 95       	ret

00001534 <Timer1_enu_EnableInterrupt>:

extern ErrorState_t Timer1_enu_EnableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    switch (Copy_u8_InterruptType)
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	59 f0       	breq	.+22     	; 0x154e <Timer1_enu_EnableInterrupt+0x1a>
    1538:	28 f0       	brcs	.+10     	; 0x1544 <Timer1_enu_EnableInterrupt+0x10>
    153a:	82 30       	cpi	r24, 0x02	; 2
    153c:	69 f0       	breq	.+26     	; 0x1558 <Timer1_enu_EnableInterrupt+0x24>
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	81 f0       	breq	.+32     	; 0x1562 <Timer1_enu_EnableInterrupt+0x2e>
    1542:	14 c0       	rjmp	.+40     	; 0x156c <Timer1_enu_EnableInterrupt+0x38>
    {
        case TIMER1_CAPTURE_EVENT_ISR:
        {
            TIMSK |= (1<< TIMSK_TICIE1);
    1544:	89 b7       	in	r24, 0x39	; 57
    1546:	80 62       	ori	r24, 0x20	; 32
    1548:	89 bf       	out	0x39, r24	; 57

            Local_u8_ErrorFlag = ES_OK;
    154a:	80 e0       	ldi	r24, 0x00	; 0

            break;
    154c:	08 95       	ret
        } 
        case TIMER1_CTC_A_ISR:
        {
            TIMSK |= (1<< TIMSK_OCIE1A);
    154e:	89 b7       	in	r24, 0x39	; 57
    1550:	80 61       	ori	r24, 0x10	; 16
    1552:	89 bf       	out	0x39, r24	; 57
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_EnableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    1554:	81 e0       	ldi	r24, 0x01	; 1
        } 
        case TIMER1_CTC_A_ISR:
        {
            TIMSK |= (1<< TIMSK_OCIE1A);

            break;
    1556:	08 95       	ret
        } 
        case TIMER1_CTC_B_ISR:
        {
            TIMSK |= (1<< TIMSK_OCIE1A);
    1558:	89 b7       	in	r24, 0x39	; 57
    155a:	80 61       	ori	r24, 0x10	; 16
    155c:	89 bf       	out	0x39, r24	; 57

            Local_u8_ErrorFlag = ES_OK;
    155e:	80 e0       	ldi	r24, 0x00	; 0
            break;
    1560:	08 95       	ret
        } 

        case TIMER1_OVERFLOW_ISR:
        {
            TIMSK |= (1<< TIMSK_TOIE1);
    1562:	89 b7       	in	r24, 0x39	; 57
    1564:	84 60       	ori	r24, 0x04	; 4
    1566:	89 bf       	out	0x39, r24	; 57
            
            Local_u8_ErrorFlag = ES_OK;
    1568:	80 e0       	ldi	r24, 0x00	; 0
            break;
    156a:	08 95       	ret
        } 
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    156c:	82 e0       	ldi	r24, 0x02	; 2
            break;
        }
    }

    return Local_u8_ErrorFlag;
}
    156e:	08 95       	ret

00001570 <Timer1_enu_GetPS>:

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    1570:	fc 01       	movw	r30, r24
    u8 Local_u8_ErrorFlag = ES_NOK;


    
        u8 Local_u8_CS_Bits = TCCR1B & 0x07; //Acquiring the least significant 3 bits CS2:0\
    1572:	9e b5       	in	r25, 0x2e	; 46
    1574:	97 70       	andi	r25, 0x07	; 7

        switch (Local_u8_CS_Bits)
    1576:	92 30       	cpi	r25, 0x02	; 2
    1578:	a9 f0       	breq	.+42     	; 0x15a4 <Timer1_enu_GetPS+0x34>
    157a:	28 f4       	brcc	.+10     	; 0x1586 <Timer1_enu_GetPS+0x16>
    157c:	99 23       	and	r25, r25
    157e:	49 f0       	breq	.+18     	; 0x1592 <Timer1_enu_GetPS+0x22>
    1580:	91 30       	cpi	r25, 0x01	; 1
    1582:	59 f0       	breq	.+22     	; 0x159a <Timer1_enu_GetPS+0x2a>
    1584:	27 c0       	rjmp	.+78     	; 0x15d4 <Timer1_enu_GetPS+0x64>
    1586:	94 30       	cpi	r25, 0x04	; 4
    1588:	c9 f0       	breq	.+50     	; 0x15bc <Timer1_enu_GetPS+0x4c>
    158a:	90 f0       	brcs	.+36     	; 0x15b0 <Timer1_enu_GetPS+0x40>
    158c:	95 30       	cpi	r25, 0x05	; 5
    158e:	e1 f0       	breq	.+56     	; 0x15c8 <Timer1_enu_GetPS+0x58>
    1590:	21 c0       	rjmp	.+66     	; 0x15d4 <Timer1_enu_GetPS+0x64>
        {
            
            case 0:
            {
                *Copy_pu16_PS = 0;
    1592:	11 82       	std	Z+1, r1	; 0x01
    1594:	10 82       	st	Z, r1
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    1596:	81 e0       	ldi	r24, 0x01	; 1
            
            case 0:
            {
                *Copy_pu16_PS = 0;
                    
                    break;
    1598:	08 95       	ret
            }

            case 1:
            {
                *Copy_pu16_PS = 1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	91 83       	std	Z+1, r25	; 0x01
    15a0:	80 83       	st	Z, r24

                break;
    15a2:	08 95       	ret
            }

            case 2:
            {
                *Copy_pu16_PS = 8;
    15a4:	88 e0       	ldi	r24, 0x08	; 8
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	80 83       	st	Z, r24
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    15ac:	81 e0       	ldi	r24, 0x01	; 1

            case 2:
            {
                *Copy_pu16_PS = 8;
                    
                break;
    15ae:	08 95       	ret
            }

            case 3:
            {
                *Copy_pu16_PS = 64;
    15b0:	80 e4       	ldi	r24, 0x40	; 64
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	91 83       	std	Z+1, r25	; 0x01
    15b6:	80 83       	st	Z, r24
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    15b8:	81 e0       	ldi	r24, 0x01	; 1

            case 3:
            {
                *Copy_pu16_PS = 64;
                    
                break;
    15ba:	08 95       	ret
            }

            case 4:
            {
                *Copy_pu16_PS = 256;
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	91 83       	std	Z+1, r25	; 0x01
    15c2:	80 83       	st	Z, r24
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    15c4:	81 e0       	ldi	r24, 0x01	; 1

            case 4:
            {
                *Copy_pu16_PS = 256;
                    
                break;
    15c6:	08 95       	ret
            }

            case 5:
            {
                *Copy_pu16_PS = 1024;
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	94 e0       	ldi	r25, 0x04	; 4
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	80 83       	st	Z, r24
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    15d0:	81 e0       	ldi	r24, 0x01	; 1

            case 5:
            {
                *Copy_pu16_PS = 1024;
                    
                break;
    15d2:	08 95       	ret
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    15d4:	82 e0       	ldi	r24, 0x02	; 2
              
        }


    return Local_u8_ErrorFlag;
}
    15d6:	08 95       	ret

000015d8 <Timer1_enu_SetInputCaptureEdge>:

extern ErrorState_t Timer1_enu_SetInputCaptureEdge(u8 Copy_u8_EdgeType)
{
    u8 Local_u8_Error_Flag = ES_NOK;
    
    if(Copy_u8_EdgeType == TIMER1_ICU_FALLING_EDGE )
    15d8:	81 11       	cpse	r24, r1
    15da:	05 c0       	rjmp	.+10     	; 0x15e6 <Timer1_enu_SetInputCaptureEdge+0xe>
    {
        TCCR1B &= ~(1 << TCCR1B_ICES1);
    15dc:	8e b5       	in	r24, 0x2e	; 46
    15de:	8f 7b       	andi	r24, 0xBF	; 191
    15e0:	8e bd       	out	0x2e, r24	; 46
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_SetInputCaptureEdge(u8 Copy_u8_EdgeType)
{
    u8 Local_u8_Error_Flag = ES_NOK;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	08 95       	ret
    
    if(Copy_u8_EdgeType == TIMER1_ICU_FALLING_EDGE )
    {
        TCCR1B &= ~(1 << TCCR1B_ICES1);
    }
    else if( Copy_u8_EdgeType == TIMER1_ICU_RISING_EDGE)
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	29 f4       	brne	.+10     	; 0x15f4 <Timer1_enu_SetInputCaptureEdge+0x1c>
    {
        TCCR1B |= (1 << TCCR1B_ICES1);
    15ea:	8e b5       	in	r24, 0x2e	; 46
    15ec:	80 64       	ori	r24, 0x40	; 64
    15ee:	8e bd       	out	0x2e, r24	; 46
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_SetInputCaptureEdge(u8 Copy_u8_EdgeType)
{
    u8 Local_u8_Error_Flag = ES_NOK;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	08 95       	ret
    {
        TCCR1B |= (1 << TCCR1B_ICES1);
    }
    else
    {
        Local_u8_Error_Flag = ES_OUT_OF_RANGE;
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    }
    return Local_u8_Error_Flag;
}
    15f6:	08 95       	ret

000015f8 <Timer1_enu_ClearFlag>:

extern ErrorState_t Timer1_enu_ClearFlag(u8 Copy_u8_InterruptType)
{
    u8 Lcoal_u8_ErrorFlag = ES_NOK;

    switch (Copy_u8_InterruptType)
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	59 f0       	breq	.+22     	; 0x1612 <Timer1_enu_ClearFlag+0x1a>
    15fc:	28 f0       	brcs	.+10     	; 0x1608 <Timer1_enu_ClearFlag+0x10>
    15fe:	82 30       	cpi	r24, 0x02	; 2
    1600:	69 f0       	breq	.+26     	; 0x161c <Timer1_enu_ClearFlag+0x24>
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	81 f0       	breq	.+32     	; 0x1626 <Timer1_enu_ClearFlag+0x2e>
    1606:	14 c0       	rjmp	.+40     	; 0x1630 <Timer1_enu_ClearFlag+0x38>
    {
        case TIMER1_CAPTURE_EVENT_ISR:
        {
            //Clearing Input Capture Flag
            TIFR |= (1 << TIFR_ICF1);
    1608:	88 b7       	in	r24, 0x38	; 56
    160a:	80 62       	ori	r24, 0x20	; 32
    160c:	88 bf       	out	0x38, r24	; 56

            Lcoal_u8_ErrorFlag = ES_OK;
    160e:	80 e0       	ldi	r24, 0x00	; 0
            break;
    1610:	08 95       	ret
        }

        case TIMER1_CTC_A_ISR:
        {
            //Clearing Output Compare Flag A
            TIFR |= (1 << TIFR_OCF1A);
    1612:	88 b7       	in	r24, 0x38	; 56
    1614:	80 61       	ori	r24, 0x10	; 16
    1616:	88 bf       	out	0x38, r24	; 56

            Lcoal_u8_ErrorFlag = ES_OK;
    1618:	80 e0       	ldi	r24, 0x00	; 0
            break;
    161a:	08 95       	ret
        }

        case TIMER1_CTC_B_ISR:
        {
            //Clearing Output Compare Flag B
            TIFR |= (1 << TIFR_OCF1B);
    161c:	88 b7       	in	r24, 0x38	; 56
    161e:	88 60       	ori	r24, 0x08	; 8
    1620:	88 bf       	out	0x38, r24	; 56

            Lcoal_u8_ErrorFlag = ES_OK;
    1622:	80 e0       	ldi	r24, 0x00	; 0
            break;
    1624:	08 95       	ret
        }

        case TIMER1_OVERFLOW_ISR:
        {
            //Clearing Overflow Flag 
            TIFR |= (1 << TIFR_TOV1);
    1626:	88 b7       	in	r24, 0x38	; 56
    1628:	84 60       	ori	r24, 0x04	; 4
    162a:	88 bf       	out	0x38, r24	; 56

            Lcoal_u8_ErrorFlag = ES_OK;
    162c:	80 e0       	ldi	r24, 0x00	; 0
            break;
    162e:	08 95       	ret
        }

        default:
        {
            Lcoal_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1630:	82 e0       	ldi	r24, 0x02	; 2
            break;
        }
    }
    return Lcoal_u8_ErrorFlag;
}
    1632:	08 95       	ret

00001634 <__vector_6>:
void __vector_7 (void)__attribute__((signal));
void __vector_8 (void)__attribute__((signal));
void __vector_9 (void)__attribute__((signal));

void __vector_6 (void)
{
    1634:	1f 92       	push	r1
    1636:	0f 92       	push	r0
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	0f 92       	push	r0
    163c:	11 24       	eor	r1, r1
    163e:	2f 93       	push	r18
    1640:	3f 93       	push	r19
    1642:	4f 93       	push	r20
    1644:	5f 93       	push	r21
    1646:	6f 93       	push	r22
    1648:	7f 93       	push	r23
    164a:	8f 93       	push	r24
    164c:	9f 93       	push	r25
    164e:	af 93       	push	r26
    1650:	bf 93       	push	r27
    1652:	ef 93       	push	r30
    1654:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CAPTURE_EVENT_ISR])
    1656:	e0 91 d6 07 	lds	r30, 0x07D6	; 0x8007d6 <LOC_apfun_IntServiceRoutinesFunctions>
    165a:	f0 91 d7 07 	lds	r31, 0x07D7	; 0x8007d7 <LOC_apfun_IntServiceRoutinesFunctions+0x1>
    165e:	30 97       	sbiw	r30, 0x00	; 0
    1660:	29 f0       	breq	.+10     	; 0x166c <__vector_6+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CAPTURE_EVENT_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CAPTURE_EVENT_ISR]);
    1662:	80 91 ce 07 	lds	r24, 0x07CE	; 0x8007ce <LOC_apvid_IntServiceRoutinesParameters>
    1666:	90 91 cf 07 	lds	r25, 0x07CF	; 0x8007cf <LOC_apvid_IntServiceRoutinesParameters+0x1>
    166a:	09 95       	icall
    }
}
    166c:	ff 91       	pop	r31
    166e:	ef 91       	pop	r30
    1670:	bf 91       	pop	r27
    1672:	af 91       	pop	r26
    1674:	9f 91       	pop	r25
    1676:	8f 91       	pop	r24
    1678:	7f 91       	pop	r23
    167a:	6f 91       	pop	r22
    167c:	5f 91       	pop	r21
    167e:	4f 91       	pop	r20
    1680:	3f 91       	pop	r19
    1682:	2f 91       	pop	r18
    1684:	0f 90       	pop	r0
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	0f 90       	pop	r0
    168a:	1f 90       	pop	r1
    168c:	18 95       	reti

0000168e <__vector_7>:

void __vector_7 (void)
{
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	0f 92       	push	r0
    1696:	11 24       	eor	r1, r1
    1698:	2f 93       	push	r18
    169a:	3f 93       	push	r19
    169c:	4f 93       	push	r20
    169e:	5f 93       	push	r21
    16a0:	6f 93       	push	r22
    16a2:	7f 93       	push	r23
    16a4:	8f 93       	push	r24
    16a6:	9f 93       	push	r25
    16a8:	af 93       	push	r26
    16aa:	bf 93       	push	r27
    16ac:	ef 93       	push	r30
    16ae:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_A_ISR])
    16b0:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <LOC_apfun_IntServiceRoutinesFunctions+0x2>
    16b4:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <LOC_apfun_IntServiceRoutinesFunctions+0x3>
    16b8:	30 97       	sbiw	r30, 0x00	; 0
    16ba:	29 f0       	breq	.+10     	; 0x16c6 <__vector_7+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_A_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CTC_A_ISR]);
    16bc:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <LOC_apvid_IntServiceRoutinesParameters+0x2>
    16c0:	90 91 d1 07 	lds	r25, 0x07D1	; 0x8007d1 <LOC_apvid_IntServiceRoutinesParameters+0x3>
    16c4:	09 95       	icall
    }
}
    16c6:	ff 91       	pop	r31
    16c8:	ef 91       	pop	r30
    16ca:	bf 91       	pop	r27
    16cc:	af 91       	pop	r26
    16ce:	9f 91       	pop	r25
    16d0:	8f 91       	pop	r24
    16d2:	7f 91       	pop	r23
    16d4:	6f 91       	pop	r22
    16d6:	5f 91       	pop	r21
    16d8:	4f 91       	pop	r20
    16da:	3f 91       	pop	r19
    16dc:	2f 91       	pop	r18
    16de:	0f 90       	pop	r0
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	0f 90       	pop	r0
    16e4:	1f 90       	pop	r1
    16e6:	18 95       	reti

000016e8 <__vector_8>:

void __vector_8 (void)
{
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	ef 93       	push	r30
    1708:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_B_ISR])
    170a:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <LOC_apfun_IntServiceRoutinesFunctions+0x4>
    170e:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <LOC_apfun_IntServiceRoutinesFunctions+0x5>
    1712:	30 97       	sbiw	r30, 0x00	; 0
    1714:	29 f0       	breq	.+10     	; 0x1720 <__vector_8+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_B_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CTC_B_ISR]);
    1716:	80 91 d2 07 	lds	r24, 0x07D2	; 0x8007d2 <LOC_apvid_IntServiceRoutinesParameters+0x4>
    171a:	90 91 d3 07 	lds	r25, 0x07D3	; 0x8007d3 <LOC_apvid_IntServiceRoutinesParameters+0x5>
    171e:	09 95       	icall
    }
}
    1720:	ff 91       	pop	r31
    1722:	ef 91       	pop	r30
    1724:	bf 91       	pop	r27
    1726:	af 91       	pop	r26
    1728:	9f 91       	pop	r25
    172a:	8f 91       	pop	r24
    172c:	7f 91       	pop	r23
    172e:	6f 91       	pop	r22
    1730:	5f 91       	pop	r21
    1732:	4f 91       	pop	r20
    1734:	3f 91       	pop	r19
    1736:	2f 91       	pop	r18
    1738:	0f 90       	pop	r0
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	0f 90       	pop	r0
    173e:	1f 90       	pop	r1
    1740:	18 95       	reti

00001742 <__vector_9>:

void __vector_9 (void)
{
    1742:	1f 92       	push	r1
    1744:	0f 92       	push	r0
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	0f 92       	push	r0
    174a:	11 24       	eor	r1, r1
    174c:	2f 93       	push	r18
    174e:	3f 93       	push	r19
    1750:	4f 93       	push	r20
    1752:	5f 93       	push	r21
    1754:	6f 93       	push	r22
    1756:	7f 93       	push	r23
    1758:	8f 93       	push	r24
    175a:	9f 93       	push	r25
    175c:	af 93       	push	r26
    175e:	bf 93       	push	r27
    1760:	ef 93       	push	r30
    1762:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_OVERFLOW_ISR])
    1764:	e0 91 dc 07 	lds	r30, 0x07DC	; 0x8007dc <LOC_apfun_IntServiceRoutinesFunctions+0x6>
    1768:	f0 91 dd 07 	lds	r31, 0x07DD	; 0x8007dd <LOC_apfun_IntServiceRoutinesFunctions+0x7>
    176c:	30 97       	sbiw	r30, 0x00	; 0
    176e:	29 f0       	breq	.+10     	; 0x177a <__vector_9+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_OVERFLOW_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_OVERFLOW_ISR]);
    1770:	80 91 d4 07 	lds	r24, 0x07D4	; 0x8007d4 <LOC_apvid_IntServiceRoutinesParameters+0x6>
    1774:	90 91 d5 07 	lds	r25, 0x07D5	; 0x8007d5 <LOC_apvid_IntServiceRoutinesParameters+0x7>
    1778:	09 95       	icall
    }
}
    177a:	ff 91       	pop	r31
    177c:	ef 91       	pop	r30
    177e:	bf 91       	pop	r27
    1780:	af 91       	pop	r26
    1782:	9f 91       	pop	r25
    1784:	8f 91       	pop	r24
    1786:	7f 91       	pop	r23
    1788:	6f 91       	pop	r22
    178a:	5f 91       	pop	r21
    178c:	4f 91       	pop	r20
    178e:	3f 91       	pop	r19
    1790:	2f 91       	pop	r18
    1792:	0f 90       	pop	r0
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	0f 90       	pop	r0
    1798:	1f 90       	pop	r1
    179a:	18 95       	reti

0000179c <__vector_4>:
void __vector_11 (void)__attribute__((signal));


void __vector_4 (void)
{
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    179c:	e0 91 ee 07 	lds	r30, 0x07EE	; 0x8007ee <apfun_ISRpointers>
    17a0:	f0 91 ef 07 	lds	r31, 0x07EF	; 0x8007ef <apfun_ISRpointers+0x1>
    17a4:	30 97       	sbiw	r30, 0x00	; 0
    17a6:	29 f0       	breq	.+10     	; 0x17b2 <__vector_4+0x16>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    17a8:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <apvid_ISRParameters>
    17ac:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <apvid_ISRParameters+0x1>
    17b0:	09 95       	icall
    17b2:	08 95       	ret

000017b4 <__vector_5>:
    }
}

void __vector_5 (void)
{
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    17b4:	e0 91 ee 07 	lds	r30, 0x07EE	; 0x8007ee <apfun_ISRpointers>
    17b8:	f0 91 ef 07 	lds	r31, 0x07EF	; 0x8007ef <apfun_ISRpointers+0x1>
    17bc:	30 97       	sbiw	r30, 0x00	; 0
    17be:	29 f0       	breq	.+10     	; 0x17ca <__vector_5+0x16>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    17c0:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <apvid_ISRParameters>
    17c4:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <apvid_ISRParameters+0x1>
    17c8:	09 95       	icall
    17ca:	08 95       	ret

000017cc <__vector_10>:
    }
}

void __vector_10 (void)
{
    if(apfun_ISRpointers[TIMER_0_CTC_ISR])
    17cc:	e0 91 fa 07 	lds	r30, 0x07FA	; 0x8007fa <apfun_ISRpointers+0xc>
    17d0:	f0 91 fb 07 	lds	r31, 0x07FB	; 0x8007fb <apfun_ISRpointers+0xd>
    17d4:	30 97       	sbiw	r30, 0x00	; 0
    17d6:	29 f0       	breq	.+10     	; 0x17e2 <__vector_10+0x16>
    {
       apfun_ISRpointers[TIMER_0_CTC_ISR](apvid_ISRParameters[TIMER_0_CTC_ISR]);
    17d8:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <apvid_ISRParameters+0xc>
    17dc:	90 91 eb 07 	lds	r25, 0x07EB	; 0x8007eb <apvid_ISRParameters+0xd>
    17e0:	09 95       	icall
    17e2:	08 95       	ret

000017e4 <__vector_11>:
    }
}

void __vector_11 (void)
{
    17e4:	1f 92       	push	r1
    17e6:	0f 92       	push	r0
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	0f 92       	push	r0
    17ec:	11 24       	eor	r1, r1
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	5f 93       	push	r21
    17f6:	6f 93       	push	r22
    17f8:	7f 93       	push	r23
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	af 93       	push	r26
    1800:	bf 93       	push	r27
    1802:	ef 93       	push	r30
    1804:	ff 93       	push	r31
    if(apfun_ISRpointers[TIMER_0_OVERFLOW_ISR])
    1806:	e0 91 fc 07 	lds	r30, 0x07FC	; 0x8007fc <apfun_ISRpointers+0xe>
    180a:	f0 91 fd 07 	lds	r31, 0x07FD	; 0x8007fd <apfun_ISRpointers+0xf>
    180e:	30 97       	sbiw	r30, 0x00	; 0
    1810:	29 f0       	breq	.+10     	; 0x181c <__vector_11+0x38>
    {
        apfun_ISRpointers[TIMER_0_OVERFLOW_ISR](apvid_ISRParameters[TIMER_0_OVERFLOW_ISR]);
    1812:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <apvid_ISRParameters+0xe>
    1816:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <apvid_ISRParameters+0xf>
    181a:	09 95       	icall
    }
}
    181c:	ff 91       	pop	r31
    181e:	ef 91       	pop	r30
    1820:	bf 91       	pop	r27
    1822:	af 91       	pop	r26
    1824:	9f 91       	pop	r25
    1826:	8f 91       	pop	r24
    1828:	7f 91       	pop	r23
    182a:	6f 91       	pop	r22
    182c:	5f 91       	pop	r21
    182e:	4f 91       	pop	r20
    1830:	3f 91       	pop	r19
    1832:	2f 91       	pop	r18
    1834:	0f 90       	pop	r0
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	0f 90       	pop	r0
    183a:	1f 90       	pop	r1
    183c:	18 95       	reti

0000183e <__subsf3>:
    183e:	50 58       	subi	r21, 0x80	; 128

00001840 <__addsf3>:
    1840:	bb 27       	eor	r27, r27
    1842:	aa 27       	eor	r26, r26
    1844:	0e 94 37 0c 	call	0x186e	; 0x186e <__addsf3x>
    1848:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__fp_round>
    184c:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__fp_pscA>
    1850:	38 f0       	brcs	.+14     	; 0x1860 <__addsf3+0x20>
    1852:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__fp_pscB>
    1856:	20 f0       	brcs	.+8      	; 0x1860 <__addsf3+0x20>
    1858:	39 f4       	brne	.+14     	; 0x1868 <__addsf3+0x28>
    185a:	9f 3f       	cpi	r25, 0xFF	; 255
    185c:	19 f4       	brne	.+6      	; 0x1864 <__addsf3+0x24>
    185e:	26 f4       	brtc	.+8      	; 0x1868 <__addsf3+0x28>
    1860:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__fp_nan>
    1864:	0e f4       	brtc	.+2      	; 0x1868 <__addsf3+0x28>
    1866:	e0 95       	com	r30
    1868:	e7 fb       	bst	r30, 7
    186a:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_inf>

0000186e <__addsf3x>:
    186e:	e9 2f       	mov	r30, r25
    1870:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__fp_split3>
    1874:	58 f3       	brcs	.-42     	; 0x184c <__addsf3+0xc>
    1876:	ba 17       	cp	r27, r26
    1878:	62 07       	cpc	r22, r18
    187a:	73 07       	cpc	r23, r19
    187c:	84 07       	cpc	r24, r20
    187e:	95 07       	cpc	r25, r21
    1880:	20 f0       	brcs	.+8      	; 0x188a <__addsf3x+0x1c>
    1882:	79 f4       	brne	.+30     	; 0x18a2 <__addsf3x+0x34>
    1884:	a6 f5       	brtc	.+104    	; 0x18ee <__addsf3x+0x80>
    1886:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__fp_zero>
    188a:	0e f4       	brtc	.+2      	; 0x188e <__addsf3x+0x20>
    188c:	e0 95       	com	r30
    188e:	0b 2e       	mov	r0, r27
    1890:	ba 2f       	mov	r27, r26
    1892:	a0 2d       	mov	r26, r0
    1894:	0b 01       	movw	r0, r22
    1896:	b9 01       	movw	r22, r18
    1898:	90 01       	movw	r18, r0
    189a:	0c 01       	movw	r0, r24
    189c:	ca 01       	movw	r24, r20
    189e:	a0 01       	movw	r20, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	ff 27       	eor	r31, r31
    18a4:	59 1b       	sub	r21, r25
    18a6:	99 f0       	breq	.+38     	; 0x18ce <__addsf3x+0x60>
    18a8:	59 3f       	cpi	r21, 0xF9	; 249
    18aa:	50 f4       	brcc	.+20     	; 0x18c0 <__addsf3x+0x52>
    18ac:	50 3e       	cpi	r21, 0xE0	; 224
    18ae:	68 f1       	brcs	.+90     	; 0x190a <__addsf3x+0x9c>
    18b0:	1a 16       	cp	r1, r26
    18b2:	f0 40       	sbci	r31, 0x00	; 0
    18b4:	a2 2f       	mov	r26, r18
    18b6:	23 2f       	mov	r18, r19
    18b8:	34 2f       	mov	r19, r20
    18ba:	44 27       	eor	r20, r20
    18bc:	58 5f       	subi	r21, 0xF8	; 248
    18be:	f3 cf       	rjmp	.-26     	; 0x18a6 <__addsf3x+0x38>
    18c0:	46 95       	lsr	r20
    18c2:	37 95       	ror	r19
    18c4:	27 95       	ror	r18
    18c6:	a7 95       	ror	r26
    18c8:	f0 40       	sbci	r31, 0x00	; 0
    18ca:	53 95       	inc	r21
    18cc:	c9 f7       	brne	.-14     	; 0x18c0 <__addsf3x+0x52>
    18ce:	7e f4       	brtc	.+30     	; 0x18ee <__addsf3x+0x80>
    18d0:	1f 16       	cp	r1, r31
    18d2:	ba 0b       	sbc	r27, r26
    18d4:	62 0b       	sbc	r22, r18
    18d6:	73 0b       	sbc	r23, r19
    18d8:	84 0b       	sbc	r24, r20
    18da:	ba f0       	brmi	.+46     	; 0x190a <__addsf3x+0x9c>
    18dc:	91 50       	subi	r25, 0x01	; 1
    18de:	a1 f0       	breq	.+40     	; 0x1908 <__addsf3x+0x9a>
    18e0:	ff 0f       	add	r31, r31
    18e2:	bb 1f       	adc	r27, r27
    18e4:	66 1f       	adc	r22, r22
    18e6:	77 1f       	adc	r23, r23
    18e8:	88 1f       	adc	r24, r24
    18ea:	c2 f7       	brpl	.-16     	; 0x18dc <__addsf3x+0x6e>
    18ec:	0e c0       	rjmp	.+28     	; 0x190a <__addsf3x+0x9c>
    18ee:	ba 0f       	add	r27, r26
    18f0:	62 1f       	adc	r22, r18
    18f2:	73 1f       	adc	r23, r19
    18f4:	84 1f       	adc	r24, r20
    18f6:	48 f4       	brcc	.+18     	; 0x190a <__addsf3x+0x9c>
    18f8:	87 95       	ror	r24
    18fa:	77 95       	ror	r23
    18fc:	67 95       	ror	r22
    18fe:	b7 95       	ror	r27
    1900:	f7 95       	ror	r31
    1902:	9e 3f       	cpi	r25, 0xFE	; 254
    1904:	08 f0       	brcs	.+2      	; 0x1908 <__addsf3x+0x9a>
    1906:	b0 cf       	rjmp	.-160    	; 0x1868 <__addsf3+0x28>
    1908:	93 95       	inc	r25
    190a:	88 0f       	add	r24, r24
    190c:	08 f0       	brcs	.+2      	; 0x1910 <__addsf3x+0xa2>
    190e:	99 27       	eor	r25, r25
    1910:	ee 0f       	add	r30, r30
    1912:	97 95       	ror	r25
    1914:	87 95       	ror	r24
    1916:	08 95       	ret

00001918 <__cmpsf2>:
    1918:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__fp_cmp>
    191c:	08 f4       	brcc	.+2      	; 0x1920 <__cmpsf2+0x8>
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	08 95       	ret

00001922 <__divsf3>:
    1922:	0e 94 a5 0c 	call	0x194a	; 0x194a <__divsf3x>
    1926:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__fp_round>
    192a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__fp_pscB>
    192e:	58 f0       	brcs	.+22     	; 0x1946 <__divsf3+0x24>
    1930:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__fp_pscA>
    1934:	40 f0       	brcs	.+16     	; 0x1946 <__divsf3+0x24>
    1936:	29 f4       	brne	.+10     	; 0x1942 <__divsf3+0x20>
    1938:	5f 3f       	cpi	r21, 0xFF	; 255
    193a:	29 f0       	breq	.+10     	; 0x1946 <__divsf3+0x24>
    193c:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_inf>
    1940:	51 11       	cpse	r21, r1
    1942:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_szero>
    1946:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__fp_nan>

0000194a <__divsf3x>:
    194a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__fp_split3>
    194e:	68 f3       	brcs	.-38     	; 0x192a <__divsf3+0x8>

00001950 <__divsf3_pse>:
    1950:	99 23       	and	r25, r25
    1952:	b1 f3       	breq	.-20     	; 0x1940 <__divsf3+0x1e>
    1954:	55 23       	and	r21, r21
    1956:	91 f3       	breq	.-28     	; 0x193c <__divsf3+0x1a>
    1958:	95 1b       	sub	r25, r21
    195a:	55 0b       	sbc	r21, r21
    195c:	bb 27       	eor	r27, r27
    195e:	aa 27       	eor	r26, r26
    1960:	62 17       	cp	r22, r18
    1962:	73 07       	cpc	r23, r19
    1964:	84 07       	cpc	r24, r20
    1966:	38 f0       	brcs	.+14     	; 0x1976 <__divsf3_pse+0x26>
    1968:	9f 5f       	subi	r25, 0xFF	; 255
    196a:	5f 4f       	sbci	r21, 0xFF	; 255
    196c:	22 0f       	add	r18, r18
    196e:	33 1f       	adc	r19, r19
    1970:	44 1f       	adc	r20, r20
    1972:	aa 1f       	adc	r26, r26
    1974:	a9 f3       	breq	.-22     	; 0x1960 <__divsf3_pse+0x10>
    1976:	35 d0       	rcall	.+106    	; 0x19e2 <__divsf3_pse+0x92>
    1978:	0e 2e       	mov	r0, r30
    197a:	3a f0       	brmi	.+14     	; 0x198a <__divsf3_pse+0x3a>
    197c:	e0 e8       	ldi	r30, 0x80	; 128
    197e:	32 d0       	rcall	.+100    	; 0x19e4 <__divsf3_pse+0x94>
    1980:	91 50       	subi	r25, 0x01	; 1
    1982:	50 40       	sbci	r21, 0x00	; 0
    1984:	e6 95       	lsr	r30
    1986:	00 1c       	adc	r0, r0
    1988:	ca f7       	brpl	.-14     	; 0x197c <__divsf3_pse+0x2c>
    198a:	2b d0       	rcall	.+86     	; 0x19e2 <__divsf3_pse+0x92>
    198c:	fe 2f       	mov	r31, r30
    198e:	29 d0       	rcall	.+82     	; 0x19e2 <__divsf3_pse+0x92>
    1990:	66 0f       	add	r22, r22
    1992:	77 1f       	adc	r23, r23
    1994:	88 1f       	adc	r24, r24
    1996:	bb 1f       	adc	r27, r27
    1998:	26 17       	cp	r18, r22
    199a:	37 07       	cpc	r19, r23
    199c:	48 07       	cpc	r20, r24
    199e:	ab 07       	cpc	r26, r27
    19a0:	b0 e8       	ldi	r27, 0x80	; 128
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <__divsf3_pse+0x56>
    19a4:	bb 0b       	sbc	r27, r27
    19a6:	80 2d       	mov	r24, r0
    19a8:	bf 01       	movw	r22, r30
    19aa:	ff 27       	eor	r31, r31
    19ac:	93 58       	subi	r25, 0x83	; 131
    19ae:	5f 4f       	sbci	r21, 0xFF	; 255
    19b0:	3a f0       	brmi	.+14     	; 0x19c0 <__divsf3_pse+0x70>
    19b2:	9e 3f       	cpi	r25, 0xFE	; 254
    19b4:	51 05       	cpc	r21, r1
    19b6:	78 f0       	brcs	.+30     	; 0x19d6 <__divsf3_pse+0x86>
    19b8:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_inf>
    19bc:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_szero>
    19c0:	5f 3f       	cpi	r21, 0xFF	; 255
    19c2:	e4 f3       	brlt	.-8      	; 0x19bc <__divsf3_pse+0x6c>
    19c4:	98 3e       	cpi	r25, 0xE8	; 232
    19c6:	d4 f3       	brlt	.-12     	; 0x19bc <__divsf3_pse+0x6c>
    19c8:	86 95       	lsr	r24
    19ca:	77 95       	ror	r23
    19cc:	67 95       	ror	r22
    19ce:	b7 95       	ror	r27
    19d0:	f7 95       	ror	r31
    19d2:	9f 5f       	subi	r25, 0xFF	; 255
    19d4:	c9 f7       	brne	.-14     	; 0x19c8 <__divsf3_pse+0x78>
    19d6:	88 0f       	add	r24, r24
    19d8:	91 1d       	adc	r25, r1
    19da:	96 95       	lsr	r25
    19dc:	87 95       	ror	r24
    19de:	97 f9       	bld	r25, 7
    19e0:	08 95       	ret
    19e2:	e1 e0       	ldi	r30, 0x01	; 1
    19e4:	66 0f       	add	r22, r22
    19e6:	77 1f       	adc	r23, r23
    19e8:	88 1f       	adc	r24, r24
    19ea:	bb 1f       	adc	r27, r27
    19ec:	62 17       	cp	r22, r18
    19ee:	73 07       	cpc	r23, r19
    19f0:	84 07       	cpc	r24, r20
    19f2:	ba 07       	cpc	r27, r26
    19f4:	20 f0       	brcs	.+8      	; 0x19fe <__divsf3_pse+0xae>
    19f6:	62 1b       	sub	r22, r18
    19f8:	73 0b       	sbc	r23, r19
    19fa:	84 0b       	sbc	r24, r20
    19fc:	ba 0b       	sbc	r27, r26
    19fe:	ee 1f       	adc	r30, r30
    1a00:	88 f7       	brcc	.-30     	; 0x19e4 <__divsf3_pse+0x94>
    1a02:	e0 95       	com	r30
    1a04:	08 95       	ret

00001a06 <__fixunssfsi>:
    1a06:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__fp_splitA>
    1a0a:	88 f0       	brcs	.+34     	; 0x1a2e <__fixunssfsi+0x28>
    1a0c:	9f 57       	subi	r25, 0x7F	; 127
    1a0e:	98 f0       	brcs	.+38     	; 0x1a36 <__fixunssfsi+0x30>
    1a10:	b9 2f       	mov	r27, r25
    1a12:	99 27       	eor	r25, r25
    1a14:	b7 51       	subi	r27, 0x17	; 23
    1a16:	b0 f0       	brcs	.+44     	; 0x1a44 <__fixunssfsi+0x3e>
    1a18:	e1 f0       	breq	.+56     	; 0x1a52 <__fixunssfsi+0x4c>
    1a1a:	66 0f       	add	r22, r22
    1a1c:	77 1f       	adc	r23, r23
    1a1e:	88 1f       	adc	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	1a f0       	brmi	.+6      	; 0x1a2a <__fixunssfsi+0x24>
    1a24:	ba 95       	dec	r27
    1a26:	c9 f7       	brne	.-14     	; 0x1a1a <__fixunssfsi+0x14>
    1a28:	14 c0       	rjmp	.+40     	; 0x1a52 <__fixunssfsi+0x4c>
    1a2a:	b1 30       	cpi	r27, 0x01	; 1
    1a2c:	91 f0       	breq	.+36     	; 0x1a52 <__fixunssfsi+0x4c>
    1a2e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__fp_zero>
    1a32:	b1 e0       	ldi	r27, 0x01	; 1
    1a34:	08 95       	ret
    1a36:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__fp_zero>
    1a3a:	67 2f       	mov	r22, r23
    1a3c:	78 2f       	mov	r23, r24
    1a3e:	88 27       	eor	r24, r24
    1a40:	b8 5f       	subi	r27, 0xF8	; 248
    1a42:	39 f0       	breq	.+14     	; 0x1a52 <__fixunssfsi+0x4c>
    1a44:	b9 3f       	cpi	r27, 0xF9	; 249
    1a46:	cc f3       	brlt	.-14     	; 0x1a3a <__fixunssfsi+0x34>
    1a48:	86 95       	lsr	r24
    1a4a:	77 95       	ror	r23
    1a4c:	67 95       	ror	r22
    1a4e:	b3 95       	inc	r27
    1a50:	d9 f7       	brne	.-10     	; 0x1a48 <__fixunssfsi+0x42>
    1a52:	3e f4       	brtc	.+14     	; 0x1a62 <__fixunssfsi+0x5c>
    1a54:	90 95       	com	r25
    1a56:	80 95       	com	r24
    1a58:	70 95       	com	r23
    1a5a:	61 95       	neg	r22
    1a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	08 95       	ret

00001a64 <__floatunsisf>:
    1a64:	e8 94       	clt
    1a66:	09 c0       	rjmp	.+18     	; 0x1a7a <__floatsisf+0x12>

00001a68 <__floatsisf>:
    1a68:	97 fb       	bst	r25, 7
    1a6a:	3e f4       	brtc	.+14     	; 0x1a7a <__floatsisf+0x12>
    1a6c:	90 95       	com	r25
    1a6e:	80 95       	com	r24
    1a70:	70 95       	com	r23
    1a72:	61 95       	neg	r22
    1a74:	7f 4f       	sbci	r23, 0xFF	; 255
    1a76:	8f 4f       	sbci	r24, 0xFF	; 255
    1a78:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7a:	99 23       	and	r25, r25
    1a7c:	a9 f0       	breq	.+42     	; 0x1aa8 <__floatsisf+0x40>
    1a7e:	f9 2f       	mov	r31, r25
    1a80:	96 e9       	ldi	r25, 0x96	; 150
    1a82:	bb 27       	eor	r27, r27
    1a84:	93 95       	inc	r25
    1a86:	f6 95       	lsr	r31
    1a88:	87 95       	ror	r24
    1a8a:	77 95       	ror	r23
    1a8c:	67 95       	ror	r22
    1a8e:	b7 95       	ror	r27
    1a90:	f1 11       	cpse	r31, r1
    1a92:	f8 cf       	rjmp	.-16     	; 0x1a84 <__floatsisf+0x1c>
    1a94:	fa f4       	brpl	.+62     	; 0x1ad4 <__floatsisf+0x6c>
    1a96:	bb 0f       	add	r27, r27
    1a98:	11 f4       	brne	.+4      	; 0x1a9e <__floatsisf+0x36>
    1a9a:	60 ff       	sbrs	r22, 0
    1a9c:	1b c0       	rjmp	.+54     	; 0x1ad4 <__floatsisf+0x6c>
    1a9e:	6f 5f       	subi	r22, 0xFF	; 255
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa6:	16 c0       	rjmp	.+44     	; 0x1ad4 <__floatsisf+0x6c>
    1aa8:	88 23       	and	r24, r24
    1aaa:	11 f0       	breq	.+4      	; 0x1ab0 <__floatsisf+0x48>
    1aac:	96 e9       	ldi	r25, 0x96	; 150
    1aae:	11 c0       	rjmp	.+34     	; 0x1ad2 <__floatsisf+0x6a>
    1ab0:	77 23       	and	r23, r23
    1ab2:	21 f0       	breq	.+8      	; 0x1abc <__floatsisf+0x54>
    1ab4:	9e e8       	ldi	r25, 0x8E	; 142
    1ab6:	87 2f       	mov	r24, r23
    1ab8:	76 2f       	mov	r23, r22
    1aba:	05 c0       	rjmp	.+10     	; 0x1ac6 <__floatsisf+0x5e>
    1abc:	66 23       	and	r22, r22
    1abe:	71 f0       	breq	.+28     	; 0x1adc <__floatsisf+0x74>
    1ac0:	96 e8       	ldi	r25, 0x86	; 134
    1ac2:	86 2f       	mov	r24, r22
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	2a f0       	brmi	.+10     	; 0x1ad4 <__floatsisf+0x6c>
    1aca:	9a 95       	dec	r25
    1acc:	66 0f       	add	r22, r22
    1ace:	77 1f       	adc	r23, r23
    1ad0:	88 1f       	adc	r24, r24
    1ad2:	da f7       	brpl	.-10     	; 0x1aca <__floatsisf+0x62>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	96 95       	lsr	r25
    1ad8:	87 95       	ror	r24
    1ada:	97 f9       	bld	r25, 7
    1adc:	08 95       	ret

00001ade <__floatundisf>:
    1ade:	e8 94       	clt

00001ae0 <__fp_di2sf>:
    1ae0:	f9 2f       	mov	r31, r25
    1ae2:	96 eb       	ldi	r25, 0xB6	; 182
    1ae4:	ff 23       	and	r31, r31
    1ae6:	81 f0       	breq	.+32     	; 0x1b08 <__fp_di2sf+0x28>
    1ae8:	12 16       	cp	r1, r18
    1aea:	13 06       	cpc	r1, r19
    1aec:	14 06       	cpc	r1, r20
    1aee:	44 0b       	sbc	r20, r20
    1af0:	93 95       	inc	r25
    1af2:	f6 95       	lsr	r31
    1af4:	87 95       	ror	r24
    1af6:	77 95       	ror	r23
    1af8:	67 95       	ror	r22
    1afa:	57 95       	ror	r21
    1afc:	40 40       	sbci	r20, 0x00	; 0
    1afe:	ff 23       	and	r31, r31
    1b00:	b9 f7       	brne	.-18     	; 0x1af0 <__fp_di2sf+0x10>
    1b02:	1b c0       	rjmp	.+54     	; 0x1b3a <__fp_di2sf+0x5a>
    1b04:	99 27       	eor	r25, r25
    1b06:	08 95       	ret
    1b08:	88 23       	and	r24, r24
    1b0a:	51 f4       	brne	.+20     	; 0x1b20 <__fp_di2sf+0x40>
    1b0c:	98 50       	subi	r25, 0x08	; 8
    1b0e:	d2 f7       	brpl	.-12     	; 0x1b04 <__fp_di2sf+0x24>
    1b10:	87 2b       	or	r24, r23
    1b12:	76 2f       	mov	r23, r22
    1b14:	65 2f       	mov	r22, r21
    1b16:	54 2f       	mov	r21, r20
    1b18:	43 2f       	mov	r20, r19
    1b1a:	32 2f       	mov	r19, r18
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	b1 f3       	breq	.-20     	; 0x1b0c <__fp_di2sf+0x2c>
    1b20:	12 16       	cp	r1, r18
    1b22:	13 06       	cpc	r1, r19
    1b24:	14 06       	cpc	r1, r20
    1b26:	44 0b       	sbc	r20, r20
    1b28:	88 23       	and	r24, r24
    1b2a:	3a f0       	brmi	.+14     	; 0x1b3a <__fp_di2sf+0x5a>
    1b2c:	9a 95       	dec	r25
    1b2e:	44 0f       	add	r20, r20
    1b30:	55 1f       	adc	r21, r21
    1b32:	66 1f       	adc	r22, r22
    1b34:	77 1f       	adc	r23, r23
    1b36:	88 1f       	adc	r24, r24
    1b38:	ca f7       	brpl	.-14     	; 0x1b2c <__fp_di2sf+0x4c>
    1b3a:	55 23       	and	r21, r21
    1b3c:	4a f4       	brpl	.+18     	; 0x1b50 <__fp_di2sf+0x70>
    1b3e:	44 0f       	add	r20, r20
    1b40:	55 1f       	adc	r21, r21
    1b42:	11 f4       	brne	.+4      	; 0x1b48 <__fp_di2sf+0x68>
    1b44:	60 ff       	sbrs	r22, 0
    1b46:	04 c0       	rjmp	.+8      	; 0x1b50 <__fp_di2sf+0x70>
    1b48:	6f 5f       	subi	r22, 0xFF	; 255
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b50:	88 0f       	add	r24, r24
    1b52:	96 95       	lsr	r25
    1b54:	87 95       	ror	r24
    1b56:	97 f9       	bld	r25, 7
    1b58:	08 95       	ret

00001b5a <__fp_cmp>:
    1b5a:	99 0f       	add	r25, r25
    1b5c:	00 08       	sbc	r0, r0
    1b5e:	55 0f       	add	r21, r21
    1b60:	aa 0b       	sbc	r26, r26
    1b62:	e0 e8       	ldi	r30, 0x80	; 128
    1b64:	fe ef       	ldi	r31, 0xFE	; 254
    1b66:	16 16       	cp	r1, r22
    1b68:	17 06       	cpc	r1, r23
    1b6a:	e8 07       	cpc	r30, r24
    1b6c:	f9 07       	cpc	r31, r25
    1b6e:	c0 f0       	brcs	.+48     	; 0x1ba0 <__fp_cmp+0x46>
    1b70:	12 16       	cp	r1, r18
    1b72:	13 06       	cpc	r1, r19
    1b74:	e4 07       	cpc	r30, r20
    1b76:	f5 07       	cpc	r31, r21
    1b78:	98 f0       	brcs	.+38     	; 0x1ba0 <__fp_cmp+0x46>
    1b7a:	62 1b       	sub	r22, r18
    1b7c:	73 0b       	sbc	r23, r19
    1b7e:	84 0b       	sbc	r24, r20
    1b80:	95 0b       	sbc	r25, r21
    1b82:	39 f4       	brne	.+14     	; 0x1b92 <__fp_cmp+0x38>
    1b84:	0a 26       	eor	r0, r26
    1b86:	61 f0       	breq	.+24     	; 0x1ba0 <__fp_cmp+0x46>
    1b88:	23 2b       	or	r18, r19
    1b8a:	24 2b       	or	r18, r20
    1b8c:	25 2b       	or	r18, r21
    1b8e:	21 f4       	brne	.+8      	; 0x1b98 <__fp_cmp+0x3e>
    1b90:	08 95       	ret
    1b92:	0a 26       	eor	r0, r26
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <__fp_cmp+0x3e>
    1b96:	a1 40       	sbci	r26, 0x01	; 1
    1b98:	a6 95       	lsr	r26
    1b9a:	8f ef       	ldi	r24, 0xFF	; 255
    1b9c:	81 1d       	adc	r24, r1
    1b9e:	81 1d       	adc	r24, r1
    1ba0:	08 95       	ret

00001ba2 <__fp_inf>:
    1ba2:	97 f9       	bld	r25, 7
    1ba4:	9f 67       	ori	r25, 0x7F	; 127
    1ba6:	80 e8       	ldi	r24, 0x80	; 128
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	08 95       	ret

00001bae <__fp_nan>:
    1bae:	9f ef       	ldi	r25, 0xFF	; 255
    1bb0:	80 ec       	ldi	r24, 0xC0	; 192
    1bb2:	08 95       	ret

00001bb4 <__fp_pscA>:
    1bb4:	00 24       	eor	r0, r0
    1bb6:	0a 94       	dec	r0
    1bb8:	16 16       	cp	r1, r22
    1bba:	17 06       	cpc	r1, r23
    1bbc:	18 06       	cpc	r1, r24
    1bbe:	09 06       	cpc	r0, r25
    1bc0:	08 95       	ret

00001bc2 <__fp_pscB>:
    1bc2:	00 24       	eor	r0, r0
    1bc4:	0a 94       	dec	r0
    1bc6:	12 16       	cp	r1, r18
    1bc8:	13 06       	cpc	r1, r19
    1bca:	14 06       	cpc	r1, r20
    1bcc:	05 06       	cpc	r0, r21
    1bce:	08 95       	ret

00001bd0 <__fp_round>:
    1bd0:	09 2e       	mov	r0, r25
    1bd2:	03 94       	inc	r0
    1bd4:	00 0c       	add	r0, r0
    1bd6:	11 f4       	brne	.+4      	; 0x1bdc <__fp_round+0xc>
    1bd8:	88 23       	and	r24, r24
    1bda:	52 f0       	brmi	.+20     	; 0x1bf0 <__fp_round+0x20>
    1bdc:	bb 0f       	add	r27, r27
    1bde:	40 f4       	brcc	.+16     	; 0x1bf0 <__fp_round+0x20>
    1be0:	bf 2b       	or	r27, r31
    1be2:	11 f4       	brne	.+4      	; 0x1be8 <__fp_round+0x18>
    1be4:	60 ff       	sbrs	r22, 0
    1be6:	04 c0       	rjmp	.+8      	; 0x1bf0 <__fp_round+0x20>
    1be8:	6f 5f       	subi	r22, 0xFF	; 255
    1bea:	7f 4f       	sbci	r23, 0xFF	; 255
    1bec:	8f 4f       	sbci	r24, 0xFF	; 255
    1bee:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf0:	08 95       	ret

00001bf2 <__fp_split3>:
    1bf2:	57 fd       	sbrc	r21, 7
    1bf4:	90 58       	subi	r25, 0x80	; 128
    1bf6:	44 0f       	add	r20, r20
    1bf8:	55 1f       	adc	r21, r21
    1bfa:	59 f0       	breq	.+22     	; 0x1c12 <__fp_splitA+0x10>
    1bfc:	5f 3f       	cpi	r21, 0xFF	; 255
    1bfe:	71 f0       	breq	.+28     	; 0x1c1c <__fp_splitA+0x1a>
    1c00:	47 95       	ror	r20

00001c02 <__fp_splitA>:
    1c02:	88 0f       	add	r24, r24
    1c04:	97 fb       	bst	r25, 7
    1c06:	99 1f       	adc	r25, r25
    1c08:	61 f0       	breq	.+24     	; 0x1c22 <__fp_splitA+0x20>
    1c0a:	9f 3f       	cpi	r25, 0xFF	; 255
    1c0c:	79 f0       	breq	.+30     	; 0x1c2c <__fp_splitA+0x2a>
    1c0e:	87 95       	ror	r24
    1c10:	08 95       	ret
    1c12:	12 16       	cp	r1, r18
    1c14:	13 06       	cpc	r1, r19
    1c16:	14 06       	cpc	r1, r20
    1c18:	55 1f       	adc	r21, r21
    1c1a:	f2 cf       	rjmp	.-28     	; 0x1c00 <__fp_split3+0xe>
    1c1c:	46 95       	lsr	r20
    1c1e:	f1 df       	rcall	.-30     	; 0x1c02 <__fp_splitA>
    1c20:	08 c0       	rjmp	.+16     	; 0x1c32 <__fp_splitA+0x30>
    1c22:	16 16       	cp	r1, r22
    1c24:	17 06       	cpc	r1, r23
    1c26:	18 06       	cpc	r1, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	f1 cf       	rjmp	.-30     	; 0x1c0e <__fp_splitA+0xc>
    1c2c:	86 95       	lsr	r24
    1c2e:	71 05       	cpc	r23, r1
    1c30:	61 05       	cpc	r22, r1
    1c32:	08 94       	sec
    1c34:	08 95       	ret

00001c36 <__fp_zero>:
    1c36:	e8 94       	clt

00001c38 <__fp_szero>:
    1c38:	bb 27       	eor	r27, r27
    1c3a:	66 27       	eor	r22, r22
    1c3c:	77 27       	eor	r23, r23
    1c3e:	cb 01       	movw	r24, r22
    1c40:	97 f9       	bld	r25, 7
    1c42:	08 95       	ret

00001c44 <__mulsf3>:
    1c44:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__mulsf3x>
    1c48:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__fp_round>
    1c4c:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__fp_pscA>
    1c50:	38 f0       	brcs	.+14     	; 0x1c60 <__mulsf3+0x1c>
    1c52:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__fp_pscB>
    1c56:	20 f0       	brcs	.+8      	; 0x1c60 <__mulsf3+0x1c>
    1c58:	95 23       	and	r25, r21
    1c5a:	11 f0       	breq	.+4      	; 0x1c60 <__mulsf3+0x1c>
    1c5c:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_inf>
    1c60:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__fp_nan>
    1c64:	11 24       	eor	r1, r1
    1c66:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_szero>

00001c6a <__mulsf3x>:
    1c6a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__fp_split3>
    1c6e:	70 f3       	brcs	.-36     	; 0x1c4c <__mulsf3+0x8>

00001c70 <__mulsf3_pse>:
    1c70:	95 9f       	mul	r25, r21
    1c72:	c1 f3       	breq	.-16     	; 0x1c64 <__mulsf3+0x20>
    1c74:	95 0f       	add	r25, r21
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	55 1f       	adc	r21, r21
    1c7a:	62 9f       	mul	r22, r18
    1c7c:	f0 01       	movw	r30, r0
    1c7e:	72 9f       	mul	r23, r18
    1c80:	bb 27       	eor	r27, r27
    1c82:	f0 0d       	add	r31, r0
    1c84:	b1 1d       	adc	r27, r1
    1c86:	63 9f       	mul	r22, r19
    1c88:	aa 27       	eor	r26, r26
    1c8a:	f0 0d       	add	r31, r0
    1c8c:	b1 1d       	adc	r27, r1
    1c8e:	aa 1f       	adc	r26, r26
    1c90:	64 9f       	mul	r22, r20
    1c92:	66 27       	eor	r22, r22
    1c94:	b0 0d       	add	r27, r0
    1c96:	a1 1d       	adc	r26, r1
    1c98:	66 1f       	adc	r22, r22
    1c9a:	82 9f       	mul	r24, r18
    1c9c:	22 27       	eor	r18, r18
    1c9e:	b0 0d       	add	r27, r0
    1ca0:	a1 1d       	adc	r26, r1
    1ca2:	62 1f       	adc	r22, r18
    1ca4:	73 9f       	mul	r23, r19
    1ca6:	b0 0d       	add	r27, r0
    1ca8:	a1 1d       	adc	r26, r1
    1caa:	62 1f       	adc	r22, r18
    1cac:	83 9f       	mul	r24, r19
    1cae:	a0 0d       	add	r26, r0
    1cb0:	61 1d       	adc	r22, r1
    1cb2:	22 1f       	adc	r18, r18
    1cb4:	74 9f       	mul	r23, r20
    1cb6:	33 27       	eor	r19, r19
    1cb8:	a0 0d       	add	r26, r0
    1cba:	61 1d       	adc	r22, r1
    1cbc:	23 1f       	adc	r18, r19
    1cbe:	84 9f       	mul	r24, r20
    1cc0:	60 0d       	add	r22, r0
    1cc2:	21 1d       	adc	r18, r1
    1cc4:	82 2f       	mov	r24, r18
    1cc6:	76 2f       	mov	r23, r22
    1cc8:	6a 2f       	mov	r22, r26
    1cca:	11 24       	eor	r1, r1
    1ccc:	9f 57       	subi	r25, 0x7F	; 127
    1cce:	50 40       	sbci	r21, 0x00	; 0
    1cd0:	9a f0       	brmi	.+38     	; 0x1cf8 <__mulsf3_pse+0x88>
    1cd2:	f1 f0       	breq	.+60     	; 0x1d10 <__mulsf3_pse+0xa0>
    1cd4:	88 23       	and	r24, r24
    1cd6:	4a f0       	brmi	.+18     	; 0x1cea <__mulsf3_pse+0x7a>
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	bb 1f       	adc	r27, r27
    1cde:	66 1f       	adc	r22, r22
    1ce0:	77 1f       	adc	r23, r23
    1ce2:	88 1f       	adc	r24, r24
    1ce4:	91 50       	subi	r25, 0x01	; 1
    1ce6:	50 40       	sbci	r21, 0x00	; 0
    1ce8:	a9 f7       	brne	.-22     	; 0x1cd4 <__mulsf3_pse+0x64>
    1cea:	9e 3f       	cpi	r25, 0xFE	; 254
    1cec:	51 05       	cpc	r21, r1
    1cee:	80 f0       	brcs	.+32     	; 0x1d10 <__mulsf3_pse+0xa0>
    1cf0:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__fp_inf>
    1cf4:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_szero>
    1cf8:	5f 3f       	cpi	r21, 0xFF	; 255
    1cfa:	e4 f3       	brlt	.-8      	; 0x1cf4 <__mulsf3_pse+0x84>
    1cfc:	98 3e       	cpi	r25, 0xE8	; 232
    1cfe:	d4 f3       	brlt	.-12     	; 0x1cf4 <__mulsf3_pse+0x84>
    1d00:	86 95       	lsr	r24
    1d02:	77 95       	ror	r23
    1d04:	67 95       	ror	r22
    1d06:	b7 95       	ror	r27
    1d08:	f7 95       	ror	r31
    1d0a:	e7 95       	ror	r30
    1d0c:	9f 5f       	subi	r25, 0xFF	; 255
    1d0e:	c1 f7       	brne	.-16     	; 0x1d00 <__mulsf3_pse+0x90>
    1d10:	fe 2b       	or	r31, r30
    1d12:	88 0f       	add	r24, r24
    1d14:	91 1d       	adc	r25, r1
    1d16:	96 95       	lsr	r25
    1d18:	87 95       	ror	r24
    1d1a:	97 f9       	bld	r25, 7
    1d1c:	08 95       	ret

00001d1e <__udivmodsi4>:
    1d1e:	a1 e2       	ldi	r26, 0x21	; 33
    1d20:	1a 2e       	mov	r1, r26
    1d22:	aa 1b       	sub	r26, r26
    1d24:	bb 1b       	sub	r27, r27
    1d26:	fd 01       	movw	r30, r26
    1d28:	0d c0       	rjmp	.+26     	; 0x1d44 <__udivmodsi4_ep>

00001d2a <__udivmodsi4_loop>:
    1d2a:	aa 1f       	adc	r26, r26
    1d2c:	bb 1f       	adc	r27, r27
    1d2e:	ee 1f       	adc	r30, r30
    1d30:	ff 1f       	adc	r31, r31
    1d32:	a2 17       	cp	r26, r18
    1d34:	b3 07       	cpc	r27, r19
    1d36:	e4 07       	cpc	r30, r20
    1d38:	f5 07       	cpc	r31, r21
    1d3a:	20 f0       	brcs	.+8      	; 0x1d44 <__udivmodsi4_ep>
    1d3c:	a2 1b       	sub	r26, r18
    1d3e:	b3 0b       	sbc	r27, r19
    1d40:	e4 0b       	sbc	r30, r20
    1d42:	f5 0b       	sbc	r31, r21

00001d44 <__udivmodsi4_ep>:
    1d44:	66 1f       	adc	r22, r22
    1d46:	77 1f       	adc	r23, r23
    1d48:	88 1f       	adc	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	1a 94       	dec	r1
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <__udivmodsi4_loop>
    1d50:	60 95       	com	r22
    1d52:	70 95       	com	r23
    1d54:	80 95       	com	r24
    1d56:	90 95       	com	r25
    1d58:	9b 01       	movw	r18, r22
    1d5a:	ac 01       	movw	r20, r24
    1d5c:	bd 01       	movw	r22, r26
    1d5e:	cf 01       	movw	r24, r30
    1d60:	08 95       	ret

00001d62 <__tablejump2__>:
    1d62:	ee 0f       	add	r30, r30
    1d64:	ff 1f       	adc	r31, r31
    1d66:	05 90       	lpm	r0, Z+
    1d68:	f4 91       	lpm	r31, Z
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	09 94       	ijmp

00001d6e <__ashldi3>:
    1d6e:	0f 93       	push	r16
    1d70:	08 30       	cpi	r16, 0x08	; 8
    1d72:	90 f0       	brcs	.+36     	; 0x1d98 <__ashldi3+0x2a>
    1d74:	98 2f       	mov	r25, r24
    1d76:	87 2f       	mov	r24, r23
    1d78:	76 2f       	mov	r23, r22
    1d7a:	65 2f       	mov	r22, r21
    1d7c:	54 2f       	mov	r21, r20
    1d7e:	43 2f       	mov	r20, r19
    1d80:	32 2f       	mov	r19, r18
    1d82:	22 27       	eor	r18, r18
    1d84:	08 50       	subi	r16, 0x08	; 8
    1d86:	f4 cf       	rjmp	.-24     	; 0x1d70 <__ashldi3+0x2>
    1d88:	22 0f       	add	r18, r18
    1d8a:	33 1f       	adc	r19, r19
    1d8c:	44 1f       	adc	r20, r20
    1d8e:	55 1f       	adc	r21, r21
    1d90:	66 1f       	adc	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	0a 95       	dec	r16
    1d9a:	b2 f7       	brpl	.-20     	; 0x1d88 <__ashldi3+0x1a>
    1d9c:	0f 91       	pop	r16
    1d9e:	08 95       	ret

00001da0 <__adddi3>:
    1da0:	2a 0d       	add	r18, r10
    1da2:	3b 1d       	adc	r19, r11
    1da4:	4c 1d       	adc	r20, r12
    1da6:	5d 1d       	adc	r21, r13
    1da8:	6e 1d       	adc	r22, r14
    1daa:	7f 1d       	adc	r23, r15
    1dac:	80 1f       	adc	r24, r16
    1dae:	91 1f       	adc	r25, r17
    1db0:	08 95       	ret

00001db2 <__adddi3_s8>:
    1db2:	00 24       	eor	r0, r0
    1db4:	a7 fd       	sbrc	r26, 7
    1db6:	00 94       	com	r0
    1db8:	2a 0f       	add	r18, r26
    1dba:	30 1d       	adc	r19, r0
    1dbc:	40 1d       	adc	r20, r0
    1dbe:	50 1d       	adc	r21, r0
    1dc0:	60 1d       	adc	r22, r0
    1dc2:	70 1d       	adc	r23, r0
    1dc4:	80 1d       	adc	r24, r0
    1dc6:	90 1d       	adc	r25, r0
    1dc8:	08 95       	ret

00001dca <__subdi3>:
    1dca:	2a 19       	sub	r18, r10
    1dcc:	3b 09       	sbc	r19, r11
    1dce:	4c 09       	sbc	r20, r12
    1dd0:	5d 09       	sbc	r21, r13
    1dd2:	6e 09       	sbc	r22, r14
    1dd4:	7f 09       	sbc	r23, r15
    1dd6:	80 0b       	sbc	r24, r16
    1dd8:	91 0b       	sbc	r25, r17
    1dda:	08 95       	ret

00001ddc <__cmpdi2_s8>:
    1ddc:	00 24       	eor	r0, r0
    1dde:	a7 fd       	sbrc	r26, 7
    1de0:	00 94       	com	r0
    1de2:	2a 17       	cp	r18, r26
    1de4:	30 05       	cpc	r19, r0
    1de6:	40 05       	cpc	r20, r0
    1de8:	50 05       	cpc	r21, r0
    1dea:	60 05       	cpc	r22, r0
    1dec:	70 05       	cpc	r23, r0
    1dee:	80 05       	cpc	r24, r0
    1df0:	90 05       	cpc	r25, r0
    1df2:	08 95       	ret

00001df4 <_exit>:
    1df4:	f8 94       	cli

00001df6 <__stop_program>:
    1df6:	ff cf       	rjmp	.-2      	; 0x1df6 <__stop_program>
