
PWM Oscilloscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000050a  00800060  00001208  0000129c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000235  0080056a  0080056a  000017a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a60  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000103b  00000000  00000000  0000562c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002934  00000000  00000000  00006667  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b18  00000000  00000000  00008f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001810  00000000  00000000  00009ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004ef3  00000000  00000000  0000b2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  000101b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__vector_1>
       8:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_2>
       c:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__vector_3>
      10:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__vector_4>
      14:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__vector_5>
      18:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__vector_6>
      1c:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__vector_7>
      20:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__vector_8>
      24:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__vector_9>
      28:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__vector_10>
      2c:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__vector_11>
      30:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_12>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	70 00       	.word	0x0070	; ????
      56:	85 00       	.word	0x0085	; ????
      58:	af 00       	.word	0x00af	; ????
      5a:	b6 00       	.word	0x00b6	; ????
      5c:	bd 00       	.word	0x00bd	; ????
      5e:	c4 00       	.word	0x00c4	; ????
      60:	cb 00       	.word	0x00cb	; ????

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	15 e0       	ldi	r17, 0x05	; 5
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e8 e0       	ldi	r30, 0x08	; 8
      76:	f2 e1       	ldi	r31, 0x12	; 18
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	aa 36       	cpi	r26, 0x6A	; 106
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	27 e0       	ldi	r18, 0x07	; 7
      86:	aa e6       	ldi	r26, 0x6A	; 106
      88:	b5 e0       	ldi	r27, 0x05	; 5
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	af 39       	cpi	r26, 0x9F	; 159
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
      98:	0c 94 02 09 	jmp	0x1204	; 0x1204 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <main>:
void main(void)
{

	
	//initializaions
	NOKIA5110_enu_Initialization();
      a0:	0e 94 25 02 	call	0x44a	; 0x44a <NOKIA5110_enu_Initialization>
	
	
	NOKIA5110_enu_DrawNumber(-4743.545, 0, 0, NOKIA5110_BLACK_COLOUR);
      a4:	01 e0       	ldi	r16, 0x01	; 1
      a6:	20 e0       	ldi	r18, 0x00	; 0
      a8:	40 e0       	ldi	r20, 0x00	; 0
      aa:	6c e5       	ldi	r22, 0x5C	; 92
      ac:	7c e3       	ldi	r23, 0x3C	; 60
      ae:	84 e9       	ldi	r24, 0x94	; 148
      b0:	95 ec       	ldi	r25, 0xC5	; 197
      b2:	0e 94 af 02 	call	0x55e	; 0x55e <NOKIA5110_enu_DrawNumber>
	NOKIA5110_enu_DrawNumber(3, 0, 6, NOKIA5110_BLACK_COLOUR);
      b6:	26 e0       	ldi	r18, 0x06	; 6
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	70 e0       	ldi	r23, 0x00	; 0
      be:	80 e4       	ldi	r24, 0x40	; 64
      c0:	90 e4       	ldi	r25, 0x40	; 64
      c2:	0e 94 af 02 	call	0x55e	; 0x55e <NOKIA5110_enu_DrawNumber>
      c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x26>

000000c8 <enu_GenerateFrame>:
    u8 Local_u8_ErrorFlag =ES_NOK;

    Local_u8_ErrorFlag = enu_DrawRectangle(Copy_u8_Y, Copy_u8_X, Copy_u8_Length, Copy_u8_Width, Copy_u8_Colour);

    return Local_u8_ErrorFlag;
}
      c8:	fb 01       	movw	r30, r22
      ca:	10 82       	st	Z, r1
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	87 30       	cpi	r24, 0x07	; 7
      d0:	91 05       	cpc	r25, r1
      d2:	08 f0       	brcs	.+2      	; 0xd6 <enu_GenerateFrame+0xe>
      d4:	67 c0       	rjmp	.+206    	; 0x1a4 <enu_GenerateFrame+0xdc>
      d6:	fc 01       	movw	r30, r24
      d8:	e6 5d       	subi	r30, 0xD6	; 214
      da:	ff 4f       	sbci	r31, 0xFF	; 255
      dc:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__tablejump2__>
      e0:	e0 e6       	ldi	r30, 0x60	; 96
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	20 81       	ld	r18, Z
      e6:	91 81       	ldd	r25, Z+1	; 0x01
      e8:	42 81       	ldd	r20, Z+2	; 0x02
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	22 0f       	add	r18, r18
      ee:	33 1f       	adc	r19, r19
      f0:	22 0f       	add	r18, r18
      f2:	33 1f       	adc	r19, r19
      f4:	89 2f       	mov	r24, r25
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	88 0f       	add	r24, r24
      fa:	99 1f       	adc	r25, r25
      fc:	20 62       	ori	r18, 0x20	; 32
      fe:	82 2b       	or	r24, r18
     100:	84 2b       	or	r24, r20
     102:	fb 01       	movw	r30, r22
     104:	80 83       	st	Z, r24
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	08 95       	ret
     10a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     10e:	88 23       	and	r24, r24
     110:	51 f0       	breq	.+20     	; 0x126 <enu_GenerateFrame+0x5e>
     112:	81 30       	cpi	r24, 0x01	; 1
     114:	61 f0       	breq	.+24     	; 0x12e <enu_GenerateFrame+0x66>
     116:	82 30       	cpi	r24, 0x02	; 2
     118:	71 f0       	breq	.+28     	; 0x136 <enu_GenerateFrame+0x6e>
     11a:	83 30       	cpi	r24, 0x03	; 3
     11c:	81 f4       	brne	.+32     	; 0x13e <enu_GenerateFrame+0x76>
     11e:	41 e0       	ldi	r20, 0x01	; 1
     120:	91 e0       	ldi	r25, 0x01	; 1
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	0f c0       	rjmp	.+30     	; 0x144 <enu_GenerateFrame+0x7c>
     126:	40 e0       	ldi	r20, 0x00	; 0
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0b c0       	rjmp	.+22     	; 0x144 <enu_GenerateFrame+0x7c>
     12e:	41 e0       	ldi	r20, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	07 c0       	rjmp	.+14     	; 0x144 <enu_GenerateFrame+0x7c>
     136:	40 e0       	ldi	r20, 0x00	; 0
     138:	91 e0       	ldi	r25, 0x01	; 1
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	03 c0       	rjmp	.+6      	; 0x144 <enu_GenerateFrame+0x7c>
     13e:	40 e0       	ldi	r20, 0x00	; 0
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	82 e0       	ldi	r24, 0x02	; 2
     144:	81 11       	cpse	r24, r1
     146:	2f c0       	rjmp	.+94     	; 0x1a6 <enu_GenerateFrame+0xde>
     148:	29 2f       	mov	r18, r25
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	22 0f       	add	r18, r18
     14e:	33 1f       	adc	r19, r19
     150:	22 0f       	add	r18, r18
     152:	33 1f       	adc	r19, r19
     154:	24 2b       	or	r18, r20
     156:	28 60       	ori	r18, 0x08	; 8
     158:	fb 01       	movw	r30, r22
     15a:	20 83       	st	Z, r18
     15c:	08 95       	ret
     15e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     162:	80 64       	ori	r24, 0x40	; 64
     164:	fb 01       	movw	r30, r22
     166:	80 83       	st	Z, r24
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	08 95       	ret
     16c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     170:	80 68       	ori	r24, 0x80	; 128
     172:	fb 01       	movw	r30, r22
     174:	80 83       	st	Z, r24
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	08 95       	ret
     17a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     17e:	84 60       	ori	r24, 0x04	; 4
     180:	fb 01       	movw	r30, r22
     182:	80 83       	st	Z, r24
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	08 95       	ret
     188:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
     18c:	80 61       	ori	r24, 0x10	; 16
     18e:	fb 01       	movw	r30, r22
     190:	80 83       	st	Z, r24
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	08 95       	ret
     196:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
     19a:	80 68       	ori	r24, 0x80	; 128
     19c:	fb 01       	movw	r30, r22
     19e:	80 83       	st	Z, r24
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	08 95       	ret
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	08 95       	ret

000001a8 <enu_ConvertCoordinatesToAddresses>:
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	51 f0       	breq	.+20     	; 0x1c0 <enu_ConvertCoordinatesToAddresses+0x18>
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 81       	ld	r18, Z
     1b0:	20 33       	cpi	r18, 0x30	; 48
     1b2:	40 f4       	brcc	.+16     	; 0x1c4 <enu_ConvertCoordinatesToAddresses+0x1c>
     1b4:	26 95       	lsr	r18
     1b6:	26 95       	lsr	r18
     1b8:	26 95       	lsr	r18
     1ba:	20 83       	st	Z, r18
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	08 95       	ret
     1c0:	83 e0       	ldi	r24, 0x03	; 3
     1c2:	08 95       	ret
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	08 95       	ret

000001c8 <enu_PassByteToSPI>:
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	1f 92       	push	r1
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
     1d4:	18 2f       	mov	r17, r24
     1d6:	ce 01       	movw	r24, r28
     1d8:	01 96       	adiw	r24, 0x01	; 1
     1da:	0e 94 fe 05 	call	0xbfc	; 0xbfc <SPI_enu_GetCommState>
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	81 11       	cpse	r24, r1
     1e2:	15 c0       	rjmp	.+42     	; 0x20e <enu_PassByteToSPI+0x46>
     1e4:	40 e0       	ldi	r20, 0x00	; 0
     1e6:	64 e0       	ldi	r22, 0x04	; 4
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_enu_SetPinValue>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <enu_PassByteToSPI+0x28>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <enu_PassByteToSPI+0x2a>
     1f2:	81 2f       	mov	r24, r17
     1f4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SPI_enu_MasterSend>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <enu_PassByteToSPI+0x32>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <enu_PassByteToSPI+0x34>
     1fc:	41 e0       	ldi	r20, 0x01	; 1
     1fe:	64 e0       	ldi	r22, 0x04	; 4
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_enu_SetPinValue>
     206:	00 c0       	rjmp	.+0      	; 0x208 <enu_PassByteToSPI+0x40>
     208:	00 c0       	rjmp	.+0      	; 0x20a <enu_PassByteToSPI+0x42>
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	01 c0       	rjmp	.+2      	; 0x210 <enu_PassByteToSPI+0x48>
     20e:	84 e0       	ldi	r24, 0x04	; 4
     210:	0f 90       	pop	r0
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	1f 91       	pop	r17
     218:	08 95       	ret

0000021a <enu_SendCommand>:
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	1f 92       	push	r1
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	be 01       	movw	r22, r28
     226:	6f 5f       	subi	r22, 0xFF	; 255
     228:	7f 4f       	sbci	r23, 0xFF	; 255
     22a:	0e 94 64 00 	call	0xc8	; 0xc8 <enu_GenerateFrame>
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	63 e0       	ldi	r22, 0x03	; 3
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_enu_SetPinValue>
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <enu_PassByteToSPI>
     23e:	0f 90       	pop	r0
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <enu_SendData>:
     246:	cf 93       	push	r28
     248:	c8 2f       	mov	r28, r24
     24a:	41 e0       	ldi	r20, 0x01	; 1
     24c:	63 e0       	ldi	r22, 0x03	; 3
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_enu_SetPinValue>
     254:	8c 2f       	mov	r24, r28
     256:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <enu_PassByteToSPI>
     25a:	cf 91       	pop	r28
     25c:	08 95       	ret

0000025e <enu_DrawPixel>:
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	1f 92       	push	r1
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
     26e:	89 83       	std	Y+1, r24	; 0x01
     270:	64 35       	cpi	r22, 0x54	; 84
     272:	c8 f5       	brcc	.+114    	; 0x2e6 <enu_DrawPixel+0x88>
     274:	80 33       	cpi	r24, 0x30	; 48
     276:	c8 f5       	brcc	.+114    	; 0x2ea <enu_DrawPixel+0x8c>
     278:	42 30       	cpi	r20, 0x02	; 2
     27a:	c8 f5       	brcc	.+114    	; 0x2ee <enu_DrawPixel+0x90>
     27c:	f4 2e       	mov	r15, r20
     27e:	16 2f       	mov	r17, r22
     280:	08 2f       	mov	r16, r24
     282:	07 70       	andi	r16, 0x07	; 7
     284:	ce 01       	movw	r24, r28
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <enu_ConvertCoordinatesToAddresses>
     28c:	49 81       	ldd	r20, Y+1	; 0x01
     28e:	84 e5       	ldi	r24, 0x54	; 84
     290:	48 9f       	mul	r20, r24
     292:	f0 01       	movw	r30, r0
     294:	11 24       	eor	r1, r1
     296:	e6 59       	subi	r30, 0x96	; 150
     298:	fa 4f       	sbci	r31, 0xFA	; 250
     29a:	e1 0f       	add	r30, r17
     29c:	f1 1d       	adc	r31, r1
     29e:	80 81       	ld	r24, Z
     2a0:	21 e0       	ldi	r18, 0x01	; 1
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	00 2e       	mov	r0, r16
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <enu_DrawPixel+0x4e>
     2a8:	22 0f       	add	r18, r18
     2aa:	33 1f       	adc	r19, r19
     2ac:	0a 94       	dec	r0
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <enu_DrawPixel+0x4a>
     2b0:	20 95       	com	r18
     2b2:	28 23       	and	r18, r24
     2b4:	8f 2d       	mov	r24, r15
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <enu_DrawPixel+0x60>
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	0a 95       	dec	r16
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <enu_DrawPixel+0x5c>
     2c2:	02 2f       	mov	r16, r18
     2c4:	08 2b       	or	r16, r24
     2c6:	00 83       	st	Z, r16
     2c8:	e0 e6       	ldi	r30, 0x60	; 96
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	44 83       	std	Z+4, r20	; 0x04
     2ce:	15 83       	std	Z+5, r17	; 0x05
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	0e 94 0d 01 	call	0x21a	; 0x21a <enu_SendCommand>
     2d6:	83 e0       	ldi	r24, 0x03	; 3
     2d8:	0e 94 0d 01 	call	0x21a	; 0x21a <enu_SendCommand>
     2dc:	80 2f       	mov	r24, r16
     2de:	0e 94 23 01 	call	0x246	; 0x246 <enu_SendData>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <enu_DrawPixel+0x92>
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <enu_DrawPixel+0x92>
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <enu_DrawPixel+0x92>
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	0f 90       	pop	r0
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	1f 91       	pop	r17
     2f8:	0f 91       	pop	r16
     2fa:	ff 90       	pop	r15
     2fc:	08 95       	ret

000002fe <enu_DrawFillRectangle>:
     2fe:	af 92       	push	r10
     300:	bf 92       	push	r11
     302:	cf 92       	push	r12
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	1f 92       	push	r1
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
     318:	a8 2e       	mov	r10, r24
     31a:	16 2f       	mov	r17, r22
     31c:	19 82       	std	Y+1, r1	; 0x01
     31e:	64 35       	cpi	r22, 0x54	; 84
     320:	28 f4       	brcc	.+10     	; 0x32c <enu_DrawFillRectangle+0x2e>
     322:	8f e2       	ldi	r24, 0x2F	; 47
     324:	8a 15       	cp	r24, r10
     326:	20 f4       	brcc	.+8      	; 0x330 <enu_DrawFillRectangle+0x32>
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	03 c0       	rjmp	.+6      	; 0x332 <enu_DrawFillRectangle+0x34>
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	01 c0       	rjmp	.+2      	; 0x332 <enu_DrawFillRectangle+0x34>
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	45 35       	cpi	r20, 0x55	; 85
     334:	20 f4       	brcc	.+8      	; 0x33e <enu_DrawFillRectangle+0x40>
     336:	21 33       	cpi	r18, 0x31	; 49
     338:	20 f0       	brcs	.+8      	; 0x342 <enu_DrawFillRectangle+0x44>
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	03 c0       	rjmp	.+6      	; 0x344 <enu_DrawFillRectangle+0x46>
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	01 c0       	rjmp	.+2      	; 0x344 <enu_DrawFillRectangle+0x46>
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	69 01       	movw	r12, r18
     348:	ca 0c       	add	r12, r10
     34a:	d1 1c       	adc	r13, r1
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	7a 01       	movw	r14, r20
     350:	e1 0e       	add	r14, r17
     352:	f1 1c       	adc	r15, r1
     354:	88 23       	and	r24, r24
     356:	49 f1       	breq	.+82     	; 0x3aa <enu_DrawFillRectangle+0xac>
     358:	02 30       	cpi	r16, 0x02	; 2
     35a:	48 f5       	brcc	.+82     	; 0x3ae <enu_DrawFillRectangle+0xb0>
     35c:	99 23       	and	r25, r25
     35e:	49 f1       	breq	.+82     	; 0x3b2 <enu_DrawFillRectangle+0xb4>
     360:	ce 01       	movw	r24, r28
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <enu_ConvertCoordinatesToAddresses>
     368:	e0 e6       	ldi	r30, 0x60	; 96
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	84 83       	std	Z+4, r24	; 0x04
     370:	15 83       	std	Z+5, r17	; 0x05
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	0e 94 0d 01 	call	0x21a	; 0x21a <enu_SendCommand>
     378:	83 e0       	ldi	r24, 0x03	; 3
     37a:	0e 94 0d 01 	call	0x21a	; 0x21a <enu_SendCommand>
     37e:	0e c0       	rjmp	.+28     	; 0x39c <enu_DrawFillRectangle+0x9e>
     380:	40 2f       	mov	r20, r16
     382:	61 2f       	mov	r22, r17
     384:	8b 2d       	mov	r24, r11
     386:	0e 94 2f 01 	call	0x25e	; 0x25e <enu_DrawPixel>
     38a:	b3 94       	inc	r11
     38c:	01 c0       	rjmp	.+2      	; 0x390 <enu_DrawFillRectangle+0x92>
     38e:	ba 2c       	mov	r11, r10
     390:	8b 2d       	mov	r24, r11
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	8c 15       	cp	r24, r12
     396:	9d 05       	cpc	r25, r13
     398:	9c f3       	brlt	.-26     	; 0x380 <enu_DrawFillRectangle+0x82>
     39a:	1f 5f       	subi	r17, 0xFF	; 255
     39c:	81 2f       	mov	r24, r17
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	8e 15       	cp	r24, r14
     3a2:	9f 05       	cpc	r25, r15
     3a4:	a4 f3       	brlt	.-24     	; 0x38e <enu_DrawFillRectangle+0x90>
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <enu_DrawFillRectangle+0xb6>
     3aa:	82 e0       	ldi	r24, 0x02	; 2
     3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <enu_DrawFillRectangle+0xb6>
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <enu_DrawFillRectangle+0xb6>
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	0f 90       	pop	r0
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	08 95       	ret

000003cc <enu_DrawASCII>:
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	c8 2e       	mov	r12, r24
     3de:	f6 2e       	mov	r15, r22
     3e0:	e4 2e       	mov	r14, r20
     3e2:	d2 2e       	mov	r13, r18
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	28 e0       	ldi	r18, 0x08	; 8
     3e8:	45 e0       	ldi	r20, 0x05	; 5
     3ea:	6e 2d       	mov	r22, r14
     3ec:	8f 2d       	mov	r24, r15
     3ee:	0e 94 7f 01 	call	0x2fe	; 0x2fe <enu_DrawFillRectangle>
     3f2:	10 e0       	ldi	r17, 0x00	; 0
     3f4:	1e c0       	rjmp	.+60     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     3f6:	8c 2d       	mov	r24, r12
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	fc 01       	movw	r30, r24
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	ee 0f       	add	r30, r30
     402:	ff 1f       	adc	r31, r31
     404:	e8 0f       	add	r30, r24
     406:	f9 1f       	adc	r31, r25
     408:	e1 0f       	add	r30, r17
     40a:	f1 1d       	adc	r31, r1
     40c:	e7 59       	subi	r30, 0x97	; 151
     40e:	ff 4f       	sbci	r31, 0xFF	; 255
     410:	d0 81       	ld	r29, Z
     412:	c0 e0       	ldi	r28, 0x00	; 0
     414:	0b c0       	rjmp	.+22     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     416:	d0 ff       	sbrs	r29, 0
     418:	07 c0       	rjmp	.+14     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     41a:	4d 2d       	mov	r20, r13
     41c:	61 2f       	mov	r22, r17
     41e:	6e 0d       	add	r22, r14
     420:	8c 2f       	mov	r24, r28
     422:	8f 0d       	add	r24, r15
     424:	0e 94 2f 01 	call	0x25e	; 0x25e <enu_DrawPixel>
     428:	cf 5f       	subi	r28, 0xFF	; 255
     42a:	d6 95       	lsr	r29
     42c:	c8 30       	cpi	r28, 0x08	; 8
     42e:	98 f3       	brcs	.-26     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     430:	1f 5f       	subi	r17, 0xFF	; 255
     432:	15 30       	cpi	r17, 0x05	; 5
     434:	00 f3       	brcs	.-64     	; 0x3f6 <enu_DrawASCII+0x2a>
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	08 95       	ret

0000044a <NOKIA5110_enu_Initialization>:
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	1f 92       	push	r1
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	41 e0       	ldi	r20, 0x01	; 1
     45a:	65 e0       	ldi	r22, 0x05	; 5
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	0e 94 cc 03 	call	0x798	; 0x798 <DIO_enu_SetPinDiretion>
     462:	41 e0       	ldi	r20, 0x01	; 1
     464:	67 e0       	ldi	r22, 0x07	; 7
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 cc 03 	call	0x798	; 0x798 <DIO_enu_SetPinDiretion>
     46c:	41 e0       	ldi	r20, 0x01	; 1
     46e:	64 e0       	ldi	r22, 0x04	; 4
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_enu_SetPinValue>
     476:	41 e0       	ldi	r20, 0x01	; 1
     478:	64 e0       	ldi	r22, 0x04	; 4
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	0e 94 cc 03 	call	0x798	; 0x798 <DIO_enu_SetPinDiretion>
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	62 e0       	ldi	r22, 0x02	; 2
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_enu_SetPinValue>
     48a:	41 e0       	ldi	r20, 0x01	; 1
     48c:	62 e0       	ldi	r22, 0x02	; 2
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 cc 03 	call	0x798	; 0x798 <DIO_enu_SetPinDiretion>
     494:	41 e0       	ldi	r20, 0x01	; 1
     496:	63 e0       	ldi	r22, 0x03	; 3
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	0e 94 cc 03 	call	0x798	; 0x798 <DIO_enu_SetPinDiretion>
     49e:	0e 94 cb 05 	call	0xb96	; 0xb96 <SPI_enu_Initialization>
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	64 e0       	ldi	r22, 0x04	; 4
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_enu_SetPinValue>
     4ac:	40 e0       	ldi	r20, 0x00	; 0
     4ae:	62 e0       	ldi	r22, 0x02	; 2
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_enu_SetPinState>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <NOKIA5110_enu_Initialization+0x6e>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <NOKIA5110_enu_Initialization+0x70>
     4ba:	41 e0       	ldi	r20, 0x01	; 1
     4bc:	62 e0       	ldi	r22, 0x02	; 2
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 46 04 	call	0x88c	; 0x88c <DIO_enu_SetPinState>
     4c4:	be 01       	movw	r22, r28
     4c6:	6f 5f       	subi	r22, 0xFF	; 255
     4c8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	0e 94 64 00 	call	0xc8	; 0xc8 <enu_GenerateFrame>
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <enu_PassByteToSPI>
     4d6:	be 01       	movw	r22, r28
     4d8:	6f 5f       	subi	r22, 0xFF	; 255
     4da:	7f 4f       	sbci	r23, 0xFF	; 255
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	0e 94 64 00 	call	0xc8	; 0xc8 <enu_GenerateFrame>
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <enu_PassByteToSPI>
     4e8:	00 e6       	ldi	r16, 0x60	; 96
     4ea:	10 e0       	ldi	r17, 0x00	; 0
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	f8 01       	movw	r30, r16
     4f0:	82 83       	std	Z+2, r24	; 0x02
     4f2:	be 01       	movw	r22, r28
     4f4:	6f 5f       	subi	r22, 0xFF	; 255
     4f6:	7f 4f       	sbci	r23, 0xFF	; 255
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0e 94 64 00 	call	0xc8	; 0xc8 <enu_GenerateFrame>
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <enu_PassByteToSPI>
     504:	be 01       	movw	r22, r28
     506:	6f 5f       	subi	r22, 0xFF	; 255
     508:	7f 4f       	sbci	r23, 0xFF	; 255
     50a:	84 e0       	ldi	r24, 0x04	; 4
     50c:	0e 94 64 00 	call	0xc8	; 0xc8 <enu_GenerateFrame>
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <enu_PassByteToSPI>
     516:	be 01       	movw	r22, r28
     518:	6f 5f       	subi	r22, 0xFF	; 255
     51a:	7f 4f       	sbci	r23, 0xFF	; 255
     51c:	85 e0       	ldi	r24, 0x05	; 5
     51e:	0e 94 64 00 	call	0xc8	; 0xc8 <enu_GenerateFrame>
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <enu_PassByteToSPI>
     528:	be 01       	movw	r22, r28
     52a:	6f 5f       	subi	r22, 0xFF	; 255
     52c:	7f 4f       	sbci	r23, 0xFF	; 255
     52e:	86 e0       	ldi	r24, 0x06	; 6
     530:	0e 94 64 00 	call	0xc8	; 0xc8 <enu_GenerateFrame>
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <enu_PassByteToSPI>
     53a:	f8 01       	movw	r30, r16
     53c:	12 82       	std	Z+2, r1	; 0x02
     53e:	be 01       	movw	r22, r28
     540:	6f 5f       	subi	r22, 0xFF	; 255
     542:	7f 4f       	sbci	r23, 0xFF	; 255
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	0e 94 64 00 	call	0xc8	; 0xc8 <enu_GenerateFrame>
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <enu_PassByteToSPI>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	0f 90       	pop	r0
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	08 95       	ret

0000055e <NOKIA5110_enu_DrawNumber>:
 * @param Copy_u8_Xstart y - coordinate of the top left corner for the first digit
 * @param Copy_u8_Colour Colour
 * @return ErrorState_t 
 */
extern ErrorState_t NOKIA5110_enu_DrawNumber(f32 Copy_f32_Number, u8 Copy_u8_Ystart, u8 Copy_u8_Xstart, u8 Copy_u8_Colour)
{
     55e:	4f 92       	push	r4
     560:	5f 92       	push	r5
     562:	6f 92       	push	r6
     564:	7f 92       	push	r7
     566:	9f 92       	push	r9
     568:	af 92       	push	r10
     56a:	bf 92       	push	r11
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	2a 97       	sbiw	r28, 0x0a	; 10
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	2b 01       	movw	r4, r22
     58e:	3c 01       	movw	r6, r24
     590:	a4 2e       	mov	r10, r20
     592:	b2 2e       	mov	r11, r18
    u8 Local_u8_x = 0, Local_u8_y = 0;

    //Temps
    u32 Local_u32_TempVariable = 0;

    Local_u8_Validation = (Copy_u8_Ystart >= NOKIA5110_Y_COORDINATE_MIN && Copy_u8_Ystart <= NOKIA5110_Y_COORDINATE_MAX) && (Copy_u8_Xstart >= NOKIA5110_X_COORDINATE_MIN && Copy_u8_Xstart <= NOKIA5110_X_COORDINATE_MAX) && (Copy_u8_Colour == NOKIA5110_BLACK_COLOUR || Copy_u8_Colour == NOKIA5110_WHITE_COLOUR);
     594:	8f e2       	ldi	r24, 0x2F	; 47
     596:	84 17       	cp	r24, r20
     598:	38 f0       	brcs	.+14     	; 0x5a8 <NOKIA5110_enu_DrawNumber+0x4a>
     59a:	93 e5       	ldi	r25, 0x53	; 83
     59c:	92 17       	cp	r25, r18
     59e:	30 f0       	brcs	.+12     	; 0x5ac <NOKIA5110_enu_DrawNumber+0x4e>
     5a0:	02 30       	cpi	r16, 0x02	; 2
     5a2:	30 f0       	brcs	.+12     	; 0x5b0 <NOKIA5110_enu_DrawNumber+0x52>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <NOKIA5110_enu_DrawNumber+0x54>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <NOKIA5110_enu_DrawNumber+0x54>
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <NOKIA5110_enu_DrawNumber+0x54>
     5b0:	81 e0       	ldi	r24, 0x01	; 1

    if(Local_u8_Validation)
     5b2:	88 23       	and	r24, r24
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <NOKIA5110_enu_DrawNumber+0x5a>
     5b6:	d9 c0       	rjmp	.+434    	; 0x76a <NOKIA5110_enu_DrawNumber+0x20c>
    {
        u8 Local_au8_PrintingArray[NOKIA5110_MAX_DIGITS]= {0}; //Printing array
     5b8:	fe 01       	movw	r30, r28
     5ba:	31 96       	adiw	r30, 0x01	; 1
     5bc:	8a e0       	ldi	r24, 0x0A	; 10
     5be:	df 01       	movw	r26, r30
     5c0:	1d 92       	st	X+, r1
     5c2:	8a 95       	dec	r24
     5c4:	e9 f7       	brne	.-6      	; 0x5c0 <NOKIA5110_enu_DrawNumber+0x62>

        //Checking wether the number is negative
        if(Copy_f32_Number < 0)
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	a9 01       	movw	r20, r18
     5cc:	c3 01       	movw	r24, r6
     5ce:	b2 01       	movw	r22, r4
     5d0:	0e 94 87 07 	call	0xf0e	; 0xf0e <__cmpsf2>
     5d4:	88 23       	and	r24, r24
     5d6:	3c f4       	brge	.+14     	; 0x5e6 <NOKIA5110_enu_DrawNumber+0x88>
        {
            Local_u8_NegativeNumberFlag = True; //Raises Flag

            Copy_f32_Number *= -1; //Getting rid of egative sign
     5d8:	77 fa       	bst	r7, 7
     5da:	70 94       	com	r7
     5dc:	77 f8       	bld	r7, 7
     5de:	70 94       	com	r7
        u8 Local_au8_PrintingArray[NOKIA5110_MAX_DIGITS]= {0}; //Printing array

        //Checking wether the number is negative
        if(Copy_f32_Number < 0)
        {
            Local_u8_NegativeNumberFlag = True; //Raises Flag
     5e0:	99 24       	eor	r9, r9
     5e2:	93 94       	inc	r9
     5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <NOKIA5110_enu_DrawNumber+0x8a>
extern ErrorState_t NOKIA5110_enu_DrawNumber(f32 Copy_f32_Number, u8 Copy_u8_Ystart, u8 Copy_u8_Xstart, u8 Copy_u8_Colour)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    //Flags
    u8 Local_u8_Validation = False, Local_u8_NegativeNumberFlag = False;
     5e6:	91 2c       	mov	r9, r1

            Copy_f32_Number *= -1; //Getting rid of egative sign
        }

        //Separating Whole and Decimal digits
        Local_u32_PreDecimalPoint = Copy_f32_Number;
     5e8:	c3 01       	movw	r24, r6
     5ea:	b2 01       	movw	r22, r4
     5ec:	0e 94 8c 07 	call	0xf18	; 0xf18 <__fixunssfsi>
     5f0:	6b 01       	movw	r12, r22
     5f2:	7c 01       	movw	r14, r24
        Local_f32_PostDecimalPoint = Copy_f32_Number - (f32)Local_u32_PreDecimalPoint;
     5f4:	0e 94 bb 07 	call	0xf76	; 0xf76 <__floatunsisf>
     5f8:	9b 01       	movw	r18, r22
     5fa:	ac 01       	movw	r20, r24
     5fc:	c3 01       	movw	r24, r6
     5fe:	b2 01       	movw	r22, r4
     600:	0e 94 1a 07 	call	0xe34	; 0xe34 <__subsf3>
     604:	2b 01       	movw	r4, r22
     606:	3c 01       	movw	r6, r24


        //Placing the Pre-Decimal point digits in the array
        Local_u8_Counter1 = 0; 
     608:	10 e0       	ldi	r17, 0x00	; 0
        do
        {
            Local_au8_PrintingArray[Local_u8_Counter1] = (Local_u32_PreDecimalPoint % 10) + 48; //Placing last digit and in the array
     60a:	c7 01       	movw	r24, r14
     60c:	b6 01       	movw	r22, r12
     60e:	2a e0       	ldi	r18, 0x0A	; 10
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__udivmodsi4>
     61a:	e1 e0       	ldi	r30, 0x01	; 1
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	ec 0f       	add	r30, r28
     620:	fd 1f       	adc	r31, r29
     622:	e1 0f       	add	r30, r17
     624:	f1 1d       	adc	r31, r1
     626:	60 5d       	subi	r22, 0xD0	; 208
     628:	60 83       	st	Z, r22

            Local_u32_PreDecimalPoint /= 10; //Erasing the last digit
     62a:	c2 2e       	mov	r12, r18
     62c:	d3 2e       	mov	r13, r19
     62e:	e4 2e       	mov	r14, r20
     630:	f5 2e       	mov	r15, r21

            Local_u8_Counter1++;
     632:	1f 5f       	subi	r17, 0xFF	; 255

        }while (Local_u32_PreDecimalPoint);
     634:	c1 14       	cp	r12, r1
     636:	d1 04       	cpc	r13, r1
     638:	e1 04       	cpc	r14, r1
     63a:	f1 04       	cpc	r15, r1
     63c:	31 f7       	brne	.-52     	; 0x60a <NOKIA5110_enu_DrawNumber+0xac>


        //Placing the Pre-Decimal point digits in the array
        if(Local_f32_PostDecimalPoint) //If there are Post-Decimal point digits
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	a9 01       	movw	r20, r18
     644:	c3 01       	movw	r24, r6
     646:	b2 01       	movw	r22, r4
     648:	0e 94 87 07 	call	0xf0e	; 0xf0e <__cmpsf2>
     64c:	81 11       	cpse	r24, r1
     64e:	40 c0       	rjmp	.+128    	; 0x6d0 <NOKIA5110_enu_DrawNumber+0x172>
    //Variables
    u32 Local_u32_PreDecimalPoint = 0;  //Contains whole digits
    f32 Local_f32_PostDecimalPoint = 0; //Contains decimal digits

    //Counters
    u8 Local_u8_Counter1 = 0, Local_u8_Counter2 = 0, Local_u8_Counter3 = 0, Local_u8_Counter4 = 0;
     650:	f1 2c       	mov	r15, r1
     652:	4c c0       	rjmp	.+152    	; 0x6ec <NOKIA5110_enu_DrawNumber+0x18e>

            Local_u8_Counter3 = 0; //To count the number of decimals
            while (Local_f32_PostDecimalPoint && !(Local_u8_Counter3 == NOKIA5110_FLOAT_POINTS))
            {
                // ex: .145
                Local_f32_PostDecimalPoint *= 10; //1.45, 4.5
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	40 e2       	ldi	r20, 0x20	; 32
     65a:	51 e4       	ldi	r21, 0x41	; 65
     65c:	c3 01       	movw	r24, r6
     65e:	b2 01       	movw	r22, r4
     660:	0e 94 6d 08 	call	0x10da	; 0x10da <__mulsf3>
     664:	2b 01       	movw	r4, r22
     666:	3c 01       	movw	r6, r24

                Local_u32_TempVariable = Local_f32_PostDecimalPoint; //1, 4
     668:	0e 94 8c 07 	call	0xf18	; 0xf18 <__fixunssfsi>

                Local_au8_PrintingArray[Local_u8_Counter2] = (Local_u32_TempVariable + 48); //1, 4
     66c:	e1 e0       	ldi	r30, 0x01	; 1
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	ec 0f       	add	r30, r28
     672:	fd 1f       	adc	r31, r29
     674:	ef 0d       	add	r30, r15
     676:	f1 1d       	adc	r31, r1
     678:	20 e3       	ldi	r18, 0x30	; 48
     67a:	26 0f       	add	r18, r22
     67c:	20 83       	st	Z, r18

                Local_f32_PostDecimalPoint -= Local_u32_TempVariable; //.45, .5
     67e:	0e 94 bb 07 	call	0xf76	; 0xf76 <__floatunsisf>
     682:	9b 01       	movw	r18, r22
     684:	ac 01       	movw	r20, r24
     686:	c3 01       	movw	r24, r6
     688:	b2 01       	movw	r22, r4
     68a:	0e 94 1a 07 	call	0xe34	; 0xe34 <__subsf3>
     68e:	2b 01       	movw	r4, r22
     690:	3c 01       	movw	r6, r24

                //Incrementing Counters
                Local_u8_Counter2++;                
     692:	f3 94       	inc	r15
                Local_u8_Counter3++;  
     694:	e3 94       	inc	r14

                //Rounding the number
                if(Local_u8_Counter3 == NOKIA5110_FLOAT_POINTS)
     696:	b2 e0       	ldi	r27, 0x02	; 2
     698:	eb 12       	cpse	r14, r27
     69a:	1c c0       	rjmp	.+56     	; 0x6d4 <NOKIA5110_enu_DrawNumber+0x176>
                {     
                    Local_u32_TempVariable = Local_f32_PostDecimalPoint*10; //5
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 e2       	ldi	r20, 0x20	; 32
     6a2:	51 e4       	ldi	r21, 0x41	; 65
     6a4:	0e 94 6d 08 	call	0x10da	; 0x10da <__mulsf3>
     6a8:	0e 94 8c 07 	call	0xf18	; 0xf18 <__fixunssfsi>

                    if(Local_u32_TempVariable >= 5)
     6ac:	65 30       	cpi	r22, 0x05	; 5
     6ae:	71 05       	cpc	r23, r1
     6b0:	81 05       	cpc	r24, r1
     6b2:	91 05       	cpc	r25, r1
     6b4:	78 f0       	brcs	.+30     	; 0x6d4 <NOKIA5110_enu_DrawNumber+0x176>
                    {
                        Local_au8_PrintingArray[Local_u8_Counter2 - 1]++; //Rounding the digit
     6b6:	ef 2d       	mov	r30, r15
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	31 97       	sbiw	r30, 0x01	; 1
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	8c 0f       	add	r24, r28
     6c2:	9d 1f       	adc	r25, r29
     6c4:	e8 0f       	add	r30, r24
     6c6:	f9 1f       	adc	r31, r25
     6c8:	80 81       	ld	r24, Z
     6ca:	8f 5f       	subi	r24, 0xFF	; 255
     6cc:	80 83       	st	Z, r24
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <NOKIA5110_enu_DrawNumber+0x176>
     6d0:	f1 2e       	mov	r15, r17
     6d2:	e1 2c       	mov	r14, r1
        if(Local_f32_PostDecimalPoint) //If there are Post-Decimal point digits
        {
            Local_u8_Counter2 = Local_u8_Counter1;

            Local_u8_Counter3 = 0; //To count the number of decimals
            while (Local_f32_PostDecimalPoint && !(Local_u8_Counter3 == NOKIA5110_FLOAT_POINTS))
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	a9 01       	movw	r20, r18
     6da:	c3 01       	movw	r24, r6
     6dc:	b2 01       	movw	r22, r4
     6de:	0e 94 87 07 	call	0xf0e	; 0xf0e <__cmpsf2>
     6e2:	88 23       	and	r24, r24
     6e4:	19 f0       	breq	.+6      	; 0x6ec <NOKIA5110_enu_DrawNumber+0x18e>
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	e9 12       	cpse	r14, r25
     6ea:	b4 cf       	rjmp	.-152    	; 0x654 <NOKIA5110_enu_DrawNumber+0xf6>


        //Printing Array
        Local_u8_y = Copy_u8_Ystart;
        Local_u8_x = Copy_u8_Xstart;
        if(Local_u8_NegativeNumberFlag)
     6ec:	99 20       	and	r9, r9
     6ee:	41 f0       	breq	.+16     	; 0x700 <NOKIA5110_enu_DrawNumber+0x1a2>
        {
            enu_DrawASCII('-',Local_u8_y, Local_u8_x, Copy_u8_Colour); //Printing Negative Sign
     6f0:	20 2f       	mov	r18, r16
     6f2:	4b 2d       	mov	r20, r11
     6f4:	6a 2d       	mov	r22, r10
     6f6:	8d e2       	ldi	r24, 0x2D	; 45
     6f8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <enu_DrawASCII>
                
            //Incrementing to the next character
            Local_u8_x += 6; 
     6fc:	a6 e0       	ldi	r26, 0x06	; 6
     6fe:	ba 0e       	add	r11, r26
    //Variables
    u32 Local_u32_PreDecimalPoint = 0;  //Contains whole digits
    f32 Local_f32_PostDecimalPoint = 0; //Contains decimal digits

    //Counters
    u8 Local_u8_Counter1 = 0, Local_u8_Counter2 = 0, Local_u8_Counter3 = 0, Local_u8_Counter4 = 0;
     700:	e1 2e       	mov	r14, r17
     702:	12 c0       	rjmp	.+36     	; 0x728 <NOKIA5110_enu_DrawNumber+0x1ca>
        }


        for(Local_u8_Counter4 = Local_u8_Counter1; Local_u8_Counter4 >= 1; Local_u8_Counter4--)//Whole digits
        {
            enu_DrawASCII(Local_au8_PrintingArray[Local_u8_Counter4 - 1], Local_u8_y, Local_u8_x, Copy_u8_Colour); 
     704:	ee 2d       	mov	r30, r14
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	8c 0f       	add	r24, r28
     710:	9d 1f       	adc	r25, r29
     712:	e8 0f       	add	r30, r24
     714:	f9 1f       	adc	r31, r25
     716:	20 2f       	mov	r18, r16
     718:	4b 2d       	mov	r20, r11
     71a:	6a 2d       	mov	r22, r10
     71c:	80 81       	ld	r24, Z
     71e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <enu_DrawASCII>
            
            //Incrementing to the next character
            Local_u8_x += 6; 
     722:	96 e0       	ldi	r25, 0x06	; 6
     724:	b9 0e       	add	r11, r25
            Local_u8_x += 6; 
            
        }


        for(Local_u8_Counter4 = Local_u8_Counter1; Local_u8_Counter4 >= 1; Local_u8_Counter4--)//Whole digits
     726:	ea 94       	dec	r14
     728:	e1 10       	cpse	r14, r1
     72a:	ec cf       	rjmp	.-40     	; 0x704 <NOKIA5110_enu_DrawNumber+0x1a6>
            //Incrementing to the next character
            Local_u8_x += 6; 
            
        }

        Local_u8_x -= 1; 
     72c:	4f ef       	ldi	r20, 0xFF	; 255
     72e:	4b 0d       	add	r20, r11
        if(Local_u8_Counter2 != 0) //there are decimals
     730:	ff 20       	and	r15, r15
     732:	c9 f0       	breq	.+50     	; 0x766 <NOKIA5110_enu_DrawNumber+0x208>
        {
            enu_DrawASCII('.', Local_u8_y, Local_u8_x, Copy_u8_Colour); //Printing Decimal Point
     734:	20 2f       	mov	r18, r16
     736:	6a 2d       	mov	r22, r10
     738:	8e e2       	ldi	r24, 0x2E	; 46
     73a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <enu_DrawASCII>

            Local_u8_x += 5;
     73e:	a4 e0       	ldi	r26, 0x04	; 4
     740:	ba 0e       	add	r11, r26

            for(Local_u8_Counter4 = Local_u8_Counter1; Local_u8_Counter4 < Local_u8_Counter2; Local_u8_Counter4++)//Decimal Digits
     742:	0f c0       	rjmp	.+30     	; 0x762 <NOKIA5110_enu_DrawNumber+0x204>
            {
                enu_DrawASCII(Local_au8_PrintingArray[Local_u8_Counter4], Local_u8_y, Local_u8_x, Copy_u8_Colour); //Printing whole digits
     744:	e1 e0       	ldi	r30, 0x01	; 1
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	ec 0f       	add	r30, r28
     74a:	fd 1f       	adc	r31, r29
     74c:	e1 0f       	add	r30, r17
     74e:	f1 1d       	adc	r31, r1
     750:	20 2f       	mov	r18, r16
     752:	4b 2d       	mov	r20, r11
     754:	6a 2d       	mov	r22, r10
     756:	80 81       	ld	r24, Z
     758:	0e 94 e6 01 	call	0x3cc	; 0x3cc <enu_DrawASCII>
                
                //Incrementing to the next character
                Local_u8_x += 6; 
     75c:	b6 e0       	ldi	r27, 0x06	; 6
     75e:	bb 0e       	add	r11, r27
        {
            enu_DrawASCII('.', Local_u8_y, Local_u8_x, Copy_u8_Colour); //Printing Decimal Point

            Local_u8_x += 5;

            for(Local_u8_Counter4 = Local_u8_Counter1; Local_u8_Counter4 < Local_u8_Counter2; Local_u8_Counter4++)//Decimal Digits
     760:	1f 5f       	subi	r17, 0xFF	; 255
     762:	1f 15       	cp	r17, r15
     764:	78 f3       	brcs	.-34     	; 0x744 <NOKIA5110_enu_DrawNumber+0x1e6>
                Local_u8_x += 6; 
            }
            
        }
 
        Local_u8_ErrorFlag = ES_OK;
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	01 c0       	rjmp	.+2      	; 0x76c <NOKIA5110_enu_DrawNumber+0x20e>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     76a:	82 e0       	ldi	r24, 0x02	; 2
    }


    return Local_u8_ErrorFlag;
}
     76c:	2a 96       	adiw	r28, 0x0a	; 10
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	bf 90       	pop	r11
     78a:	af 90       	pop	r10
     78c:	9f 90       	pop	r9
     78e:	7f 90       	pop	r7
     790:	6f 90       	pop	r6
     792:	5f 90       	pop	r5
     794:	4f 90       	pop	r4
     796:	08 95       	ret

00000798 <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
     798:	84 30       	cpi	r24, 0x04	; 4
     79a:	08 f0       	brcs	.+2      	; 0x79e <DIO_enu_SetPinDiretion+0x6>
     79c:	6f c0       	rjmp	.+222    	; 0x87c <__stack+0x1d>
     79e:	68 30       	cpi	r22, 0x08	; 8
     7a0:	08 f0       	brcs	.+2      	; 0x7a4 <DIO_enu_SetPinDiretion+0xc>
     7a2:	6e c0       	rjmp	.+220    	; 0x880 <__stack+0x21>
     7a4:	42 30       	cpi	r20, 0x02	; 2
     7a6:	08 f0       	brcs	.+2      	; 0x7aa <DIO_enu_SetPinDiretion+0x12>
     7a8:	6d c0       	rjmp	.+218    	; 0x884 <__stack+0x25>
    {
        switch (Copy_u8_PinGroup)
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	f9 f0       	breq	.+62     	; 0x7ec <DIO_enu_SetPinDiretion+0x54>
     7ae:	30 f0       	brcs	.+12     	; 0x7bc <DIO_enu_SetPinDiretion+0x24>
     7b0:	82 30       	cpi	r24, 0x02	; 2
     7b2:	a1 f1       	breq	.+104    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7b4:	83 30       	cpi	r24, 0x03	; 3
     7b6:	09 f4       	brne	.+2      	; 0x7ba <DIO_enu_SetPinDiretion+0x22>
     7b8:	49 c0       	rjmp	.+146    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     7ba:	66 c0       	rjmp	.+204    	; 0x888 <__stack+0x29>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
     7bc:	2a b3       	in	r18, 0x1a	; 26
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	06 2e       	mov	r0, r22
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_enu_SetPinDiretion+0x32>
     7c6:	88 0f       	add	r24, r24
     7c8:	99 1f       	adc	r25, r25
     7ca:	0a 94       	dec	r0
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_enu_SetPinDiretion+0x2e>
     7ce:	80 95       	com	r24
     7d0:	82 23       	and	r24, r18
     7d2:	8a bb       	out	0x1a, r24	; 26
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
     7d4:	2a b3       	in	r18, 0x1a	; 26
     7d6:	84 2f       	mov	r24, r20
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <DIO_enu_SetPinDiretion+0x48>
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	6a 95       	dec	r22
     7e2:	e2 f7       	brpl	.-8      	; 0x7dc <DIO_enu_SetPinDiretion+0x44>
     7e4:	82 2b       	or	r24, r18
     7e6:	8a bb       	out	0x1a, r24	; 26

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     7e8:	80 e0       	ldi	r24, 0x00	; 0

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
            break;
     7ea:	08 95       	ret

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
     7ec:	87 b3       	in	r24, 0x17	; 23
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	06 2e       	mov	r0, r22
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <DIO_enu_SetPinDiretion+0x62>
     7f6:	22 0f       	add	r18, r18
     7f8:	33 1f       	adc	r19, r19
     7fa:	0a 94       	dec	r0
     7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <DIO_enu_SetPinDiretion+0x5e>
     7fe:	20 95       	com	r18
     800:	28 23       	and	r18, r24
     802:	27 bb       	out	0x17, r18	; 23
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
     804:	27 b3       	in	r18, 0x17	; 23
     806:	84 2f       	mov	r24, r20
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	6a 95       	dec	r22
     812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     814:	82 2b       	or	r24, r18
     816:	87 bb       	out	0x17, r24	; 23

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     818:	80 e0       	ldi	r24, 0x00	; 0
            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
            break;
     81a:	08 95       	ret

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
     81c:	84 b3       	in	r24, 0x14	; 20
     81e:	21 e0       	ldi	r18, 0x01	; 1
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	06 2e       	mov	r0, r22
     824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     826:	22 0f       	add	r18, r18
     828:	33 1f       	adc	r19, r19
     82a:	0a 94       	dec	r0
     82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     82e:	20 95       	com	r18
     830:	28 23       	and	r18, r24
     832:	24 bb       	out	0x14, r18	; 20
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
     834:	24 b3       	in	r18, 0x14	; 20
     836:	84 2f       	mov	r24, r20
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	6a 95       	dec	r22
     842:	e2 f7       	brpl	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     844:	82 2b       	or	r24, r18
     846:	84 bb       	out	0x14, r24	; 20

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     848:	80 e0       	ldi	r24, 0x00	; 0
            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
            break;
     84a:	08 95       	ret

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
     84c:	81 b3       	in	r24, 0x11	; 17
     84e:	21 e0       	ldi	r18, 0x01	; 1
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	06 2e       	mov	r0, r22
     854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     856:	22 0f       	add	r18, r18
     858:	33 1f       	adc	r19, r19
     85a:	0a 94       	dec	r0
     85c:	e2 f7       	brpl	.-8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     85e:	20 95       	com	r18
     860:	28 23       	and	r18, r24
     862:	21 bb       	out	0x11, r18	; 17
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
     864:	21 b3       	in	r18, 0x11	; 17
     866:	84 2f       	mov	r24, r20
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	6a 95       	dec	r22
     872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
     874:	82 2b       	or	r24, r18
     876:	81 bb       	out	0x11, r24	; 17

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     878:	80 e0       	ldi	r24, 0x00	; 0
            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
            break;
     87a:	08 95       	ret
        Local_u8_ErrorFlag = ES_OK;

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	08 95       	ret
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	08 95       	ret
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	08 95       	ret

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     888:	80 e0       	ldi	r24, 0x00	; 0
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
     88a:	08 95       	ret

0000088c <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
     88c:	84 30       	cpi	r24, 0x04	; 4
     88e:	08 f0       	brcs	.+2      	; 0x892 <DIO_enu_SetPinState+0x6>
     890:	6f c0       	rjmp	.+222    	; 0x970 <DIO_enu_SetPinState+0xe4>
     892:	68 30       	cpi	r22, 0x08	; 8
     894:	08 f0       	brcs	.+2      	; 0x898 <DIO_enu_SetPinState+0xc>
     896:	6e c0       	rjmp	.+220    	; 0x974 <DIO_enu_SetPinState+0xe8>
     898:	42 30       	cpi	r20, 0x02	; 2
     89a:	08 f0       	brcs	.+2      	; 0x89e <DIO_enu_SetPinState+0x12>
     89c:	6d c0       	rjmp	.+218    	; 0x978 <DIO_enu_SetPinState+0xec>
    {
        switch (Copy_u8_PinGroup)
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	f9 f0       	breq	.+62     	; 0x8e0 <DIO_enu_SetPinState+0x54>
     8a2:	30 f0       	brcs	.+12     	; 0x8b0 <DIO_enu_SetPinState+0x24>
     8a4:	82 30       	cpi	r24, 0x02	; 2
     8a6:	a1 f1       	breq	.+104    	; 0x910 <DIO_enu_SetPinState+0x84>
     8a8:	83 30       	cpi	r24, 0x03	; 3
     8aa:	09 f4       	brne	.+2      	; 0x8ae <DIO_enu_SetPinState+0x22>
     8ac:	49 c0       	rjmp	.+146    	; 0x940 <DIO_enu_SetPinState+0xb4>
     8ae:	66 c0       	rjmp	.+204    	; 0x97c <DIO_enu_SetPinState+0xf0>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
     8b0:	2b b3       	in	r18, 0x1b	; 27
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	06 2e       	mov	r0, r22
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <DIO_enu_SetPinState+0x32>
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	0a 94       	dec	r0
     8c0:	e2 f7       	brpl	.-8      	; 0x8ba <DIO_enu_SetPinState+0x2e>
     8c2:	80 95       	com	r24
     8c4:	82 23       	and	r24, r18
     8c6:	8b bb       	out	0x1b, r24	; 27
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     8c8:	2b b3       	in	r18, 0x1b	; 27
     8ca:	84 2f       	mov	r24, r20
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <DIO_enu_SetPinState+0x48>
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	6a 95       	dec	r22
     8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <DIO_enu_SetPinState+0x44>
     8d8:	82 2b       	or	r24, r18
     8da:	8b bb       	out	0x1b, r24	; 27

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
        switch (Copy_u8_PinGroup)
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
     8de:	08 95       	ret

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
     8e0:	88 b3       	in	r24, 0x18	; 24
     8e2:	21 e0       	ldi	r18, 0x01	; 1
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	06 2e       	mov	r0, r22
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <DIO_enu_SetPinState+0x62>
     8ea:	22 0f       	add	r18, r18
     8ec:	33 1f       	adc	r19, r19
     8ee:	0a 94       	dec	r0
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <DIO_enu_SetPinState+0x5e>
     8f2:	20 95       	com	r18
     8f4:	28 23       	and	r18, r24
     8f6:	28 bb       	out	0x18, r18	; 24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     8f8:	28 b3       	in	r18, 0x18	; 24
     8fa:	84 2f       	mov	r24, r20
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <DIO_enu_SetPinState+0x78>
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	6a 95       	dec	r22
     906:	e2 f7       	brpl	.-8      	; 0x900 <DIO_enu_SetPinState+0x74>
     908:	82 2b       	or	r24, r18
     90a:	88 bb       	out	0x18, r24	; 24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     90c:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
     90e:	08 95       	ret

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
     910:	85 b3       	in	r24, 0x15	; 21
     912:	21 e0       	ldi	r18, 0x01	; 1
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	06 2e       	mov	r0, r22
     918:	02 c0       	rjmp	.+4      	; 0x91e <DIO_enu_SetPinState+0x92>
     91a:	22 0f       	add	r18, r18
     91c:	33 1f       	adc	r19, r19
     91e:	0a 94       	dec	r0
     920:	e2 f7       	brpl	.-8      	; 0x91a <DIO_enu_SetPinState+0x8e>
     922:	20 95       	com	r18
     924:	28 23       	and	r18, r24
     926:	25 bb       	out	0x15, r18	; 21
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     928:	25 b3       	in	r18, 0x15	; 21
     92a:	84 2f       	mov	r24, r20
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	02 c0       	rjmp	.+4      	; 0x934 <DIO_enu_SetPinState+0xa8>
     930:	88 0f       	add	r24, r24
     932:	99 1f       	adc	r25, r25
     934:	6a 95       	dec	r22
     936:	e2 f7       	brpl	.-8      	; 0x930 <DIO_enu_SetPinState+0xa4>
     938:	82 2b       	or	r24, r18
     93a:	85 bb       	out	0x15, r24	; 21

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     93c:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
     93e:	08 95       	ret

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
     940:	82 b3       	in	r24, 0x12	; 18
     942:	21 e0       	ldi	r18, 0x01	; 1
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	06 2e       	mov	r0, r22
     948:	02 c0       	rjmp	.+4      	; 0x94e <DIO_enu_SetPinState+0xc2>
     94a:	22 0f       	add	r18, r18
     94c:	33 1f       	adc	r19, r19
     94e:	0a 94       	dec	r0
     950:	e2 f7       	brpl	.-8      	; 0x94a <DIO_enu_SetPinState+0xbe>
     952:	20 95       	com	r18
     954:	28 23       	and	r18, r24
     956:	22 bb       	out	0x12, r18	; 18
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     958:	22 b3       	in	r18, 0x12	; 18
     95a:	84 2f       	mov	r24, r20
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	02 c0       	rjmp	.+4      	; 0x964 <DIO_enu_SetPinState+0xd8>
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	6a 95       	dec	r22
     966:	e2 f7       	brpl	.-8      	; 0x960 <DIO_enu_SetPinState+0xd4>
     968:	82 2b       	or	r24, r18
     96a:	82 bb       	out	0x12, r24	; 18

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     96c:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
     96e:	08 95       	ret

        Local_u8_ErrorFlag = ES_OK;
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	08 95       	ret
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	08 95       	ret
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	08 95       	ret

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     97c:	80 e0       	ldi	r24, 0x00	; 0
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
     97e:	08 95       	ret

00000980 <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	08 f0       	brcs	.+2      	; 0x986 <DIO_enu_SetPinValue+0x6>
     984:	7b c0       	rjmp	.+246    	; 0xa7c <DIO_enu_SetPinValue+0xfc>
     986:	68 30       	cpi	r22, 0x08	; 8
     988:	08 f0       	brcs	.+2      	; 0x98c <DIO_enu_SetPinValue+0xc>
     98a:	7a c0       	rjmp	.+244    	; 0xa80 <DIO_enu_SetPinValue+0x100>
     98c:	42 30       	cpi	r20, 0x02	; 2
     98e:	08 f0       	brcs	.+2      	; 0x992 <DIO_enu_SetPinValue+0x12>
     990:	79 c0       	rjmp	.+242    	; 0xa84 <DIO_enu_SetPinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	11 f1       	breq	.+68     	; 0x9da <DIO_enu_SetPinValue+0x5a>
     996:	30 f0       	brcs	.+12     	; 0x9a4 <DIO_enu_SetPinValue+0x24>
     998:	82 30       	cpi	r24, 0x02	; 2
     99a:	d1 f1       	breq	.+116    	; 0xa10 <DIO_enu_SetPinValue+0x90>
     99c:	83 30       	cpi	r24, 0x03	; 3
     99e:	09 f4       	brne	.+2      	; 0x9a2 <DIO_enu_SetPinValue+0x22>
     9a0:	52 c0       	rjmp	.+164    	; 0xa46 <DIO_enu_SetPinValue+0xc6>
     9a2:	72 c0       	rjmp	.+228    	; 0xa88 <DIO_enu_SetPinValue+0x108>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
     9a4:	41 30       	cpi	r20, 0x01	; 1
     9a6:	61 f4       	brne	.+24     	; 0x9c0 <DIO_enu_SetPinValue+0x40>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
     9a8:	2b b3       	in	r18, 0x1b	; 27
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <DIO_enu_SetPinValue+0x34>
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	6a 95       	dec	r22
     9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <DIO_enu_SetPinValue+0x30>
     9b8:	82 2b       	or	r24, r18
     9ba:	8b bb       	out	0x1b, r24	; 27
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	08 95       	ret
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
     9c0:	2b b3       	in	r18, 0x1b	; 27
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_enu_SetPinValue+0x4c>
     9c8:	88 0f       	add	r24, r24
     9ca:	99 1f       	adc	r25, r25
     9cc:	6a 95       	dec	r22
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_enu_SetPinValue+0x48>
     9d0:	80 95       	com	r24
     9d2:	82 23       	and	r24, r18
     9d4:	8b bb       	out	0x1b, r24	; 27
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	08 95       	ret
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
     9da:	41 30       	cpi	r20, 0x01	; 1
     9dc:	61 f4       	brne	.+24     	; 0x9f6 <DIO_enu_SetPinValue+0x76>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
     9de:	28 b3       	in	r18, 0x18	; 24
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_enu_SetPinValue+0x6a>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	6a 95       	dec	r22
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_enu_SetPinValue+0x66>
     9ee:	82 2b       	or	r24, r18
     9f0:	88 bb       	out	0x18, r24	; 24
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	08 95       	ret
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
     9f6:	28 b3       	in	r18, 0x18	; 24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <DIO_enu_SetPinValue+0x82>
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	6a 95       	dec	r22
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <DIO_enu_SetPinValue+0x7e>
     a06:	80 95       	com	r24
     a08:	82 23       	and	r24, r18
     a0a:	88 bb       	out	0x18, r24	; 24
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	08 95       	ret
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
     a10:	41 30       	cpi	r20, 0x01	; 1
     a12:	61 f4       	brne	.+24     	; 0xa2c <DIO_enu_SetPinValue+0xac>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
     a14:	25 b3       	in	r18, 0x15	; 21
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <DIO_enu_SetPinValue+0xa0>
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	6a 95       	dec	r22
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <DIO_enu_SetPinValue+0x9c>
     a24:	82 2b       	or	r24, r18
     a26:	85 bb       	out	0x15, r24	; 21
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	08 95       	ret
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
     a2c:	25 b3       	in	r18, 0x15	; 21
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <DIO_enu_SetPinValue+0xb8>
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	6a 95       	dec	r22
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <DIO_enu_SetPinValue+0xb4>
     a3c:	80 95       	com	r24
     a3e:	82 23       	and	r24, r18
     a40:	85 bb       	out	0x15, r24	; 21
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	08 95       	ret
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
     a46:	41 30       	cpi	r20, 0x01	; 1
     a48:	61 f4       	brne	.+24     	; 0xa62 <DIO_enu_SetPinValue+0xe2>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
     a4a:	22 b3       	in	r18, 0x12	; 18
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <DIO_enu_SetPinValue+0xd6>
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	6a 95       	dec	r22
     a58:	e2 f7       	brpl	.-8      	; 0xa52 <DIO_enu_SetPinValue+0xd2>
     a5a:	82 2b       	or	r24, r18
     a5c:	82 bb       	out	0x12, r24	; 18
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	08 95       	ret
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
     a62:	22 b3       	in	r18, 0x12	; 18
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <DIO_enu_SetPinValue+0xee>
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	6a 95       	dec	r22
     a70:	e2 f7       	brpl	.-8      	; 0xa6a <DIO_enu_SetPinValue+0xea>
     a72:	80 95       	com	r24
     a74:	82 23       	and	r24, r18
     a76:	82 bb       	out	0x12, r24	; 18
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	08 95       	ret


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	08 95       	ret
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	08 95       	ret
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	08 95       	ret
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     a88:	80 e0       	ldi	r24, 0x00	; 0
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
     a8a:	08 95       	ret

00000a8c <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
     a96:	2f 93       	push	r18
     a98:	3f 93       	push	r19
     a9a:	4f 93       	push	r20
     a9c:	5f 93       	push	r21
     a9e:	6f 93       	push	r22
     aa0:	7f 93       	push	r23
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
     aa6:	af 93       	push	r26
     aa8:	bf 93       	push	r27
     aaa:	ef 93       	push	r30
     aac:	ff 93       	push	r31
    if(pfun_ISRPointers[EXTI_INT0])
     aae:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <pfun_ISRPointers>
     ab2:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <pfun_ISRPointers+0x1>
     ab6:	30 97       	sbiw	r30, 0x00	; 0
     ab8:	29 f0       	breq	.+10     	; 0xac4 <__vector_1+0x38>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
     aba:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <apvid_ISRParameters>
     abe:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <apvid_ISRParameters+0x1>
     ac2:	09 95       	icall
    }
}
     ac4:	ff 91       	pop	r31
     ac6:	ef 91       	pop	r30
     ac8:	bf 91       	pop	r27
     aca:	af 91       	pop	r26
     acc:	9f 91       	pop	r25
     ace:	8f 91       	pop	r24
     ad0:	7f 91       	pop	r23
     ad2:	6f 91       	pop	r22
     ad4:	5f 91       	pop	r21
     ad6:	4f 91       	pop	r20
     ad8:	3f 91       	pop	r19
     ada:	2f 91       	pop	r18
     adc:	0f 90       	pop	r0
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	0f 90       	pop	r0
     ae2:	1f 90       	pop	r1
     ae4:	18 95       	reti

00000ae6 <__vector_2>:
//INT1
void __vector_2 (void)
{
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	5f 93       	push	r21
     af8:	6f 93       	push	r22
     afa:	7f 93       	push	r23
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	ef 93       	push	r30
     b06:	ff 93       	push	r31
    if(pfun_ISRPointers[EXTI_INT1])
     b08:	e0 91 6a 07 	lds	r30, 0x076A	; 0x80076a <pfun_ISRPointers+0x2>
     b0c:	f0 91 6b 07 	lds	r31, 0x076B	; 0x80076b <pfun_ISRPointers+0x3>
     b10:	30 97       	sbiw	r30, 0x00	; 0
     b12:	29 f0       	breq	.+10     	; 0xb1e <__vector_2+0x38>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
     b14:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <apvid_ISRParameters+0x2>
     b18:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <apvid_ISRParameters+0x3>
     b1c:	09 95       	icall
    }
}
     b1e:	ff 91       	pop	r31
     b20:	ef 91       	pop	r30
     b22:	bf 91       	pop	r27
     b24:	af 91       	pop	r26
     b26:	9f 91       	pop	r25
     b28:	8f 91       	pop	r24
     b2a:	7f 91       	pop	r23
     b2c:	6f 91       	pop	r22
     b2e:	5f 91       	pop	r21
     b30:	4f 91       	pop	r20
     b32:	3f 91       	pop	r19
     b34:	2f 91       	pop	r18
     b36:	0f 90       	pop	r0
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	0f 90       	pop	r0
     b3c:	1f 90       	pop	r1
     b3e:	18 95       	reti

00000b40 <__vector_3>:
//INT2
void __vector_3 (void)
{
     b40:	1f 92       	push	r1
     b42:	0f 92       	push	r0
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	0f 92       	push	r0
     b48:	11 24       	eor	r1, r1
     b4a:	2f 93       	push	r18
     b4c:	3f 93       	push	r19
     b4e:	4f 93       	push	r20
     b50:	5f 93       	push	r21
     b52:	6f 93       	push	r22
     b54:	7f 93       	push	r23
     b56:	8f 93       	push	r24
     b58:	9f 93       	push	r25
     b5a:	af 93       	push	r26
     b5c:	bf 93       	push	r27
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
    if(pfun_ISRPointers[EXTI_INT2])
     b62:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <pfun_ISRPointers+0x4>
     b66:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <pfun_ISRPointers+0x5>
     b6a:	30 97       	sbiw	r30, 0x00	; 0
     b6c:	19 f0       	breq	.+6      	; 0xb74 <__vector_3+0x34>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	09 95       	icall
    }
    
}
     b74:	ff 91       	pop	r31
     b76:	ef 91       	pop	r30
     b78:	bf 91       	pop	r27
     b7a:	af 91       	pop	r26
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	7f 91       	pop	r23
     b82:	6f 91       	pop	r22
     b84:	5f 91       	pop	r21
     b86:	4f 91       	pop	r20
     b88:	3f 91       	pop	r19
     b8a:	2f 91       	pop	r18
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	0f 90       	pop	r0
     b92:	1f 90       	pop	r1
     b94:	18 95       	reti

00000b96 <SPI_enu_Initialization>:
            break;
        }
    }

    return Local_u8_ErrorFlag;
}
     b96:	8d b1       	in	r24, 0x0d	; 13
     b98:	80 61       	ori	r24, 0x10	; 16
     b9a:	8d b9       	out	0x0d, r24	; 13
     b9c:	8d b1       	in	r24, 0x0d	; 13
     b9e:	8c 7f       	andi	r24, 0xFC	; 252
     ba0:	8d b9       	out	0x0d, r24	; 13
     ba2:	8d b1       	in	r24, 0x0d	; 13
     ba4:	83 60       	ori	r24, 0x03	; 3
     ba6:	8d b9       	out	0x0d, r24	; 13
     ba8:	8e b1       	in	r24, 0x0e	; 14
     baa:	8e 7f       	andi	r24, 0xFE	; 254
     bac:	8e b9       	out	0x0e, r24	; 14
     bae:	8d b1       	in	r24, 0x0d	; 13
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	8d b9       	out	0x0d, r24	; 13
     bb4:	8d b1       	in	r24, 0x0d	; 13
     bb6:	87 7f       	andi	r24, 0xF7	; 247
     bb8:	8d b9       	out	0x0d, r24	; 13
     bba:	8d b1       	in	r24, 0x0d	; 13
     bbc:	8b 7f       	andi	r24, 0xFB	; 251
     bbe:	8d b9       	out	0x0d, r24	; 13
     bc0:	8d b1       	in	r24, 0x0d	; 13
     bc2:	8f 7d       	andi	r24, 0xDF	; 223
     bc4:	8d b9       	out	0x0d, r24	; 13
     bc6:	8d b1       	in	r24, 0x0d	; 13
     bc8:	80 64       	ori	r24, 0x40	; 64
     bca:	8d b9       	out	0x0d, r24	; 13
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	08 95       	ret

00000bd0 <SPI_enu_MasterSend>:
     bd0:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <LOC_u8_SPIState>
     bd4:	91 30       	cpi	r25, 0x01	; 1
     bd6:	71 f0       	breq	.+28     	; 0xbf4 <SPI_enu_MasterSend+0x24>
     bd8:	91 11       	cpse	r25, r1
     bda:	0e c0       	rjmp	.+28     	; 0xbf8 <SPI_enu_MasterSend+0x28>
     bdc:	8f b9       	out	0x0f, r24	; 15
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <LOC_u8_SPIState>
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <SPI_enu_MasterSend+0x18>
     be6:	8f b1       	in	r24, 0x0f	; 15
     be8:	77 9b       	sbis	0x0e, 7	; 14
     bea:	fd cf       	rjmp	.-6      	; 0xbe6 <SPI_enu_MasterSend+0x16>
     bec:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <LOC_u8_SPIState>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	08 95       	ret
     bf4:	84 e0       	ldi	r24, 0x04	; 4
     bf6:	08 95       	ret
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	08 95       	ret

00000bfc <SPI_enu_GetCommState>:
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	31 f0       	breq	.+12     	; 0xc0c <SPI_enu_GetCommState+0x10>
     c00:	20 91 6e 07 	lds	r18, 0x076E	; 0x80076e <LOC_u8_SPIState>
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	08 95       	ret
     c0c:	83 e0       	ldi	r24, 0x03	; 3
     c0e:	08 95       	ret

00000c10 <__vector_12>:

// ISR
void __vector_12 (void)__attribute__((signal));

void __vector_12 (void)
{
     c10:	1f 92       	push	r1
     c12:	0f 92       	push	r0
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	0f 92       	push	r0
     c18:	11 24       	eor	r1, r1
    #if SPI_ISR_STATUS == SPI_INTERNAL_ISR        
    
        #if SPI_MCU_MODE == SPI_MASTER_MODE
    
            if ((SPCR >> SPCR_MSTR) & 1) // Making sure the SPIF was rasied due to an SPI operation ending
     c1a:	6c 99       	sbic	0x0d, 4	; 13
            {
                LOC_u8_SPIState = SPI_FREE;
     c1c:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <LOC_u8_SPIState>
    #else
    
        #error SPI_EXTERNAL_ISR is invald
    
    #endif
}
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	1f 90       	pop	r1
     c28:	18 95       	reti

00000c2a <__vector_6>:
void __vector_7 (void)__attribute__((signal));
void __vector_8 (void)__attribute__((signal));
void __vector_9 (void)__attribute__((signal));

void __vector_6 (void)
{
     c2a:	1f 92       	push	r1
     c2c:	0f 92       	push	r0
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	0f 92       	push	r0
     c32:	11 24       	eor	r1, r1
     c34:	2f 93       	push	r18
     c36:	3f 93       	push	r19
     c38:	4f 93       	push	r20
     c3a:	5f 93       	push	r21
     c3c:	6f 93       	push	r22
     c3e:	7f 93       	push	r23
     c40:	8f 93       	push	r24
     c42:	9f 93       	push	r25
     c44:	af 93       	push	r26
     c46:	bf 93       	push	r27
     c48:	ef 93       	push	r30
     c4a:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CAPTURE_EVENT_ISR])
     c4c:	e0 91 77 07 	lds	r30, 0x0777	; 0x800777 <LOC_apfun_IntServiceRoutinesFunctions>
     c50:	f0 91 78 07 	lds	r31, 0x0778	; 0x800778 <LOC_apfun_IntServiceRoutinesFunctions+0x1>
     c54:	30 97       	sbiw	r30, 0x00	; 0
     c56:	29 f0       	breq	.+10     	; 0xc62 <__vector_6+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CAPTURE_EVENT_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CAPTURE_EVENT_ISR]);
     c58:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <LOC_apvid_IntServiceRoutinesParameters>
     c5c:	90 91 70 07 	lds	r25, 0x0770	; 0x800770 <LOC_apvid_IntServiceRoutinesParameters+0x1>
     c60:	09 95       	icall
    }
}
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	bf 91       	pop	r27
     c68:	af 91       	pop	r26
     c6a:	9f 91       	pop	r25
     c6c:	8f 91       	pop	r24
     c6e:	7f 91       	pop	r23
     c70:	6f 91       	pop	r22
     c72:	5f 91       	pop	r21
     c74:	4f 91       	pop	r20
     c76:	3f 91       	pop	r19
     c78:	2f 91       	pop	r18
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <__vector_7>:

void __vector_7 (void)
{
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	11 24       	eor	r1, r1
     c8e:	2f 93       	push	r18
     c90:	3f 93       	push	r19
     c92:	4f 93       	push	r20
     c94:	5f 93       	push	r21
     c96:	6f 93       	push	r22
     c98:	7f 93       	push	r23
     c9a:	8f 93       	push	r24
     c9c:	9f 93       	push	r25
     c9e:	af 93       	push	r26
     ca0:	bf 93       	push	r27
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_A_ISR])
     ca6:	e0 91 79 07 	lds	r30, 0x0779	; 0x800779 <LOC_apfun_IntServiceRoutinesFunctions+0x2>
     caa:	f0 91 7a 07 	lds	r31, 0x077A	; 0x80077a <LOC_apfun_IntServiceRoutinesFunctions+0x3>
     cae:	30 97       	sbiw	r30, 0x00	; 0
     cb0:	29 f0       	breq	.+10     	; 0xcbc <__vector_7+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_A_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CTC_A_ISR]);
     cb2:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <LOC_apvid_IntServiceRoutinesParameters+0x2>
     cb6:	90 91 72 07 	lds	r25, 0x0772	; 0x800772 <LOC_apvid_IntServiceRoutinesParameters+0x3>
     cba:	09 95       	icall
    }
}
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	bf 91       	pop	r27
     cc2:	af 91       	pop	r26
     cc4:	9f 91       	pop	r25
     cc6:	8f 91       	pop	r24
     cc8:	7f 91       	pop	r23
     cca:	6f 91       	pop	r22
     ccc:	5f 91       	pop	r21
     cce:	4f 91       	pop	r20
     cd0:	3f 91       	pop	r19
     cd2:	2f 91       	pop	r18
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <__vector_8>:

void __vector_8 (void)
{
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_B_ISR])
     d00:	e0 91 7b 07 	lds	r30, 0x077B	; 0x80077b <LOC_apfun_IntServiceRoutinesFunctions+0x4>
     d04:	f0 91 7c 07 	lds	r31, 0x077C	; 0x80077c <LOC_apfun_IntServiceRoutinesFunctions+0x5>
     d08:	30 97       	sbiw	r30, 0x00	; 0
     d0a:	29 f0       	breq	.+10     	; 0xd16 <__vector_8+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_B_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CTC_B_ISR]);
     d0c:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <LOC_apvid_IntServiceRoutinesParameters+0x4>
     d10:	90 91 74 07 	lds	r25, 0x0774	; 0x800774 <LOC_apvid_IntServiceRoutinesParameters+0x5>
     d14:	09 95       	icall
    }
}
     d16:	ff 91       	pop	r31
     d18:	ef 91       	pop	r30
     d1a:	bf 91       	pop	r27
     d1c:	af 91       	pop	r26
     d1e:	9f 91       	pop	r25
     d20:	8f 91       	pop	r24
     d22:	7f 91       	pop	r23
     d24:	6f 91       	pop	r22
     d26:	5f 91       	pop	r21
     d28:	4f 91       	pop	r20
     d2a:	3f 91       	pop	r19
     d2c:	2f 91       	pop	r18
     d2e:	0f 90       	pop	r0
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	0f 90       	pop	r0
     d34:	1f 90       	pop	r1
     d36:	18 95       	reti

00000d38 <__vector_9>:

void __vector_9 (void)
{
     d38:	1f 92       	push	r1
     d3a:	0f 92       	push	r0
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	0f 92       	push	r0
     d40:	11 24       	eor	r1, r1
     d42:	2f 93       	push	r18
     d44:	3f 93       	push	r19
     d46:	4f 93       	push	r20
     d48:	5f 93       	push	r21
     d4a:	6f 93       	push	r22
     d4c:	7f 93       	push	r23
     d4e:	8f 93       	push	r24
     d50:	9f 93       	push	r25
     d52:	af 93       	push	r26
     d54:	bf 93       	push	r27
     d56:	ef 93       	push	r30
     d58:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_OVERFLOW_ISR])
     d5a:	e0 91 7d 07 	lds	r30, 0x077D	; 0x80077d <LOC_apfun_IntServiceRoutinesFunctions+0x6>
     d5e:	f0 91 7e 07 	lds	r31, 0x077E	; 0x80077e <LOC_apfun_IntServiceRoutinesFunctions+0x7>
     d62:	30 97       	sbiw	r30, 0x00	; 0
     d64:	29 f0       	breq	.+10     	; 0xd70 <__vector_9+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_OVERFLOW_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_OVERFLOW_ISR]);
     d66:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <LOC_apvid_IntServiceRoutinesParameters+0x6>
     d6a:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <LOC_apvid_IntServiceRoutinesParameters+0x7>
     d6e:	09 95       	icall
    }
}
     d70:	ff 91       	pop	r31
     d72:	ef 91       	pop	r30
     d74:	bf 91       	pop	r27
     d76:	af 91       	pop	r26
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	7f 91       	pop	r23
     d7e:	6f 91       	pop	r22
     d80:	5f 91       	pop	r21
     d82:	4f 91       	pop	r20
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <__vector_4>:
void __vector_11 (void)__attribute__((signal));


void __vector_4 (void)
{
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
     d92:	e0 91 8f 07 	lds	r30, 0x078F	; 0x80078f <apfun_ISRpointers>
     d96:	f0 91 90 07 	lds	r31, 0x0790	; 0x800790 <apfun_ISRpointers+0x1>
     d9a:	30 97       	sbiw	r30, 0x00	; 0
     d9c:	29 f0       	breq	.+10     	; 0xda8 <__vector_4+0x16>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
     d9e:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <apvid_ISRParameters>
     da2:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <apvid_ISRParameters+0x1>
     da6:	09 95       	icall
     da8:	08 95       	ret

00000daa <__vector_5>:
    }
}

void __vector_5 (void)
{
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
     daa:	e0 91 8f 07 	lds	r30, 0x078F	; 0x80078f <apfun_ISRpointers>
     dae:	f0 91 90 07 	lds	r31, 0x0790	; 0x800790 <apfun_ISRpointers+0x1>
     db2:	30 97       	sbiw	r30, 0x00	; 0
     db4:	29 f0       	breq	.+10     	; 0xdc0 <__vector_5+0x16>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
     db6:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <apvid_ISRParameters>
     dba:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <apvid_ISRParameters+0x1>
     dbe:	09 95       	icall
     dc0:	08 95       	ret

00000dc2 <__vector_10>:
    }
}

void __vector_10 (void)
{
    if(apfun_ISRpointers[TIMER_0_CTC_ISR])
     dc2:	e0 91 9b 07 	lds	r30, 0x079B	; 0x80079b <apfun_ISRpointers+0xc>
     dc6:	f0 91 9c 07 	lds	r31, 0x079C	; 0x80079c <apfun_ISRpointers+0xd>
     dca:	30 97       	sbiw	r30, 0x00	; 0
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <__vector_10+0x16>
    {
       apfun_ISRpointers[TIMER_0_CTC_ISR](apvid_ISRParameters[TIMER_0_CTC_ISR]);
     dce:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <apvid_ISRParameters+0xc>
     dd2:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <apvid_ISRParameters+0xd>
     dd6:	09 95       	icall
     dd8:	08 95       	ret

00000dda <__vector_11>:
    }
}

void __vector_11 (void)
{
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	0f 92       	push	r0
     de2:	11 24       	eor	r1, r1
     de4:	2f 93       	push	r18
     de6:	3f 93       	push	r19
     de8:	4f 93       	push	r20
     dea:	5f 93       	push	r21
     dec:	6f 93       	push	r22
     dee:	7f 93       	push	r23
     df0:	8f 93       	push	r24
     df2:	9f 93       	push	r25
     df4:	af 93       	push	r26
     df6:	bf 93       	push	r27
     df8:	ef 93       	push	r30
     dfa:	ff 93       	push	r31
    if(apfun_ISRpointers[TIMER_0_OVERFLOW_ISR])
     dfc:	e0 91 9d 07 	lds	r30, 0x079D	; 0x80079d <apfun_ISRpointers+0xe>
     e00:	f0 91 9e 07 	lds	r31, 0x079E	; 0x80079e <apfun_ISRpointers+0xf>
     e04:	30 97       	sbiw	r30, 0x00	; 0
     e06:	29 f0       	breq	.+10     	; 0xe12 <__vector_11+0x38>
    {
        apfun_ISRpointers[TIMER_0_OVERFLOW_ISR](apvid_ISRParameters[TIMER_0_OVERFLOW_ISR]);
     e08:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <apvid_ISRParameters+0xe>
     e0c:	90 91 8e 07 	lds	r25, 0x078E	; 0x80078e <apvid_ISRParameters+0xf>
     e10:	09 95       	icall
    }
}
     e12:	ff 91       	pop	r31
     e14:	ef 91       	pop	r30
     e16:	bf 91       	pop	r27
     e18:	af 91       	pop	r26
     e1a:	9f 91       	pop	r25
     e1c:	8f 91       	pop	r24
     e1e:	7f 91       	pop	r23
     e20:	6f 91       	pop	r22
     e22:	5f 91       	pop	r21
     e24:	4f 91       	pop	r20
     e26:	3f 91       	pop	r19
     e28:	2f 91       	pop	r18
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti

00000e34 <__subsf3>:
     e34:	50 58       	subi	r21, 0x80	; 128

00000e36 <__addsf3>:
     e36:	bb 27       	eor	r27, r27
     e38:	aa 27       	eor	r26, r26
     e3a:	0e 94 32 07 	call	0xe64	; 0xe64 <__addsf3x>
     e3e:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_round>
     e42:	0e 94 25 08 	call	0x104a	; 0x104a <__fp_pscA>
     e46:	38 f0       	brcs	.+14     	; 0xe56 <__addsf3+0x20>
     e48:	0e 94 2c 08 	call	0x1058	; 0x1058 <__fp_pscB>
     e4c:	20 f0       	brcs	.+8      	; 0xe56 <__addsf3+0x20>
     e4e:	39 f4       	brne	.+14     	; 0xe5e <__addsf3+0x28>
     e50:	9f 3f       	cpi	r25, 0xFF	; 255
     e52:	19 f4       	brne	.+6      	; 0xe5a <__addsf3+0x24>
     e54:	26 f4       	brtc	.+8      	; 0xe5e <__addsf3+0x28>
     e56:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_nan>
     e5a:	0e f4       	brtc	.+2      	; 0xe5e <__addsf3+0x28>
     e5c:	e0 95       	com	r30
     e5e:	e7 fb       	bst	r30, 7
     e60:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_inf>

00000e64 <__addsf3x>:
     e64:	e9 2f       	mov	r30, r25
     e66:	0e 94 44 08 	call	0x1088	; 0x1088 <__fp_split3>
     e6a:	58 f3       	brcs	.-42     	; 0xe42 <__addsf3+0xc>
     e6c:	ba 17       	cp	r27, r26
     e6e:	62 07       	cpc	r22, r18
     e70:	73 07       	cpc	r23, r19
     e72:	84 07       	cpc	r24, r20
     e74:	95 07       	cpc	r25, r21
     e76:	20 f0       	brcs	.+8      	; 0xe80 <__addsf3x+0x1c>
     e78:	79 f4       	brne	.+30     	; 0xe98 <__addsf3x+0x34>
     e7a:	a6 f5       	brtc	.+104    	; 0xee4 <__addsf3x+0x80>
     e7c:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_zero>
     e80:	0e f4       	brtc	.+2      	; 0xe84 <__addsf3x+0x20>
     e82:	e0 95       	com	r30
     e84:	0b 2e       	mov	r0, r27
     e86:	ba 2f       	mov	r27, r26
     e88:	a0 2d       	mov	r26, r0
     e8a:	0b 01       	movw	r0, r22
     e8c:	b9 01       	movw	r22, r18
     e8e:	90 01       	movw	r18, r0
     e90:	0c 01       	movw	r0, r24
     e92:	ca 01       	movw	r24, r20
     e94:	a0 01       	movw	r20, r0
     e96:	11 24       	eor	r1, r1
     e98:	ff 27       	eor	r31, r31
     e9a:	59 1b       	sub	r21, r25
     e9c:	99 f0       	breq	.+38     	; 0xec4 <__addsf3x+0x60>
     e9e:	59 3f       	cpi	r21, 0xF9	; 249
     ea0:	50 f4       	brcc	.+20     	; 0xeb6 <__addsf3x+0x52>
     ea2:	50 3e       	cpi	r21, 0xE0	; 224
     ea4:	68 f1       	brcs	.+90     	; 0xf00 <__addsf3x+0x9c>
     ea6:	1a 16       	cp	r1, r26
     ea8:	f0 40       	sbci	r31, 0x00	; 0
     eaa:	a2 2f       	mov	r26, r18
     eac:	23 2f       	mov	r18, r19
     eae:	34 2f       	mov	r19, r20
     eb0:	44 27       	eor	r20, r20
     eb2:	58 5f       	subi	r21, 0xF8	; 248
     eb4:	f3 cf       	rjmp	.-26     	; 0xe9c <__addsf3x+0x38>
     eb6:	46 95       	lsr	r20
     eb8:	37 95       	ror	r19
     eba:	27 95       	ror	r18
     ebc:	a7 95       	ror	r26
     ebe:	f0 40       	sbci	r31, 0x00	; 0
     ec0:	53 95       	inc	r21
     ec2:	c9 f7       	brne	.-14     	; 0xeb6 <__addsf3x+0x52>
     ec4:	7e f4       	brtc	.+30     	; 0xee4 <__addsf3x+0x80>
     ec6:	1f 16       	cp	r1, r31
     ec8:	ba 0b       	sbc	r27, r26
     eca:	62 0b       	sbc	r22, r18
     ecc:	73 0b       	sbc	r23, r19
     ece:	84 0b       	sbc	r24, r20
     ed0:	ba f0       	brmi	.+46     	; 0xf00 <__addsf3x+0x9c>
     ed2:	91 50       	subi	r25, 0x01	; 1
     ed4:	a1 f0       	breq	.+40     	; 0xefe <__addsf3x+0x9a>
     ed6:	ff 0f       	add	r31, r31
     ed8:	bb 1f       	adc	r27, r27
     eda:	66 1f       	adc	r22, r22
     edc:	77 1f       	adc	r23, r23
     ede:	88 1f       	adc	r24, r24
     ee0:	c2 f7       	brpl	.-16     	; 0xed2 <__addsf3x+0x6e>
     ee2:	0e c0       	rjmp	.+28     	; 0xf00 <__addsf3x+0x9c>
     ee4:	ba 0f       	add	r27, r26
     ee6:	62 1f       	adc	r22, r18
     ee8:	73 1f       	adc	r23, r19
     eea:	84 1f       	adc	r24, r20
     eec:	48 f4       	brcc	.+18     	; 0xf00 <__addsf3x+0x9c>
     eee:	87 95       	ror	r24
     ef0:	77 95       	ror	r23
     ef2:	67 95       	ror	r22
     ef4:	b7 95       	ror	r27
     ef6:	f7 95       	ror	r31
     ef8:	9e 3f       	cpi	r25, 0xFE	; 254
     efa:	08 f0       	brcs	.+2      	; 0xefe <__addsf3x+0x9a>
     efc:	b0 cf       	rjmp	.-160    	; 0xe5e <__addsf3+0x28>
     efe:	93 95       	inc	r25
     f00:	88 0f       	add	r24, r24
     f02:	08 f0       	brcs	.+2      	; 0xf06 <__addsf3x+0xa2>
     f04:	99 27       	eor	r25, r25
     f06:	ee 0f       	add	r30, r30
     f08:	97 95       	ror	r25
     f0a:	87 95       	ror	r24
     f0c:	08 95       	ret

00000f0e <__cmpsf2>:
     f0e:	0e 94 f8 07 	call	0xff0	; 0xff0 <__fp_cmp>
     f12:	08 f4       	brcc	.+2      	; 0xf16 <__cmpsf2+0x8>
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	08 95       	ret

00000f18 <__fixunssfsi>:
     f18:	0e 94 4c 08 	call	0x1098	; 0x1098 <__fp_splitA>
     f1c:	88 f0       	brcs	.+34     	; 0xf40 <__fixunssfsi+0x28>
     f1e:	9f 57       	subi	r25, 0x7F	; 127
     f20:	98 f0       	brcs	.+38     	; 0xf48 <__fixunssfsi+0x30>
     f22:	b9 2f       	mov	r27, r25
     f24:	99 27       	eor	r25, r25
     f26:	b7 51       	subi	r27, 0x17	; 23
     f28:	b0 f0       	brcs	.+44     	; 0xf56 <__fixunssfsi+0x3e>
     f2a:	e1 f0       	breq	.+56     	; 0xf64 <__fixunssfsi+0x4c>
     f2c:	66 0f       	add	r22, r22
     f2e:	77 1f       	adc	r23, r23
     f30:	88 1f       	adc	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	1a f0       	brmi	.+6      	; 0xf3c <__fixunssfsi+0x24>
     f36:	ba 95       	dec	r27
     f38:	c9 f7       	brne	.-14     	; 0xf2c <__fixunssfsi+0x14>
     f3a:	14 c0       	rjmp	.+40     	; 0xf64 <__fixunssfsi+0x4c>
     f3c:	b1 30       	cpi	r27, 0x01	; 1
     f3e:	91 f0       	breq	.+36     	; 0xf64 <__fixunssfsi+0x4c>
     f40:	0e 94 66 08 	call	0x10cc	; 0x10cc <__fp_zero>
     f44:	b1 e0       	ldi	r27, 0x01	; 1
     f46:	08 95       	ret
     f48:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_zero>
     f4c:	67 2f       	mov	r22, r23
     f4e:	78 2f       	mov	r23, r24
     f50:	88 27       	eor	r24, r24
     f52:	b8 5f       	subi	r27, 0xF8	; 248
     f54:	39 f0       	breq	.+14     	; 0xf64 <__fixunssfsi+0x4c>
     f56:	b9 3f       	cpi	r27, 0xF9	; 249
     f58:	cc f3       	brlt	.-14     	; 0xf4c <__fixunssfsi+0x34>
     f5a:	86 95       	lsr	r24
     f5c:	77 95       	ror	r23
     f5e:	67 95       	ror	r22
     f60:	b3 95       	inc	r27
     f62:	d9 f7       	brne	.-10     	; 0xf5a <__fixunssfsi+0x42>
     f64:	3e f4       	brtc	.+14     	; 0xf74 <__fixunssfsi+0x5c>
     f66:	90 95       	com	r25
     f68:	80 95       	com	r24
     f6a:	70 95       	com	r23
     f6c:	61 95       	neg	r22
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	8f 4f       	sbci	r24, 0xFF	; 255
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	08 95       	ret

00000f76 <__floatunsisf>:
     f76:	e8 94       	clt
     f78:	09 c0       	rjmp	.+18     	; 0xf8c <__floatsisf+0x12>

00000f7a <__floatsisf>:
     f7a:	97 fb       	bst	r25, 7
     f7c:	3e f4       	brtc	.+14     	; 0xf8c <__floatsisf+0x12>
     f7e:	90 95       	com	r25
     f80:	80 95       	com	r24
     f82:	70 95       	com	r23
     f84:	61 95       	neg	r22
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	8f 4f       	sbci	r24, 0xFF	; 255
     f8a:	9f 4f       	sbci	r25, 0xFF	; 255
     f8c:	99 23       	and	r25, r25
     f8e:	a9 f0       	breq	.+42     	; 0xfba <__floatsisf+0x40>
     f90:	f9 2f       	mov	r31, r25
     f92:	96 e9       	ldi	r25, 0x96	; 150
     f94:	bb 27       	eor	r27, r27
     f96:	93 95       	inc	r25
     f98:	f6 95       	lsr	r31
     f9a:	87 95       	ror	r24
     f9c:	77 95       	ror	r23
     f9e:	67 95       	ror	r22
     fa0:	b7 95       	ror	r27
     fa2:	f1 11       	cpse	r31, r1
     fa4:	f8 cf       	rjmp	.-16     	; 0xf96 <__floatsisf+0x1c>
     fa6:	fa f4       	brpl	.+62     	; 0xfe6 <__floatsisf+0x6c>
     fa8:	bb 0f       	add	r27, r27
     faa:	11 f4       	brne	.+4      	; 0xfb0 <__floatsisf+0x36>
     fac:	60 ff       	sbrs	r22, 0
     fae:	1b c0       	rjmp	.+54     	; 0xfe6 <__floatsisf+0x6c>
     fb0:	6f 5f       	subi	r22, 0xFF	; 255
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	8f 4f       	sbci	r24, 0xFF	; 255
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	16 c0       	rjmp	.+44     	; 0xfe6 <__floatsisf+0x6c>
     fba:	88 23       	and	r24, r24
     fbc:	11 f0       	breq	.+4      	; 0xfc2 <__floatsisf+0x48>
     fbe:	96 e9       	ldi	r25, 0x96	; 150
     fc0:	11 c0       	rjmp	.+34     	; 0xfe4 <__floatsisf+0x6a>
     fc2:	77 23       	and	r23, r23
     fc4:	21 f0       	breq	.+8      	; 0xfce <__floatsisf+0x54>
     fc6:	9e e8       	ldi	r25, 0x8E	; 142
     fc8:	87 2f       	mov	r24, r23
     fca:	76 2f       	mov	r23, r22
     fcc:	05 c0       	rjmp	.+10     	; 0xfd8 <__floatsisf+0x5e>
     fce:	66 23       	and	r22, r22
     fd0:	71 f0       	breq	.+28     	; 0xfee <__floatsisf+0x74>
     fd2:	96 e8       	ldi	r25, 0x86	; 134
     fd4:	86 2f       	mov	r24, r22
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	2a f0       	brmi	.+10     	; 0xfe6 <__floatsisf+0x6c>
     fdc:	9a 95       	dec	r25
     fde:	66 0f       	add	r22, r22
     fe0:	77 1f       	adc	r23, r23
     fe2:	88 1f       	adc	r24, r24
     fe4:	da f7       	brpl	.-10     	; 0xfdc <__floatsisf+0x62>
     fe6:	88 0f       	add	r24, r24
     fe8:	96 95       	lsr	r25
     fea:	87 95       	ror	r24
     fec:	97 f9       	bld	r25, 7
     fee:	08 95       	ret

00000ff0 <__fp_cmp>:
     ff0:	99 0f       	add	r25, r25
     ff2:	00 08       	sbc	r0, r0
     ff4:	55 0f       	add	r21, r21
     ff6:	aa 0b       	sbc	r26, r26
     ff8:	e0 e8       	ldi	r30, 0x80	; 128
     ffa:	fe ef       	ldi	r31, 0xFE	; 254
     ffc:	16 16       	cp	r1, r22
     ffe:	17 06       	cpc	r1, r23
    1000:	e8 07       	cpc	r30, r24
    1002:	f9 07       	cpc	r31, r25
    1004:	c0 f0       	brcs	.+48     	; 0x1036 <__fp_cmp+0x46>
    1006:	12 16       	cp	r1, r18
    1008:	13 06       	cpc	r1, r19
    100a:	e4 07       	cpc	r30, r20
    100c:	f5 07       	cpc	r31, r21
    100e:	98 f0       	brcs	.+38     	; 0x1036 <__fp_cmp+0x46>
    1010:	62 1b       	sub	r22, r18
    1012:	73 0b       	sbc	r23, r19
    1014:	84 0b       	sbc	r24, r20
    1016:	95 0b       	sbc	r25, r21
    1018:	39 f4       	brne	.+14     	; 0x1028 <__fp_cmp+0x38>
    101a:	0a 26       	eor	r0, r26
    101c:	61 f0       	breq	.+24     	; 0x1036 <__fp_cmp+0x46>
    101e:	23 2b       	or	r18, r19
    1020:	24 2b       	or	r18, r20
    1022:	25 2b       	or	r18, r21
    1024:	21 f4       	brne	.+8      	; 0x102e <__fp_cmp+0x3e>
    1026:	08 95       	ret
    1028:	0a 26       	eor	r0, r26
    102a:	09 f4       	brne	.+2      	; 0x102e <__fp_cmp+0x3e>
    102c:	a1 40       	sbci	r26, 0x01	; 1
    102e:	a6 95       	lsr	r26
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	81 1d       	adc	r24, r1
    1034:	81 1d       	adc	r24, r1
    1036:	08 95       	ret

00001038 <__fp_inf>:
    1038:	97 f9       	bld	r25, 7
    103a:	9f 67       	ori	r25, 0x7F	; 127
    103c:	80 e8       	ldi	r24, 0x80	; 128
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	08 95       	ret

00001044 <__fp_nan>:
    1044:	9f ef       	ldi	r25, 0xFF	; 255
    1046:	80 ec       	ldi	r24, 0xC0	; 192
    1048:	08 95       	ret

0000104a <__fp_pscA>:
    104a:	00 24       	eor	r0, r0
    104c:	0a 94       	dec	r0
    104e:	16 16       	cp	r1, r22
    1050:	17 06       	cpc	r1, r23
    1052:	18 06       	cpc	r1, r24
    1054:	09 06       	cpc	r0, r25
    1056:	08 95       	ret

00001058 <__fp_pscB>:
    1058:	00 24       	eor	r0, r0
    105a:	0a 94       	dec	r0
    105c:	12 16       	cp	r1, r18
    105e:	13 06       	cpc	r1, r19
    1060:	14 06       	cpc	r1, r20
    1062:	05 06       	cpc	r0, r21
    1064:	08 95       	ret

00001066 <__fp_round>:
    1066:	09 2e       	mov	r0, r25
    1068:	03 94       	inc	r0
    106a:	00 0c       	add	r0, r0
    106c:	11 f4       	brne	.+4      	; 0x1072 <__fp_round+0xc>
    106e:	88 23       	and	r24, r24
    1070:	52 f0       	brmi	.+20     	; 0x1086 <__fp_round+0x20>
    1072:	bb 0f       	add	r27, r27
    1074:	40 f4       	brcc	.+16     	; 0x1086 <__fp_round+0x20>
    1076:	bf 2b       	or	r27, r31
    1078:	11 f4       	brne	.+4      	; 0x107e <__fp_round+0x18>
    107a:	60 ff       	sbrs	r22, 0
    107c:	04 c0       	rjmp	.+8      	; 0x1086 <__fp_round+0x20>
    107e:	6f 5f       	subi	r22, 0xFF	; 255
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	8f 4f       	sbci	r24, 0xFF	; 255
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	08 95       	ret

00001088 <__fp_split3>:
    1088:	57 fd       	sbrc	r21, 7
    108a:	90 58       	subi	r25, 0x80	; 128
    108c:	44 0f       	add	r20, r20
    108e:	55 1f       	adc	r21, r21
    1090:	59 f0       	breq	.+22     	; 0x10a8 <__fp_splitA+0x10>
    1092:	5f 3f       	cpi	r21, 0xFF	; 255
    1094:	71 f0       	breq	.+28     	; 0x10b2 <__fp_splitA+0x1a>
    1096:	47 95       	ror	r20

00001098 <__fp_splitA>:
    1098:	88 0f       	add	r24, r24
    109a:	97 fb       	bst	r25, 7
    109c:	99 1f       	adc	r25, r25
    109e:	61 f0       	breq	.+24     	; 0x10b8 <__fp_splitA+0x20>
    10a0:	9f 3f       	cpi	r25, 0xFF	; 255
    10a2:	79 f0       	breq	.+30     	; 0x10c2 <__fp_splitA+0x2a>
    10a4:	87 95       	ror	r24
    10a6:	08 95       	ret
    10a8:	12 16       	cp	r1, r18
    10aa:	13 06       	cpc	r1, r19
    10ac:	14 06       	cpc	r1, r20
    10ae:	55 1f       	adc	r21, r21
    10b0:	f2 cf       	rjmp	.-28     	; 0x1096 <__fp_split3+0xe>
    10b2:	46 95       	lsr	r20
    10b4:	f1 df       	rcall	.-30     	; 0x1098 <__fp_splitA>
    10b6:	08 c0       	rjmp	.+16     	; 0x10c8 <__fp_splitA+0x30>
    10b8:	16 16       	cp	r1, r22
    10ba:	17 06       	cpc	r1, r23
    10bc:	18 06       	cpc	r1, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	f1 cf       	rjmp	.-30     	; 0x10a4 <__fp_splitA+0xc>
    10c2:	86 95       	lsr	r24
    10c4:	71 05       	cpc	r23, r1
    10c6:	61 05       	cpc	r22, r1
    10c8:	08 94       	sec
    10ca:	08 95       	ret

000010cc <__fp_zero>:
    10cc:	e8 94       	clt

000010ce <__fp_szero>:
    10ce:	bb 27       	eor	r27, r27
    10d0:	66 27       	eor	r22, r22
    10d2:	77 27       	eor	r23, r23
    10d4:	cb 01       	movw	r24, r22
    10d6:	97 f9       	bld	r25, 7
    10d8:	08 95       	ret

000010da <__mulsf3>:
    10da:	0e 94 80 08 	call	0x1100	; 0x1100 <__mulsf3x>
    10de:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_round>
    10e2:	0e 94 25 08 	call	0x104a	; 0x104a <__fp_pscA>
    10e6:	38 f0       	brcs	.+14     	; 0x10f6 <__mulsf3+0x1c>
    10e8:	0e 94 2c 08 	call	0x1058	; 0x1058 <__fp_pscB>
    10ec:	20 f0       	brcs	.+8      	; 0x10f6 <__mulsf3+0x1c>
    10ee:	95 23       	and	r25, r21
    10f0:	11 f0       	breq	.+4      	; 0x10f6 <__mulsf3+0x1c>
    10f2:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_inf>
    10f6:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_nan>
    10fa:	11 24       	eor	r1, r1
    10fc:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_szero>

00001100 <__mulsf3x>:
    1100:	0e 94 44 08 	call	0x1088	; 0x1088 <__fp_split3>
    1104:	70 f3       	brcs	.-36     	; 0x10e2 <__mulsf3+0x8>

00001106 <__mulsf3_pse>:
    1106:	95 9f       	mul	r25, r21
    1108:	c1 f3       	breq	.-16     	; 0x10fa <__mulsf3+0x20>
    110a:	95 0f       	add	r25, r21
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	55 1f       	adc	r21, r21
    1110:	62 9f       	mul	r22, r18
    1112:	f0 01       	movw	r30, r0
    1114:	72 9f       	mul	r23, r18
    1116:	bb 27       	eor	r27, r27
    1118:	f0 0d       	add	r31, r0
    111a:	b1 1d       	adc	r27, r1
    111c:	63 9f       	mul	r22, r19
    111e:	aa 27       	eor	r26, r26
    1120:	f0 0d       	add	r31, r0
    1122:	b1 1d       	adc	r27, r1
    1124:	aa 1f       	adc	r26, r26
    1126:	64 9f       	mul	r22, r20
    1128:	66 27       	eor	r22, r22
    112a:	b0 0d       	add	r27, r0
    112c:	a1 1d       	adc	r26, r1
    112e:	66 1f       	adc	r22, r22
    1130:	82 9f       	mul	r24, r18
    1132:	22 27       	eor	r18, r18
    1134:	b0 0d       	add	r27, r0
    1136:	a1 1d       	adc	r26, r1
    1138:	62 1f       	adc	r22, r18
    113a:	73 9f       	mul	r23, r19
    113c:	b0 0d       	add	r27, r0
    113e:	a1 1d       	adc	r26, r1
    1140:	62 1f       	adc	r22, r18
    1142:	83 9f       	mul	r24, r19
    1144:	a0 0d       	add	r26, r0
    1146:	61 1d       	adc	r22, r1
    1148:	22 1f       	adc	r18, r18
    114a:	74 9f       	mul	r23, r20
    114c:	33 27       	eor	r19, r19
    114e:	a0 0d       	add	r26, r0
    1150:	61 1d       	adc	r22, r1
    1152:	23 1f       	adc	r18, r19
    1154:	84 9f       	mul	r24, r20
    1156:	60 0d       	add	r22, r0
    1158:	21 1d       	adc	r18, r1
    115a:	82 2f       	mov	r24, r18
    115c:	76 2f       	mov	r23, r22
    115e:	6a 2f       	mov	r22, r26
    1160:	11 24       	eor	r1, r1
    1162:	9f 57       	subi	r25, 0x7F	; 127
    1164:	50 40       	sbci	r21, 0x00	; 0
    1166:	9a f0       	brmi	.+38     	; 0x118e <__mulsf3_pse+0x88>
    1168:	f1 f0       	breq	.+60     	; 0x11a6 <__mulsf3_pse+0xa0>
    116a:	88 23       	and	r24, r24
    116c:	4a f0       	brmi	.+18     	; 0x1180 <__mulsf3_pse+0x7a>
    116e:	ee 0f       	add	r30, r30
    1170:	ff 1f       	adc	r31, r31
    1172:	bb 1f       	adc	r27, r27
    1174:	66 1f       	adc	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	91 50       	subi	r25, 0x01	; 1
    117c:	50 40       	sbci	r21, 0x00	; 0
    117e:	a9 f7       	brne	.-22     	; 0x116a <__mulsf3_pse+0x64>
    1180:	9e 3f       	cpi	r25, 0xFE	; 254
    1182:	51 05       	cpc	r21, r1
    1184:	80 f0       	brcs	.+32     	; 0x11a6 <__mulsf3_pse+0xa0>
    1186:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_inf>
    118a:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_szero>
    118e:	5f 3f       	cpi	r21, 0xFF	; 255
    1190:	e4 f3       	brlt	.-8      	; 0x118a <__mulsf3_pse+0x84>
    1192:	98 3e       	cpi	r25, 0xE8	; 232
    1194:	d4 f3       	brlt	.-12     	; 0x118a <__mulsf3_pse+0x84>
    1196:	86 95       	lsr	r24
    1198:	77 95       	ror	r23
    119a:	67 95       	ror	r22
    119c:	b7 95       	ror	r27
    119e:	f7 95       	ror	r31
    11a0:	e7 95       	ror	r30
    11a2:	9f 5f       	subi	r25, 0xFF	; 255
    11a4:	c1 f7       	brne	.-16     	; 0x1196 <__mulsf3_pse+0x90>
    11a6:	fe 2b       	or	r31, r30
    11a8:	88 0f       	add	r24, r24
    11aa:	91 1d       	adc	r25, r1
    11ac:	96 95       	lsr	r25
    11ae:	87 95       	ror	r24
    11b0:	97 f9       	bld	r25, 7
    11b2:	08 95       	ret

000011b4 <__udivmodsi4>:
    11b4:	a1 e2       	ldi	r26, 0x21	; 33
    11b6:	1a 2e       	mov	r1, r26
    11b8:	aa 1b       	sub	r26, r26
    11ba:	bb 1b       	sub	r27, r27
    11bc:	fd 01       	movw	r30, r26
    11be:	0d c0       	rjmp	.+26     	; 0x11da <__udivmodsi4_ep>

000011c0 <__udivmodsi4_loop>:
    11c0:	aa 1f       	adc	r26, r26
    11c2:	bb 1f       	adc	r27, r27
    11c4:	ee 1f       	adc	r30, r30
    11c6:	ff 1f       	adc	r31, r31
    11c8:	a2 17       	cp	r26, r18
    11ca:	b3 07       	cpc	r27, r19
    11cc:	e4 07       	cpc	r30, r20
    11ce:	f5 07       	cpc	r31, r21
    11d0:	20 f0       	brcs	.+8      	; 0x11da <__udivmodsi4_ep>
    11d2:	a2 1b       	sub	r26, r18
    11d4:	b3 0b       	sbc	r27, r19
    11d6:	e4 0b       	sbc	r30, r20
    11d8:	f5 0b       	sbc	r31, r21

000011da <__udivmodsi4_ep>:
    11da:	66 1f       	adc	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	1a 94       	dec	r1
    11e4:	69 f7       	brne	.-38     	; 0x11c0 <__udivmodsi4_loop>
    11e6:	60 95       	com	r22
    11e8:	70 95       	com	r23
    11ea:	80 95       	com	r24
    11ec:	90 95       	com	r25
    11ee:	9b 01       	movw	r18, r22
    11f0:	ac 01       	movw	r20, r24
    11f2:	bd 01       	movw	r22, r26
    11f4:	cf 01       	movw	r24, r30
    11f6:	08 95       	ret

000011f8 <__tablejump2__>:
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	05 90       	lpm	r0, Z+
    11fe:	f4 91       	lpm	r31, Z
    1200:	e0 2d       	mov	r30, r0
    1202:	09 94       	ijmp

00001204 <_exit>:
    1204:	f8 94       	cli

00001206 <__stop_program>:
    1206:	ff cf       	rjmp	.-2      	; 0x1206 <__stop_program>
