
PWM Oscilloscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000b6a  00000bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000235  0080006a  0080006a  00000c08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003fcb  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001057  00000000  00000000  00005027  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bc4  00000000  00000000  0000607e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c18  00000000  00000000  00008c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001967  00000000  00000000  0000985c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005b4b  00000000  00000000  0000b1c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  00010d0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_1>
   8:	0c 94 06 04 	jmp	0x80c	; 0x80c <__vector_2>
   c:	0c 94 33 04 	jmp	0x866	; 0x866 <__vector_3>
  10:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_4>
  14:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__vector_5>
  18:	0c 94 a8 04 	jmp	0x950	; 0x950 <__vector_6>
  1c:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__vector_7>
  20:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__vector_8>
  24:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__vector_9>
  28:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__vector_10>
  2c:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__vector_11>
  30:	0c 94 9b 04 	jmp	0x936	; 0x936 <__vector_12>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	6a 00       	.word	0x006a	; ????
  56:	7f 00       	.word	0x007f	; ????
  58:	a9 00       	.word	0x00a9	; ????
  5a:	b0 00       	.word	0x00b0	; ????
  5c:	b7 00       	.word	0x00b7	; ????
  5e:	be 00       	.word	0x00be	; ????
  60:	c5 00       	.word	0x00c5	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	ea e6       	ldi	r30, 0x6A	; 106
  76:	fb e0       	ldi	r31, 0x0B	; 11
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	aa 36       	cpi	r26, 0x6A	; 106
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	22 e0       	ldi	r18, 0x02	; 2
  86:	aa e6       	ldi	r26, 0x6A	; 106
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	af 39       	cpi	r26, 0x9F	; 159
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  98:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <main>:
void main(void)
{

	u8 i = 0;
	//initializaions
	NOKIA5110_enu_Initialization();
  a0:	0e 94 cf 01 	call	0x39e	; 0x39e <NOKIA5110_enu_Initialization>


	NOKIA5110_enu_DrawPixel(24,5, NOKIA5110_BLACK_COLOUR);
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	65 e0       	ldi	r22, 0x05	; 5
  a8:	88 e1       	ldi	r24, 0x18	; 24
  aa:	0e 94 59 02 	call	0x4b2	; 0x4b2 <NOKIA5110_enu_DrawPixel>
	NOKIA5110_enu_CopyPixelByCooridnates(24,5, 0,0);	
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	65 e0       	ldi	r22, 0x05	; 5
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <NOKIA5110_enu_CopyPixelByCooridnates>
  ba:	ff cf       	rjmp	.-2      	; 0xba <main+0x1a>

000000bc <enu_GenerateFrame>:
    u8 Local_u8_ErrorFlag = ES_NOK;

    Local_u8_ErrorFlag = enu_CopyPixelByShifting(Copy_u8_Y, Copy_u8_X, Copy_s32_ShiftMagnitude, Copy_u8_Direction);

    return Local_u8_ErrorFlag;
}
  bc:	fb 01       	movw	r30, r22
  be:	10 82       	st	Z, r1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	87 30       	cpi	r24, 0x07	; 7
  c4:	91 05       	cpc	r25, r1
  c6:	08 f0       	brcs	.+2      	; 0xca <enu_GenerateFrame+0xe>
  c8:	67 c0       	rjmp	.+206    	; 0x198 <enu_GenerateFrame+0xdc>
  ca:	fc 01       	movw	r30, r24
  cc:	e6 5d       	subi	r30, 0xD6	; 214
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__tablejump2__>
  d4:	e0 e6       	ldi	r30, 0x60	; 96
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	20 81       	ld	r18, Z
  da:	91 81       	ldd	r25, Z+1	; 0x01
  dc:	42 81       	ldd	r20, Z+2	; 0x02
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	89 2f       	mov	r24, r25
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	20 62       	ori	r18, 0x20	; 32
  f2:	82 2b       	or	r24, r18
  f4:	84 2b       	or	r24, r20
  f6:	fb 01       	movw	r30, r22
  f8:	80 83       	st	Z, r24
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	08 95       	ret
  fe:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 102:	88 23       	and	r24, r24
 104:	51 f0       	breq	.+20     	; 0x11a <enu_GenerateFrame+0x5e>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	61 f0       	breq	.+24     	; 0x122 <enu_GenerateFrame+0x66>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	71 f0       	breq	.+28     	; 0x12a <enu_GenerateFrame+0x6e>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	81 f4       	brne	.+32     	; 0x132 <enu_GenerateFrame+0x76>
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0f c0       	rjmp	.+30     	; 0x138 <enu_GenerateFrame+0x7c>
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0b c0       	rjmp	.+22     	; 0x138 <enu_GenerateFrame+0x7c>
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	07 c0       	rjmp	.+14     	; 0x138 <enu_GenerateFrame+0x7c>
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	03 c0       	rjmp	.+6      	; 0x138 <enu_GenerateFrame+0x7c>
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	81 11       	cpse	r24, r1
 13a:	2f c0       	rjmp	.+94     	; 0x19a <enu_GenerateFrame+0xde>
 13c:	29 2f       	mov	r18, r25
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	24 2b       	or	r18, r20
 14a:	28 60       	ori	r18, 0x08	; 8
 14c:	fb 01       	movw	r30, r22
 14e:	20 83       	st	Z, r18
 150:	08 95       	ret
 152:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 156:	80 64       	ori	r24, 0x40	; 64
 158:	fb 01       	movw	r30, r22
 15a:	80 83       	st	Z, r24
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	08 95       	ret
 160:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 164:	80 68       	ori	r24, 0x80	; 128
 166:	fb 01       	movw	r30, r22
 168:	80 83       	st	Z, r24
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret
 16e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 172:	84 60       	ori	r24, 0x04	; 4
 174:	fb 01       	movw	r30, r22
 176:	80 83       	st	Z, r24
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
 17c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 180:	80 61       	ori	r24, 0x10	; 16
 182:	fb 01       	movw	r30, r22
 184:	80 83       	st	Z, r24
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	08 95       	ret
 18a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	fb 01       	movw	r30, r22
 192:	80 83       	st	Z, r24
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	08 95       	ret
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	08 95       	ret

0000019c <enu_ConvertCoordinatesToAddresses>:
 19c:	00 97       	sbiw	r24, 0x00	; 0
 19e:	51 f0       	breq	.+20     	; 0x1b4 <enu_ConvertCoordinatesToAddresses+0x18>
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 81       	ld	r18, Z
 1a4:	20 33       	cpi	r18, 0x30	; 48
 1a6:	40 f4       	brcc	.+16     	; 0x1b8 <enu_ConvertCoordinatesToAddresses+0x1c>
 1a8:	26 95       	lsr	r18
 1aa:	26 95       	lsr	r18
 1ac:	26 95       	lsr	r18
 1ae:	20 83       	st	Z, r18
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	08 95       	ret
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	08 95       	ret
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	08 95       	ret

000001bc <enu_PassByteToSPI>:
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	1f 92       	push	r1
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	18 2f       	mov	r17, r24
 1ca:	ce 01       	movw	r24, r28
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	0e 94 91 04 	call	0x922	; 0x922 <SPI_enu_GetCommState>
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	81 11       	cpse	r24, r1
 1d6:	15 c0       	rjmp	.+42     	; 0x202 <enu_PassByteToSPI+0x46>
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIO_enu_SetPinValue>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <enu_PassByteToSPI+0x28>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <enu_PassByteToSPI+0x2a>
 1e6:	81 2f       	mov	r24, r17
 1e8:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <SPI_enu_MasterSend>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <enu_PassByteToSPI+0x32>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <enu_PassByteToSPI+0x34>
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	64 e0       	ldi	r22, 0x04	; 4
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIO_enu_SetPinValue>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <enu_PassByteToSPI+0x40>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <enu_PassByteToSPI+0x42>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	01 c0       	rjmp	.+2      	; 0x204 <enu_PassByteToSPI+0x48>
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	0f 90       	pop	r0
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	08 95       	ret

0000020e <enu_SendCommand>:
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	1f 92       	push	r1
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	be 01       	movw	r22, r28
 21a:	6f 5f       	subi	r22, 0xFF	; 255
 21c:	7f 4f       	sbci	r23, 0xFF	; 255
 21e:	0e 94 5e 00 	call	0xbc	; 0xbc <enu_GenerateFrame>
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	63 e0       	ldi	r22, 0x03	; 3
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIO_enu_SetPinValue>
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	0e 94 de 00 	call	0x1bc	; 0x1bc <enu_PassByteToSPI>
 232:	0f 90       	pop	r0
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <enu_SendData>:
 23a:	cf 93       	push	r28
 23c:	c8 2f       	mov	r28, r24
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIO_enu_SetPinValue>
 248:	8c 2f       	mov	r24, r28
 24a:	0e 94 de 00 	call	0x1bc	; 0x1bc <enu_PassByteToSPI>
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <enu_DrawPixel>:
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	1f 92       	push	r1
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	89 83       	std	Y+1, r24	; 0x01
 264:	64 35       	cpi	r22, 0x54	; 84
 266:	c8 f5       	brcc	.+114    	; 0x2da <enu_DrawPixel+0x88>
 268:	80 33       	cpi	r24, 0x30	; 48
 26a:	c8 f5       	brcc	.+114    	; 0x2de <enu_DrawPixel+0x8c>
 26c:	42 30       	cpi	r20, 0x02	; 2
 26e:	c8 f5       	brcc	.+114    	; 0x2e2 <enu_DrawPixel+0x90>
 270:	f4 2e       	mov	r15, r20
 272:	16 2f       	mov	r17, r22
 274:	08 2f       	mov	r16, r24
 276:	07 70       	andi	r16, 0x07	; 7
 278:	ce 01       	movw	r24, r28
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	0e 94 ce 00 	call	0x19c	; 0x19c <enu_ConvertCoordinatesToAddresses>
 280:	49 81       	ldd	r20, Y+1	; 0x01
 282:	84 e5       	ldi	r24, 0x54	; 84
 284:	48 9f       	mul	r20, r24
 286:	f0 01       	movw	r30, r0
 288:	11 24       	eor	r1, r1
 28a:	e6 59       	subi	r30, 0x96	; 150
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	e1 0f       	add	r30, r17
 290:	f1 1d       	adc	r31, r1
 292:	80 81       	ld	r24, Z
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	00 2e       	mov	r0, r16
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <enu_DrawPixel+0x4e>
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	0a 94       	dec	r0
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <enu_DrawPixel+0x4a>
 2a4:	20 95       	com	r18
 2a6:	28 23       	and	r18, r24
 2a8:	8f 2d       	mov	r24, r15
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <enu_DrawPixel+0x60>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	0a 95       	dec	r16
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <enu_DrawPixel+0x5c>
 2b6:	02 2f       	mov	r16, r18
 2b8:	08 2b       	or	r16, r24
 2ba:	00 83       	st	Z, r16
 2bc:	e0 e6       	ldi	r30, 0x60	; 96
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	44 83       	std	Z+4, r20	; 0x04
 2c2:	15 83       	std	Z+5, r17	; 0x05
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	0e 94 07 01 	call	0x20e	; 0x20e <enu_SendCommand>
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	0e 94 07 01 	call	0x20e	; 0x20e <enu_SendCommand>
 2d0:	80 2f       	mov	r24, r16
 2d2:	0e 94 1d 01 	call	0x23a	; 0x23a <enu_SendData>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <enu_DrawPixel+0x92>
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <enu_DrawPixel+0x92>
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <enu_DrawPixel+0x92>
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0f 90       	pop	r0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	08 95       	ret

000002f2 <enu_CopyPixelByCooridnates>:
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	1f 92       	push	r1
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	80 33       	cpi	r24, 0x30	; 48
 304:	20 f4       	brcc	.+8      	; 0x30e <enu_CopyPixelByCooridnates+0x1c>
 306:	64 35       	cpi	r22, 0x54	; 84
 308:	20 f0       	brcs	.+8      	; 0x312 <enu_CopyPixelByCooridnates+0x20>
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	03 c0       	rjmp	.+6      	; 0x314 <enu_CopyPixelByCooridnates+0x22>
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	01 c0       	rjmp	.+2      	; 0x314 <enu_CopyPixelByCooridnates+0x22>
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	40 33       	cpi	r20, 0x30	; 48
 316:	20 f4       	brcc	.+8      	; 0x320 <enu_CopyPixelByCooridnates+0x2e>
 318:	24 35       	cpi	r18, 0x54	; 84
 31a:	20 f0       	brcs	.+8      	; 0x324 <enu_CopyPixelByCooridnates+0x32>
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	03 c0       	rjmp	.+6      	; 0x326 <enu_CopyPixelByCooridnates+0x34>
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	01 c0       	rjmp	.+2      	; 0x326 <enu_CopyPixelByCooridnates+0x34>
 324:	31 e0       	ldi	r19, 0x01	; 1
 326:	84 13       	cpse	r24, r20
 328:	04 c0       	rjmp	.+8      	; 0x332 <enu_CopyPixelByCooridnates+0x40>
 32a:	62 17       	cp	r22, r18
 32c:	21 f0       	breq	.+8      	; 0x336 <enu_CopyPixelByCooridnates+0x44>
 32e:	51 e0       	ldi	r21, 0x01	; 1
 330:	03 c0       	rjmp	.+6      	; 0x338 <enu_CopyPixelByCooridnates+0x46>
 332:	51 e0       	ldi	r21, 0x01	; 1
 334:	01 c0       	rjmp	.+2      	; 0x338 <enu_CopyPixelByCooridnates+0x46>
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	99 23       	and	r25, r25
 33a:	29 f1       	breq	.+74     	; 0x386 <enu_CopyPixelByCooridnates+0x94>
 33c:	33 23       	and	r19, r19
 33e:	29 f1       	breq	.+74     	; 0x38a <enu_CopyPixelByCooridnates+0x98>
 340:	55 23       	and	r21, r21
 342:	29 f1       	breq	.+74     	; 0x38e <enu_CopyPixelByCooridnates+0x9c>
 344:	f2 2e       	mov	r15, r18
 346:	04 2f       	mov	r16, r20
 348:	18 2f       	mov	r17, r24
 34a:	69 83       	std	Y+1, r22	; 0x01
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	0e 94 ce 00 	call	0x19c	; 0x19c <enu_ConvertCoordinatesToAddresses>
 354:	e9 81       	ldd	r30, Y+1	; 0x01
 356:	84 e5       	ldi	r24, 0x54	; 84
 358:	e8 9f       	mul	r30, r24
 35a:	f0 01       	movw	r30, r0
 35c:	11 24       	eor	r1, r1
 35e:	e6 59       	subi	r30, 0x96	; 150
 360:	ff 4f       	sbci	r31, 0xFF	; 255
 362:	e1 0f       	add	r30, r17
 364:	f1 1d       	adc	r31, r1
 366:	40 81       	ld	r20, Z
 368:	81 2f       	mov	r24, r17
 36a:	87 70       	andi	r24, 0x07	; 7
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <enu_CopyPixelByCooridnates+0x82>
 370:	55 95       	asr	r21
 372:	47 95       	ror	r20
 374:	8a 95       	dec	r24
 376:	e2 f7       	brpl	.-8      	; 0x370 <enu_CopyPixelByCooridnates+0x7e>
 378:	41 70       	andi	r20, 0x01	; 1
 37a:	6f 2d       	mov	r22, r15
 37c:	80 2f       	mov	r24, r16
 37e:	0e 94 29 01 	call	0x252	; 0x252 <enu_DrawPixel>
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	05 c0       	rjmp	.+10     	; 0x390 <enu_CopyPixelByCooridnates+0x9e>
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	03 c0       	rjmp	.+6      	; 0x390 <enu_CopyPixelByCooridnates+0x9e>
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	01 c0       	rjmp	.+2      	; 0x390 <enu_CopyPixelByCooridnates+0x9e>
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	0f 90       	pop	r0
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	08 95       	ret

0000039e <NOKIA5110_enu_Initialization>:
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	1f 92       	push	r1
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	65 e0       	ldi	r22, 0x05	; 5
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_enu_SetPinDiretion>
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	67 e0       	ldi	r22, 0x07	; 7
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_enu_SetPinDiretion>
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	64 e0       	ldi	r22, 0x04	; 4
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIO_enu_SetPinValue>
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	64 e0       	ldi	r22, 0x04	; 4
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_enu_SetPinDiretion>
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	62 e0       	ldi	r22, 0x02	; 2
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIO_enu_SetPinValue>
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	62 e0       	ldi	r22, 0x02	; 2
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_enu_SetPinDiretion>
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	63 e0       	ldi	r22, 0x03	; 3
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_enu_SetPinDiretion>
 3f2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <SPI_enu_Initialization>
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	64 e0       	ldi	r22, 0x04	; 4
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIO_enu_SetPinValue>
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_enu_SetPinState>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_enu_SetPinState>
 418:	be 01       	movw	r22, r28
 41a:	6f 5f       	subi	r22, 0xFF	; 255
 41c:	7f 4f       	sbci	r23, 0xFF	; 255
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 5e 00 	call	0xbc	; 0xbc <enu_GenerateFrame>
 424:	89 81       	ldd	r24, Y+1	; 0x01
 426:	0e 94 de 00 	call	0x1bc	; 0x1bc <enu_PassByteToSPI>
 42a:	be 01       	movw	r22, r28
 42c:	6f 5f       	subi	r22, 0xFF	; 255
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 5e 00 	call	0xbc	; 0xbc <enu_GenerateFrame>
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	0e 94 de 00 	call	0x1bc	; 0x1bc <enu_PassByteToSPI>
 43c:	00 e6       	ldi	r16, 0x60	; 96
 43e:	10 e0       	ldi	r17, 0x00	; 0
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	f8 01       	movw	r30, r16
 444:	82 83       	std	Z+2, r24	; 0x02
 446:	be 01       	movw	r22, r28
 448:	6f 5f       	subi	r22, 0xFF	; 255
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 5e 00 	call	0xbc	; 0xbc <enu_GenerateFrame>
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	0e 94 de 00 	call	0x1bc	; 0x1bc <enu_PassByteToSPI>
 458:	be 01       	movw	r22, r28
 45a:	6f 5f       	subi	r22, 0xFF	; 255
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	84 e0       	ldi	r24, 0x04	; 4
 460:	0e 94 5e 00 	call	0xbc	; 0xbc <enu_GenerateFrame>
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	0e 94 de 00 	call	0x1bc	; 0x1bc <enu_PassByteToSPI>
 46a:	be 01       	movw	r22, r28
 46c:	6f 5f       	subi	r22, 0xFF	; 255
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	85 e0       	ldi	r24, 0x05	; 5
 472:	0e 94 5e 00 	call	0xbc	; 0xbc <enu_GenerateFrame>
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	0e 94 de 00 	call	0x1bc	; 0x1bc <enu_PassByteToSPI>
 47c:	be 01       	movw	r22, r28
 47e:	6f 5f       	subi	r22, 0xFF	; 255
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	86 e0       	ldi	r24, 0x06	; 6
 484:	0e 94 5e 00 	call	0xbc	; 0xbc <enu_GenerateFrame>
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	0e 94 de 00 	call	0x1bc	; 0x1bc <enu_PassByteToSPI>
 48e:	f8 01       	movw	r30, r16
 490:	12 82       	std	Z+2, r1	; 0x02
 492:	be 01       	movw	r22, r28
 494:	6f 5f       	subi	r22, 0xFF	; 255
 496:	7f 4f       	sbci	r23, 0xFF	; 255
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	0e 94 5e 00 	call	0xbc	; 0xbc <enu_GenerateFrame>
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	0e 94 de 00 	call	0x1bc	; 0x1bc <enu_PassByteToSPI>
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0f 90       	pop	r0
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	08 95       	ret

000004b2 <NOKIA5110_enu_DrawPixel>:
 4b2:	0e 94 29 01 	call	0x252	; 0x252 <enu_DrawPixel>
 4b6:	08 95       	ret

000004b8 <NOKIA5110_enu_CopyPixelByCooridnates>:
 */
extern ErrorState_t NOKIA5110_enu_CopyPixelByCooridnates(u8 Copy_u8_Yoriginal, u8 Copy_u8_Xoriginal, u8 Copy_u8_Ycopied, u8 Copy_u8_Xcopied)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    Local_u8_ErrorFlag = enu_CopyPixelByCooridnates(Copy_u8_Yoriginal, Copy_u8_Xoriginal, Copy_u8_Ycopied, Copy_u8_Xcopied);
 4b8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <enu_CopyPixelByCooridnates>

    return Local_u8_ErrorFlag;
}
 4bc:	08 95       	ret

000004be <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
 4be:	84 30       	cpi	r24, 0x04	; 4
 4c0:	08 f0       	brcs	.+2      	; 0x4c4 <DIO_enu_SetPinDiretion+0x6>
 4c2:	6f c0       	rjmp	.+222    	; 0x5a2 <DIO_enu_SetPinDiretion+0xe4>
 4c4:	68 30       	cpi	r22, 0x08	; 8
 4c6:	08 f0       	brcs	.+2      	; 0x4ca <DIO_enu_SetPinDiretion+0xc>
 4c8:	6e c0       	rjmp	.+220    	; 0x5a6 <DIO_enu_SetPinDiretion+0xe8>
 4ca:	42 30       	cpi	r20, 0x02	; 2
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <DIO_enu_SetPinDiretion+0x12>
 4ce:	6d c0       	rjmp	.+218    	; 0x5aa <DIO_enu_SetPinDiretion+0xec>
    {
        switch (Copy_u8_PinGroup)
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	f9 f0       	breq	.+62     	; 0x512 <DIO_enu_SetPinDiretion+0x54>
 4d4:	30 f0       	brcs	.+12     	; 0x4e2 <DIO_enu_SetPinDiretion+0x24>
 4d6:	82 30       	cpi	r24, 0x02	; 2
 4d8:	a1 f1       	breq	.+104    	; 0x542 <DIO_enu_SetPinDiretion+0x84>
 4da:	83 30       	cpi	r24, 0x03	; 3
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <DIO_enu_SetPinDiretion+0x22>
 4de:	49 c0       	rjmp	.+146    	; 0x572 <DIO_enu_SetPinDiretion+0xb4>
 4e0:	66 c0       	rjmp	.+204    	; 0x5ae <DIO_enu_SetPinDiretion+0xf0>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
 4e2:	2a b3       	in	r18, 0x1a	; 26
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	06 2e       	mov	r0, r22
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_enu_SetPinDiretion+0x32>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	0a 94       	dec	r0
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_enu_SetPinDiretion+0x2e>
 4f4:	80 95       	com	r24
 4f6:	82 23       	and	r24, r18
 4f8:	8a bb       	out	0x1a, r24	; 26
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
 4fa:	2a b3       	in	r18, 0x1a	; 26
 4fc:	84 2f       	mov	r24, r20
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_enu_SetPinDiretion+0x48>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_enu_SetPinDiretion+0x44>
 50a:	82 2b       	or	r24, r18
 50c:	8a bb       	out	0x1a, r24	; 26

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 50e:	80 e0       	ldi	r24, 0x00	; 0

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
            break;
 510:	08 95       	ret

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
 512:	87 b3       	in	r24, 0x17	; 23
 514:	21 e0       	ldi	r18, 0x01	; 1
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	06 2e       	mov	r0, r22
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_enu_SetPinDiretion+0x62>
 51c:	22 0f       	add	r18, r18
 51e:	33 1f       	adc	r19, r19
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_enu_SetPinDiretion+0x5e>
 524:	20 95       	com	r18
 526:	28 23       	and	r18, r24
 528:	27 bb       	out	0x17, r18	; 23
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
 52a:	27 b3       	in	r18, 0x17	; 23
 52c:	84 2f       	mov	r24, r20
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_enu_SetPinDiretion+0x78>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_enu_SetPinDiretion+0x74>
 53a:	82 2b       	or	r24, r18
 53c:	87 bb       	out	0x17, r24	; 23

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 53e:	80 e0       	ldi	r24, 0x00	; 0
            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
            break;
 540:	08 95       	ret

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
 542:	84 b3       	in	r24, 0x14	; 20
 544:	21 e0       	ldi	r18, 0x01	; 1
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	06 2e       	mov	r0, r22
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_enu_SetPinDiretion+0x92>
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	0a 94       	dec	r0
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_enu_SetPinDiretion+0x8e>
 554:	20 95       	com	r18
 556:	28 23       	and	r18, r24
 558:	24 bb       	out	0x14, r18	; 20
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
 55a:	24 b3       	in	r18, 0x14	; 20
 55c:	84 2f       	mov	r24, r20
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_enu_SetPinDiretion+0xa8>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_enu_SetPinDiretion+0xa4>
 56a:	82 2b       	or	r24, r18
 56c:	84 bb       	out	0x14, r24	; 20

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 56e:	80 e0       	ldi	r24, 0x00	; 0
            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
            break;
 570:	08 95       	ret

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
 572:	81 b3       	in	r24, 0x11	; 17
 574:	21 e0       	ldi	r18, 0x01	; 1
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	06 2e       	mov	r0, r22
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_enu_SetPinDiretion+0xc2>
 57c:	22 0f       	add	r18, r18
 57e:	33 1f       	adc	r19, r19
 580:	0a 94       	dec	r0
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_enu_SetPinDiretion+0xbe>
 584:	20 95       	com	r18
 586:	28 23       	and	r18, r24
 588:	21 bb       	out	0x11, r18	; 17
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
 58a:	21 b3       	in	r18, 0x11	; 17
 58c:	84 2f       	mov	r24, r20
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_enu_SetPinDiretion+0xd8>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_enu_SetPinDiretion+0xd4>
 59a:	82 2b       	or	r24, r18
 59c:	81 bb       	out	0x11, r24	; 17

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 59e:	80 e0       	ldi	r24, 0x00	; 0
            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
            break;
 5a0:	08 95       	ret
        Local_u8_ErrorFlag = ES_OK;

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	08 95       	ret
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	08 95       	ret
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	08 95       	ret

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 5ae:	80 e0       	ldi	r24, 0x00	; 0
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
 5b0:	08 95       	ret

000005b2 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
 5b2:	84 30       	cpi	r24, 0x04	; 4
 5b4:	08 f0       	brcs	.+2      	; 0x5b8 <DIO_enu_SetPinState+0x6>
 5b6:	6f c0       	rjmp	.+222    	; 0x696 <DIO_enu_SetPinState+0xe4>
 5b8:	68 30       	cpi	r22, 0x08	; 8
 5ba:	08 f0       	brcs	.+2      	; 0x5be <DIO_enu_SetPinState+0xc>
 5bc:	6e c0       	rjmp	.+220    	; 0x69a <DIO_enu_SetPinState+0xe8>
 5be:	42 30       	cpi	r20, 0x02	; 2
 5c0:	08 f0       	brcs	.+2      	; 0x5c4 <DIO_enu_SetPinState+0x12>
 5c2:	6d c0       	rjmp	.+218    	; 0x69e <DIO_enu_SetPinState+0xec>
    {
        switch (Copy_u8_PinGroup)
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	f9 f0       	breq	.+62     	; 0x606 <DIO_enu_SetPinState+0x54>
 5c8:	30 f0       	brcs	.+12     	; 0x5d6 <DIO_enu_SetPinState+0x24>
 5ca:	82 30       	cpi	r24, 0x02	; 2
 5cc:	a1 f1       	breq	.+104    	; 0x636 <DIO_enu_SetPinState+0x84>
 5ce:	83 30       	cpi	r24, 0x03	; 3
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <DIO_enu_SetPinState+0x22>
 5d2:	49 c0       	rjmp	.+146    	; 0x666 <DIO_enu_SetPinState+0xb4>
 5d4:	66 c0       	rjmp	.+204    	; 0x6a2 <DIO_enu_SetPinState+0xf0>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
 5d6:	2b b3       	in	r18, 0x1b	; 27
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	06 2e       	mov	r0, r22
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_enu_SetPinState+0x32>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	0a 94       	dec	r0
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_enu_SetPinState+0x2e>
 5e8:	80 95       	com	r24
 5ea:	82 23       	and	r24, r18
 5ec:	8b bb       	out	0x1b, r24	; 27
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
 5ee:	2b b3       	in	r18, 0x1b	; 27
 5f0:	84 2f       	mov	r24, r20
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_enu_SetPinState+0x48>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	6a 95       	dec	r22
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_enu_SetPinState+0x44>
 5fe:	82 2b       	or	r24, r18
 600:	8b bb       	out	0x1b, r24	; 27

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 602:	80 e0       	ldi	r24, 0x00	; 0
        switch (Copy_u8_PinGroup)
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
 604:	08 95       	ret

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
 606:	88 b3       	in	r24, 0x18	; 24
 608:	21 e0       	ldi	r18, 0x01	; 1
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	06 2e       	mov	r0, r22
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_enu_SetPinState+0x62>
 610:	22 0f       	add	r18, r18
 612:	33 1f       	adc	r19, r19
 614:	0a 94       	dec	r0
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_enu_SetPinState+0x5e>
 618:	20 95       	com	r18
 61a:	28 23       	and	r18, r24
 61c:	28 bb       	out	0x18, r18	; 24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
 61e:	28 b3       	in	r18, 0x18	; 24
 620:	84 2f       	mov	r24, r20
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_enu_SetPinState+0x78>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_enu_SetPinState+0x74>
 62e:	82 2b       	or	r24, r18
 630:	88 bb       	out	0x18, r24	; 24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 632:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
 634:	08 95       	ret

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
 636:	85 b3       	in	r24, 0x15	; 21
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	06 2e       	mov	r0, r22
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_enu_SetPinState+0x92>
 640:	22 0f       	add	r18, r18
 642:	33 1f       	adc	r19, r19
 644:	0a 94       	dec	r0
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_enu_SetPinState+0x8e>
 648:	20 95       	com	r18
 64a:	28 23       	and	r18, r24
 64c:	25 bb       	out	0x15, r18	; 21
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
 64e:	25 b3       	in	r18, 0x15	; 21
 650:	84 2f       	mov	r24, r20
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_enu_SetPinState+0xa8>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	6a 95       	dec	r22
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_enu_SetPinState+0xa4>
 65e:	82 2b       	or	r24, r18
 660:	85 bb       	out	0x15, r24	; 21

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 662:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
 664:	08 95       	ret

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
 666:	82 b3       	in	r24, 0x12	; 18
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	06 2e       	mov	r0, r22
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_enu_SetPinState+0xc2>
 670:	22 0f       	add	r18, r18
 672:	33 1f       	adc	r19, r19
 674:	0a 94       	dec	r0
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_enu_SetPinState+0xbe>
 678:	20 95       	com	r18
 67a:	28 23       	and	r18, r24
 67c:	22 bb       	out	0x12, r18	; 18
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
 67e:	22 b3       	in	r18, 0x12	; 18
 680:	84 2f       	mov	r24, r20
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_enu_SetPinState+0xd8>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_enu_SetPinState+0xd4>
 68e:	82 2b       	or	r24, r18
 690:	82 bb       	out	0x12, r24	; 18

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 692:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
 694:	08 95       	ret

        Local_u8_ErrorFlag = ES_OK;
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
 696:	82 e0       	ldi	r24, 0x02	; 2
 698:	08 95       	ret
 69a:	82 e0       	ldi	r24, 0x02	; 2
 69c:	08 95       	ret
 69e:	82 e0       	ldi	r24, 0x02	; 2
 6a0:	08 95       	ret

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 6a2:	80 e0       	ldi	r24, 0x00	; 0
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
 6a4:	08 95       	ret

000006a6 <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
 6a6:	84 30       	cpi	r24, 0x04	; 4
 6a8:	08 f0       	brcs	.+2      	; 0x6ac <DIO_enu_SetPinValue+0x6>
 6aa:	7b c0       	rjmp	.+246    	; 0x7a2 <DIO_enu_SetPinValue+0xfc>
 6ac:	68 30       	cpi	r22, 0x08	; 8
 6ae:	08 f0       	brcs	.+2      	; 0x6b2 <DIO_enu_SetPinValue+0xc>
 6b0:	7a c0       	rjmp	.+244    	; 0x7a6 <DIO_enu_SetPinValue+0x100>
 6b2:	42 30       	cpi	r20, 0x02	; 2
 6b4:	08 f0       	brcs	.+2      	; 0x6b8 <DIO_enu_SetPinValue+0x12>
 6b6:	79 c0       	rjmp	.+242    	; 0x7aa <DIO_enu_SetPinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
 6b8:	81 30       	cpi	r24, 0x01	; 1
 6ba:	11 f1       	breq	.+68     	; 0x700 <DIO_enu_SetPinValue+0x5a>
 6bc:	30 f0       	brcs	.+12     	; 0x6ca <DIO_enu_SetPinValue+0x24>
 6be:	82 30       	cpi	r24, 0x02	; 2
 6c0:	d1 f1       	breq	.+116    	; 0x736 <DIO_enu_SetPinValue+0x90>
 6c2:	83 30       	cpi	r24, 0x03	; 3
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <DIO_enu_SetPinValue+0x22>
 6c6:	52 c0       	rjmp	.+164    	; 0x76c <DIO_enu_SetPinValue+0xc6>
 6c8:	72 c0       	rjmp	.+228    	; 0x7ae <DIO_enu_SetPinValue+0x108>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
 6ca:	41 30       	cpi	r20, 0x01	; 1
 6cc:	61 f4       	brne	.+24     	; 0x6e6 <DIO_enu_SetPinValue+0x40>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
 6ce:	2b b3       	in	r18, 0x1b	; 27
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_enu_SetPinValue+0x34>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	6a 95       	dec	r22
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_enu_SetPinValue+0x30>
 6de:	82 2b       	or	r24, r18
 6e0:	8b bb       	out	0x1b, r24	; 27
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	08 95       	ret
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
 6e6:	2b b3       	in	r18, 0x1b	; 27
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_enu_SetPinValue+0x4c>
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	6a 95       	dec	r22
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_enu_SetPinValue+0x48>
 6f6:	80 95       	com	r24
 6f8:	82 23       	and	r24, r18
 6fa:	8b bb       	out	0x1b, r24	; 27
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	08 95       	ret
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
 700:	41 30       	cpi	r20, 0x01	; 1
 702:	61 f4       	brne	.+24     	; 0x71c <DIO_enu_SetPinValue+0x76>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
 704:	28 b3       	in	r18, 0x18	; 24
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_enu_SetPinValue+0x6a>
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	6a 95       	dec	r22
 712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_enu_SetPinValue+0x66>
 714:	82 2b       	or	r24, r18
 716:	88 bb       	out	0x18, r24	; 24
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	08 95       	ret
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
 71c:	28 b3       	in	r18, 0x18	; 24
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_enu_SetPinValue+0x82>
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	6a 95       	dec	r22
 72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_enu_SetPinValue+0x7e>
 72c:	80 95       	com	r24
 72e:	82 23       	and	r24, r18
 730:	88 bb       	out	0x18, r24	; 24
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	08 95       	ret
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
 736:	41 30       	cpi	r20, 0x01	; 1
 738:	61 f4       	brne	.+24     	; 0x752 <DIO_enu_SetPinValue+0xac>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
 73a:	25 b3       	in	r18, 0x15	; 21
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_enu_SetPinValue+0xa0>
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	6a 95       	dec	r22
 748:	e2 f7       	brpl	.-8      	; 0x742 <DIO_enu_SetPinValue+0x9c>
 74a:	82 2b       	or	r24, r18
 74c:	85 bb       	out	0x15, r24	; 21
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	08 95       	ret
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
 752:	25 b3       	in	r18, 0x15	; 21
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_enu_SetPinValue+0xb8>
 75a:	88 0f       	add	r24, r24
 75c:	99 1f       	adc	r25, r25
 75e:	6a 95       	dec	r22
 760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_enu_SetPinValue+0xb4>
 762:	80 95       	com	r24
 764:	82 23       	and	r24, r18
 766:	85 bb       	out	0x15, r24	; 21
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	08 95       	ret
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
 76c:	41 30       	cpi	r20, 0x01	; 1
 76e:	61 f4       	brne	.+24     	; 0x788 <DIO_enu_SetPinValue+0xe2>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
 770:	22 b3       	in	r18, 0x12	; 18
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	02 c0       	rjmp	.+4      	; 0x77c <DIO_enu_SetPinValue+0xd6>
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	6a 95       	dec	r22
 77e:	e2 f7       	brpl	.-8      	; 0x778 <DIO_enu_SetPinValue+0xd2>
 780:	82 2b       	or	r24, r18
 782:	82 bb       	out	0x12, r24	; 18
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	08 95       	ret
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
 788:	22 b3       	in	r18, 0x12	; 18
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_enu_SetPinValue+0xee>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	6a 95       	dec	r22
 796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_enu_SetPinValue+0xea>
 798:	80 95       	com	r24
 79a:	82 23       	and	r24, r18
 79c:	82 bb       	out	0x12, r24	; 18
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	08 95       	ret


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
 7a2:	82 e0       	ldi	r24, 0x02	; 2
 7a4:	08 95       	ret
 7a6:	82 e0       	ldi	r24, 0x02	; 2
 7a8:	08 95       	ret
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	08 95       	ret
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
 7ae:	80 e0       	ldi	r24, 0x00	; 0
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
 7b0:	08 95       	ret

000007b2 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
 7b2:	1f 92       	push	r1
 7b4:	0f 92       	push	r0
 7b6:	0f b6       	in	r0, 0x3f	; 63
 7b8:	0f 92       	push	r0
 7ba:	11 24       	eor	r1, r1
 7bc:	2f 93       	push	r18
 7be:	3f 93       	push	r19
 7c0:	4f 93       	push	r20
 7c2:	5f 93       	push	r21
 7c4:	6f 93       	push	r22
 7c6:	7f 93       	push	r23
 7c8:	8f 93       	push	r24
 7ca:	9f 93       	push	r25
 7cc:	af 93       	push	r26
 7ce:	bf 93       	push	r27
 7d0:	ef 93       	push	r30
 7d2:	ff 93       	push	r31
    if(pfun_ISRPointers[EXTI_INT0])
 7d4:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <pfun_ISRPointers>
 7d8:	f0 91 69 02 	lds	r31, 0x0269	; 0x800269 <pfun_ISRPointers+0x1>
 7dc:	30 97       	sbiw	r30, 0x00	; 0
 7de:	29 f0       	breq	.+10     	; 0x7ea <__vector_1+0x38>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
 7e0:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <apvid_ISRParameters>
 7e4:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <apvid_ISRParameters+0x1>
 7e8:	09 95       	icall
    }
}
 7ea:	ff 91       	pop	r31
 7ec:	ef 91       	pop	r30
 7ee:	bf 91       	pop	r27
 7f0:	af 91       	pop	r26
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	7f 91       	pop	r23
 7f8:	6f 91       	pop	r22
 7fa:	5f 91       	pop	r21
 7fc:	4f 91       	pop	r20
 7fe:	3f 91       	pop	r19
 800:	2f 91       	pop	r18
 802:	0f 90       	pop	r0
 804:	0f be       	out	0x3f, r0	; 63
 806:	0f 90       	pop	r0
 808:	1f 90       	pop	r1
 80a:	18 95       	reti

0000080c <__vector_2>:
//INT1
void __vector_2 (void)
{
 80c:	1f 92       	push	r1
 80e:	0f 92       	push	r0
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	0f 92       	push	r0
 814:	11 24       	eor	r1, r1
 816:	2f 93       	push	r18
 818:	3f 93       	push	r19
 81a:	4f 93       	push	r20
 81c:	5f 93       	push	r21
 81e:	6f 93       	push	r22
 820:	7f 93       	push	r23
 822:	8f 93       	push	r24
 824:	9f 93       	push	r25
 826:	af 93       	push	r26
 828:	bf 93       	push	r27
 82a:	ef 93       	push	r30
 82c:	ff 93       	push	r31
    if(pfun_ISRPointers[EXTI_INT1])
 82e:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <pfun_ISRPointers+0x2>
 832:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <pfun_ISRPointers+0x3>
 836:	30 97       	sbiw	r30, 0x00	; 0
 838:	29 f0       	breq	.+10     	; 0x844 <__vector_2+0x38>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
 83a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <apvid_ISRParameters+0x2>
 83e:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <apvid_ISRParameters+0x3>
 842:	09 95       	icall
    }
}
 844:	ff 91       	pop	r31
 846:	ef 91       	pop	r30
 848:	bf 91       	pop	r27
 84a:	af 91       	pop	r26
 84c:	9f 91       	pop	r25
 84e:	8f 91       	pop	r24
 850:	7f 91       	pop	r23
 852:	6f 91       	pop	r22
 854:	5f 91       	pop	r21
 856:	4f 91       	pop	r20
 858:	3f 91       	pop	r19
 85a:	2f 91       	pop	r18
 85c:	0f 90       	pop	r0
 85e:	0f be       	out	0x3f, r0	; 63
 860:	0f 90       	pop	r0
 862:	1f 90       	pop	r1
 864:	18 95       	reti

00000866 <__vector_3>:
//INT2
void __vector_3 (void)
{
 866:	1f 92       	push	r1
 868:	0f 92       	push	r0
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	0f 92       	push	r0
 86e:	11 24       	eor	r1, r1
 870:	2f 93       	push	r18
 872:	3f 93       	push	r19
 874:	4f 93       	push	r20
 876:	5f 93       	push	r21
 878:	6f 93       	push	r22
 87a:	7f 93       	push	r23
 87c:	8f 93       	push	r24
 87e:	9f 93       	push	r25
 880:	af 93       	push	r26
 882:	bf 93       	push	r27
 884:	ef 93       	push	r30
 886:	ff 93       	push	r31
    if(pfun_ISRPointers[EXTI_INT2])
 888:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <pfun_ISRPointers+0x4>
 88c:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <pfun_ISRPointers+0x5>
 890:	30 97       	sbiw	r30, 0x00	; 0
 892:	19 f0       	breq	.+6      	; 0x89a <__vector_3+0x34>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
 894:	82 e0       	ldi	r24, 0x02	; 2
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	09 95       	icall
    }
    
}
 89a:	ff 91       	pop	r31
 89c:	ef 91       	pop	r30
 89e:	bf 91       	pop	r27
 8a0:	af 91       	pop	r26
 8a2:	9f 91       	pop	r25
 8a4:	8f 91       	pop	r24
 8a6:	7f 91       	pop	r23
 8a8:	6f 91       	pop	r22
 8aa:	5f 91       	pop	r21
 8ac:	4f 91       	pop	r20
 8ae:	3f 91       	pop	r19
 8b0:	2f 91       	pop	r18
 8b2:	0f 90       	pop	r0
 8b4:	0f be       	out	0x3f, r0	; 63
 8b6:	0f 90       	pop	r0
 8b8:	1f 90       	pop	r1
 8ba:	18 95       	reti

000008bc <SPI_enu_Initialization>:
            break;
        }
    }

    return Local_u8_ErrorFlag;
}
 8bc:	8d b1       	in	r24, 0x0d	; 13
 8be:	80 61       	ori	r24, 0x10	; 16
 8c0:	8d b9       	out	0x0d, r24	; 13
 8c2:	8d b1       	in	r24, 0x0d	; 13
 8c4:	8c 7f       	andi	r24, 0xFC	; 252
 8c6:	8d b9       	out	0x0d, r24	; 13
 8c8:	8d b1       	in	r24, 0x0d	; 13
 8ca:	83 60       	ori	r24, 0x03	; 3
 8cc:	8d b9       	out	0x0d, r24	; 13
 8ce:	8e b1       	in	r24, 0x0e	; 14
 8d0:	8e 7f       	andi	r24, 0xFE	; 254
 8d2:	8e b9       	out	0x0e, r24	; 14
 8d4:	8d b1       	in	r24, 0x0d	; 13
 8d6:	8f 77       	andi	r24, 0x7F	; 127
 8d8:	8d b9       	out	0x0d, r24	; 13
 8da:	8d b1       	in	r24, 0x0d	; 13
 8dc:	87 7f       	andi	r24, 0xF7	; 247
 8de:	8d b9       	out	0x0d, r24	; 13
 8e0:	8d b1       	in	r24, 0x0d	; 13
 8e2:	8b 7f       	andi	r24, 0xFB	; 251
 8e4:	8d b9       	out	0x0d, r24	; 13
 8e6:	8d b1       	in	r24, 0x0d	; 13
 8e8:	8f 7d       	andi	r24, 0xDF	; 223
 8ea:	8d b9       	out	0x0d, r24	; 13
 8ec:	8d b1       	in	r24, 0x0d	; 13
 8ee:	80 64       	ori	r24, 0x40	; 64
 8f0:	8d b9       	out	0x0d, r24	; 13
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	08 95       	ret

000008f6 <SPI_enu_MasterSend>:
 8f6:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <LOC_u8_SPIState>
 8fa:	91 30       	cpi	r25, 0x01	; 1
 8fc:	71 f0       	breq	.+28     	; 0x91a <SPI_enu_MasterSend+0x24>
 8fe:	91 11       	cpse	r25, r1
 900:	0e c0       	rjmp	.+28     	; 0x91e <SPI_enu_MasterSend+0x28>
 902:	8f b9       	out	0x0f, r24	; 15
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <LOC_u8_SPIState>
 90a:	01 c0       	rjmp	.+2      	; 0x90e <SPI_enu_MasterSend+0x18>
 90c:	8f b1       	in	r24, 0x0f	; 15
 90e:	77 9b       	sbis	0x0e, 7	; 14
 910:	fd cf       	rjmp	.-6      	; 0x90c <SPI_enu_MasterSend+0x16>
 912:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <LOC_u8_SPIState>
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	08 95       	ret
 91a:	84 e0       	ldi	r24, 0x04	; 4
 91c:	08 95       	ret
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	08 95       	ret

00000922 <SPI_enu_GetCommState>:
 922:	00 97       	sbiw	r24, 0x00	; 0
 924:	31 f0       	breq	.+12     	; 0x932 <SPI_enu_GetCommState+0x10>
 926:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <LOC_u8_SPIState>
 92a:	fc 01       	movw	r30, r24
 92c:	20 83       	st	Z, r18
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	08 95       	ret
 932:	83 e0       	ldi	r24, 0x03	; 3
 934:	08 95       	ret

00000936 <__vector_12>:

// ISR
void __vector_12 (void)__attribute__((signal));

void __vector_12 (void)
{
 936:	1f 92       	push	r1
 938:	0f 92       	push	r0
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	0f 92       	push	r0
 93e:	11 24       	eor	r1, r1
    #if SPI_ISR_STATUS == SPI_INTERNAL_ISR        
    
        #if SPI_MCU_MODE == SPI_MASTER_MODE
    
            if ((SPCR >> SPCR_MSTR) & 1) // Making sure the SPIF was rasied due to an SPI operation ending
 940:	6c 99       	sbic	0x0d, 4	; 13
            {
                LOC_u8_SPIState = SPI_FREE;
 942:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <LOC_u8_SPIState>
    #else
    
        #error SPI_EXTERNAL_ISR is invald
    
    #endif
}
 946:	0f 90       	pop	r0
 948:	0f be       	out	0x3f, r0	; 63
 94a:	0f 90       	pop	r0
 94c:	1f 90       	pop	r1
 94e:	18 95       	reti

00000950 <__vector_6>:
void __vector_7 (void)__attribute__((signal));
void __vector_8 (void)__attribute__((signal));
void __vector_9 (void)__attribute__((signal));

void __vector_6 (void)
{
 950:	1f 92       	push	r1
 952:	0f 92       	push	r0
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	0f 92       	push	r0
 958:	11 24       	eor	r1, r1
 95a:	2f 93       	push	r18
 95c:	3f 93       	push	r19
 95e:	4f 93       	push	r20
 960:	5f 93       	push	r21
 962:	6f 93       	push	r22
 964:	7f 93       	push	r23
 966:	8f 93       	push	r24
 968:	9f 93       	push	r25
 96a:	af 93       	push	r26
 96c:	bf 93       	push	r27
 96e:	ef 93       	push	r30
 970:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CAPTURE_EVENT_ISR])
 972:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <LOC_apfun_IntServiceRoutinesFunctions>
 976:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <LOC_apfun_IntServiceRoutinesFunctions+0x1>
 97a:	30 97       	sbiw	r30, 0x00	; 0
 97c:	29 f0       	breq	.+10     	; 0x988 <__vector_6+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CAPTURE_EVENT_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CAPTURE_EVENT_ISR]);
 97e:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <LOC_apvid_IntServiceRoutinesParameters>
 982:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <LOC_apvid_IntServiceRoutinesParameters+0x1>
 986:	09 95       	icall
    }
}
 988:	ff 91       	pop	r31
 98a:	ef 91       	pop	r30
 98c:	bf 91       	pop	r27
 98e:	af 91       	pop	r26
 990:	9f 91       	pop	r25
 992:	8f 91       	pop	r24
 994:	7f 91       	pop	r23
 996:	6f 91       	pop	r22
 998:	5f 91       	pop	r21
 99a:	4f 91       	pop	r20
 99c:	3f 91       	pop	r19
 99e:	2f 91       	pop	r18
 9a0:	0f 90       	pop	r0
 9a2:	0f be       	out	0x3f, r0	; 63
 9a4:	0f 90       	pop	r0
 9a6:	1f 90       	pop	r1
 9a8:	18 95       	reti

000009aa <__vector_7>:

void __vector_7 (void)
{
 9aa:	1f 92       	push	r1
 9ac:	0f 92       	push	r0
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	0f 92       	push	r0
 9b2:	11 24       	eor	r1, r1
 9b4:	2f 93       	push	r18
 9b6:	3f 93       	push	r19
 9b8:	4f 93       	push	r20
 9ba:	5f 93       	push	r21
 9bc:	6f 93       	push	r22
 9be:	7f 93       	push	r23
 9c0:	8f 93       	push	r24
 9c2:	9f 93       	push	r25
 9c4:	af 93       	push	r26
 9c6:	bf 93       	push	r27
 9c8:	ef 93       	push	r30
 9ca:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_A_ISR])
 9cc:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <LOC_apfun_IntServiceRoutinesFunctions+0x2>
 9d0:	f0 91 7a 02 	lds	r31, 0x027A	; 0x80027a <LOC_apfun_IntServiceRoutinesFunctions+0x3>
 9d4:	30 97       	sbiw	r30, 0x00	; 0
 9d6:	29 f0       	breq	.+10     	; 0x9e2 <__vector_7+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_A_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CTC_A_ISR]);
 9d8:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <LOC_apvid_IntServiceRoutinesParameters+0x2>
 9dc:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <LOC_apvid_IntServiceRoutinesParameters+0x3>
 9e0:	09 95       	icall
    }
}
 9e2:	ff 91       	pop	r31
 9e4:	ef 91       	pop	r30
 9e6:	bf 91       	pop	r27
 9e8:	af 91       	pop	r26
 9ea:	9f 91       	pop	r25
 9ec:	8f 91       	pop	r24
 9ee:	7f 91       	pop	r23
 9f0:	6f 91       	pop	r22
 9f2:	5f 91       	pop	r21
 9f4:	4f 91       	pop	r20
 9f6:	3f 91       	pop	r19
 9f8:	2f 91       	pop	r18
 9fa:	0f 90       	pop	r0
 9fc:	0f be       	out	0x3f, r0	; 63
 9fe:	0f 90       	pop	r0
 a00:	1f 90       	pop	r1
 a02:	18 95       	reti

00000a04 <__vector_8>:

void __vector_8 (void)
{
 a04:	1f 92       	push	r1
 a06:	0f 92       	push	r0
 a08:	0f b6       	in	r0, 0x3f	; 63
 a0a:	0f 92       	push	r0
 a0c:	11 24       	eor	r1, r1
 a0e:	2f 93       	push	r18
 a10:	3f 93       	push	r19
 a12:	4f 93       	push	r20
 a14:	5f 93       	push	r21
 a16:	6f 93       	push	r22
 a18:	7f 93       	push	r23
 a1a:	8f 93       	push	r24
 a1c:	9f 93       	push	r25
 a1e:	af 93       	push	r26
 a20:	bf 93       	push	r27
 a22:	ef 93       	push	r30
 a24:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_B_ISR])
 a26:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <LOC_apfun_IntServiceRoutinesFunctions+0x4>
 a2a:	f0 91 7c 02 	lds	r31, 0x027C	; 0x80027c <LOC_apfun_IntServiceRoutinesFunctions+0x5>
 a2e:	30 97       	sbiw	r30, 0x00	; 0
 a30:	29 f0       	breq	.+10     	; 0xa3c <__vector_8+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_B_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CTC_B_ISR]);
 a32:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <LOC_apvid_IntServiceRoutinesParameters+0x4>
 a36:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <LOC_apvid_IntServiceRoutinesParameters+0x5>
 a3a:	09 95       	icall
    }
}
 a3c:	ff 91       	pop	r31
 a3e:	ef 91       	pop	r30
 a40:	bf 91       	pop	r27
 a42:	af 91       	pop	r26
 a44:	9f 91       	pop	r25
 a46:	8f 91       	pop	r24
 a48:	7f 91       	pop	r23
 a4a:	6f 91       	pop	r22
 a4c:	5f 91       	pop	r21
 a4e:	4f 91       	pop	r20
 a50:	3f 91       	pop	r19
 a52:	2f 91       	pop	r18
 a54:	0f 90       	pop	r0
 a56:	0f be       	out	0x3f, r0	; 63
 a58:	0f 90       	pop	r0
 a5a:	1f 90       	pop	r1
 a5c:	18 95       	reti

00000a5e <__vector_9>:

void __vector_9 (void)
{
 a5e:	1f 92       	push	r1
 a60:	0f 92       	push	r0
 a62:	0f b6       	in	r0, 0x3f	; 63
 a64:	0f 92       	push	r0
 a66:	11 24       	eor	r1, r1
 a68:	2f 93       	push	r18
 a6a:	3f 93       	push	r19
 a6c:	4f 93       	push	r20
 a6e:	5f 93       	push	r21
 a70:	6f 93       	push	r22
 a72:	7f 93       	push	r23
 a74:	8f 93       	push	r24
 a76:	9f 93       	push	r25
 a78:	af 93       	push	r26
 a7a:	bf 93       	push	r27
 a7c:	ef 93       	push	r30
 a7e:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_OVERFLOW_ISR])
 a80:	e0 91 7d 02 	lds	r30, 0x027D	; 0x80027d <LOC_apfun_IntServiceRoutinesFunctions+0x6>
 a84:	f0 91 7e 02 	lds	r31, 0x027E	; 0x80027e <LOC_apfun_IntServiceRoutinesFunctions+0x7>
 a88:	30 97       	sbiw	r30, 0x00	; 0
 a8a:	29 f0       	breq	.+10     	; 0xa96 <__vector_9+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_OVERFLOW_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_OVERFLOW_ISR]);
 a8c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <LOC_apvid_IntServiceRoutinesParameters+0x6>
 a90:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <LOC_apvid_IntServiceRoutinesParameters+0x7>
 a94:	09 95       	icall
    }
}
 a96:	ff 91       	pop	r31
 a98:	ef 91       	pop	r30
 a9a:	bf 91       	pop	r27
 a9c:	af 91       	pop	r26
 a9e:	9f 91       	pop	r25
 aa0:	8f 91       	pop	r24
 aa2:	7f 91       	pop	r23
 aa4:	6f 91       	pop	r22
 aa6:	5f 91       	pop	r21
 aa8:	4f 91       	pop	r20
 aaa:	3f 91       	pop	r19
 aac:	2f 91       	pop	r18
 aae:	0f 90       	pop	r0
 ab0:	0f be       	out	0x3f, r0	; 63
 ab2:	0f 90       	pop	r0
 ab4:	1f 90       	pop	r1
 ab6:	18 95       	reti

00000ab8 <__vector_4>:
void __vector_11 (void)__attribute__((signal));


void __vector_4 (void)
{
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
 ab8:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <apfun_ISRpointers>
 abc:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <apfun_ISRpointers+0x1>
 ac0:	30 97       	sbiw	r30, 0x00	; 0
 ac2:	29 f0       	breq	.+10     	; 0xace <__vector_4+0x16>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
 ac4:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <apvid_ISRParameters>
 ac8:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <apvid_ISRParameters+0x1>
 acc:	09 95       	icall
 ace:	08 95       	ret

00000ad0 <__vector_5>:
    }
}

void __vector_5 (void)
{
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
 ad0:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <apfun_ISRpointers>
 ad4:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <apfun_ISRpointers+0x1>
 ad8:	30 97       	sbiw	r30, 0x00	; 0
 ada:	29 f0       	breq	.+10     	; 0xae6 <__vector_5+0x16>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
 adc:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <apvid_ISRParameters>
 ae0:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <apvid_ISRParameters+0x1>
 ae4:	09 95       	icall
 ae6:	08 95       	ret

00000ae8 <__vector_10>:
    }
}

void __vector_10 (void)
{
    if(apfun_ISRpointers[TIMER_0_CTC_ISR])
 ae8:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <apfun_ISRpointers+0xc>
 aec:	f0 91 9c 02 	lds	r31, 0x029C	; 0x80029c <apfun_ISRpointers+0xd>
 af0:	30 97       	sbiw	r30, 0x00	; 0
 af2:	29 f0       	breq	.+10     	; 0xafe <__vector_10+0x16>
    {
       apfun_ISRpointers[TIMER_0_CTC_ISR](apvid_ISRParameters[TIMER_0_CTC_ISR]);
 af4:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <apvid_ISRParameters+0xc>
 af8:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <apvid_ISRParameters+0xd>
 afc:	09 95       	icall
 afe:	08 95       	ret

00000b00 <__vector_11>:
    }
}

void __vector_11 (void)
{
 b00:	1f 92       	push	r1
 b02:	0f 92       	push	r0
 b04:	0f b6       	in	r0, 0x3f	; 63
 b06:	0f 92       	push	r0
 b08:	11 24       	eor	r1, r1
 b0a:	2f 93       	push	r18
 b0c:	3f 93       	push	r19
 b0e:	4f 93       	push	r20
 b10:	5f 93       	push	r21
 b12:	6f 93       	push	r22
 b14:	7f 93       	push	r23
 b16:	8f 93       	push	r24
 b18:	9f 93       	push	r25
 b1a:	af 93       	push	r26
 b1c:	bf 93       	push	r27
 b1e:	ef 93       	push	r30
 b20:	ff 93       	push	r31
    if(apfun_ISRpointers[TIMER_0_OVERFLOW_ISR])
 b22:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <apfun_ISRpointers+0xe>
 b26:	f0 91 9e 02 	lds	r31, 0x029E	; 0x80029e <apfun_ISRpointers+0xf>
 b2a:	30 97       	sbiw	r30, 0x00	; 0
 b2c:	29 f0       	breq	.+10     	; 0xb38 <__vector_11+0x38>
    {
        apfun_ISRpointers[TIMER_0_OVERFLOW_ISR](apvid_ISRParameters[TIMER_0_OVERFLOW_ISR]);
 b2e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <apvid_ISRParameters+0xe>
 b32:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <apvid_ISRParameters+0xf>
 b36:	09 95       	icall
    }
}
 b38:	ff 91       	pop	r31
 b3a:	ef 91       	pop	r30
 b3c:	bf 91       	pop	r27
 b3e:	af 91       	pop	r26
 b40:	9f 91       	pop	r25
 b42:	8f 91       	pop	r24
 b44:	7f 91       	pop	r23
 b46:	6f 91       	pop	r22
 b48:	5f 91       	pop	r21
 b4a:	4f 91       	pop	r20
 b4c:	3f 91       	pop	r19
 b4e:	2f 91       	pop	r18
 b50:	0f 90       	pop	r0
 b52:	0f be       	out	0x3f, r0	; 63
 b54:	0f 90       	pop	r0
 b56:	1f 90       	pop	r1
 b58:	18 95       	reti

00000b5a <__tablejump2__>:
 b5a:	ee 0f       	add	r30, r30
 b5c:	ff 1f       	adc	r31, r31
 b5e:	05 90       	lpm	r0, Z+
 b60:	f4 91       	lpm	r31, Z
 b62:	e0 2d       	mov	r30, r0
 b64:	09 94       	ijmp

00000b66 <_exit>:
 b66:	f8 94       	cli

00000b68 <__stop_program>:
 b68:	ff cf       	rjmp	.-2      	; 0xb68 <__stop_program>
