
PWM Oscilloscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000526  00800060  00001a8c  00001b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000264  00800586  00800586  00002046  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002046  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a37  00000000  00000000  0000254c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ef  00000000  00000000  00006f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030bc  00000000  00000000  00008272  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000de0  00000000  00000000  0000b330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cd9  00000000  00000000  0000c110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006102  00000000  00000000  0000dde9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a8  00000000  00000000  00013eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__vector_1>
       8:	0c 94 47 08 	jmp	0x108e	; 0x108e <__vector_2>
       c:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__vector_3>
      10:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__vector_4>
      14:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__vector_5>
      18:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_6>
      1c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__vector_7>
      20:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__vector_8>
      24:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_9>
      28:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__vector_10>
      2c:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_11>
      30:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__vector_12>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	69 02       	muls	r22, r25
      56:	7e 02       	muls	r23, r30
      58:	a8 02       	muls	r26, r24
      5a:	af 02       	muls	r26, r31
      5c:	b6 02       	muls	r27, r22
      5e:	bd 02       	muls	r27, r29
      60:	c4 02       	muls	r28, r20

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	15 e0       	ldi	r17, 0x05	; 5
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ec e8       	ldi	r30, 0x8C	; 140
      76:	fa e1       	ldi	r31, 0x1A	; 26
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a6 38       	cpi	r26, 0x86	; 134
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	27 e0       	ldi	r18, 0x07	; 7
      86:	a6 e8       	ldi	r26, 0x86	; 134
      88:	b5 e0       	ldi	r27, 0x05	; 5
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	aa 3e       	cpi	r26, 0xEA	; 234
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
      98:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <main>:

void main(void)
{

	//Initializaions
	PWMScope_enu_Initialization();
      a0:	0e 94 81 00 	call	0x102	; 0x102 <PWMScope_enu_Initialization>

	//Running the scope
	PWMScope_enu_RunScope();
      a4:	0e 94 a4 00 	call	0x148	; 0x148 <PWMScope_enu_RunScope>
      a8:	08 95       	ret

000000aa <enu_GenerateScopeScreen>:
 * @brief Prints the homescreen using the defined configurations in the private header file
 * 
 * @return ErrorState_t 
 */
static ErrorState_t enu_GenerateScopeScreen(void)
{
      aa:	0f 93       	push	r16

    //Drawing Boarders
    //NOKIA5110_enu_DrawHorizontalLine(PWMSCOPE_BORDER_VERTICAL_SHIFT, PWMSCOPE_BORDER_HORIZOTAL_SHIFT, PWMSCOPE_BORDER_LENGTH, PWMSCOPE_BORDER_THICKNESS, PWMSCOPE_BORDER_COLOUR);

    //Drawing Static Texts
	NOKIA5110_enu_DrawString("Freq       kHz", 0, NOKIA5110_X_COORDINATE_MIN, NOKIA5110_BLACK_COLOUR);
      ac:	21 e0       	ldi	r18, 0x01	; 1
      ae:	40 e0       	ldi	r20, 0x00	; 0
      b0:	60 e0       	ldi	r22, 0x00	; 0
      b2:	89 e6       	ldi	r24, 0x69	; 105
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 80 06 	call	0xd00	; 0xd00 <NOKIA5110_enu_DrawString>
	NOKIA5110_enu_DrawString("Duty        %", 9, NOKIA5110_X_COORDINATE_MIN, NOKIA5110_BLACK_COLOUR);
      ba:	21 e0       	ldi	r18, 0x01	; 1
      bc:	40 e0       	ldi	r20, 0x00	; 0
      be:	69 e0       	ldi	r22, 0x09	; 9
      c0:	88 e7       	ldi	r24, 0x78	; 120
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	0e 94 80 06 	call	0xd00	; 0xd00 <NOKIA5110_enu_DrawString>

    //Drawing axis
    NOKIA5110_enu_DrawHorizontalLine(PWMSCOPE_X_AXIS_VERTICAL_SHIFT, PWMSCOPE_X_AXIS_HORIZOTAL_SHIFT, PWMSCOPE_X_AXIS_LENGTH, PWMSCOPE_X_AXIS_THICKNESS, PWMSCOPE_X_AXIS_COLOUR);
      c8:	01 e0       	ldi	r16, 0x01	; 1
      ca:	21 e0       	ldi	r18, 0x01	; 1
      cc:	44 e5       	ldi	r20, 0x54	; 84
      ce:	60 e0       	ldi	r22, 0x00	; 0
      d0:	8b e2       	ldi	r24, 0x2B	; 43
      d2:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <NOKIA5110_enu_DrawHorizontalLine>
    NOKIA5110_enu_DrawVerticalLine(PWMSCOPE_Y_AXIS_VERTICAL_SHIFT, PWMSCOPE_Y_AXIS_HORIZOTAL_SHIFT, PWMSCOPE_Y_AXIS_HEIGHT, PWMSCOPE_Y_AXIS_THICKNESS, PWMSCOPE_Y_AXIS_COLOUR);
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	4a e1       	ldi	r20, 0x1A	; 26
      da:	64 e0       	ldi	r22, 0x04	; 4
      dc:	86 e1       	ldi	r24, 0x16	; 22
      de:	0e 94 76 06 	call	0xcec	; 0xcec <NOKIA5110_enu_DrawVerticalLine>

    //Drawing Arrows 
    NOKIA5110_enu_DrawCharacter(0x5E, PWMSCOPE_Y_AXIS_VERTICAL_SHIFT, PWMSCOPE_Y_AXIS_HORIZOTAL_SHIFT -2, PWMSCOPE_Y_AXIS_COLOUR, NOKIA5110_ENABLE_OVERLAP);
      e2:	00 e0       	ldi	r16, 0x00	; 0
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	42 e0       	ldi	r20, 0x02	; 2
      e8:	66 e1       	ldi	r22, 0x16	; 22
      ea:	8e e5       	ldi	r24, 0x5E	; 94
      ec:	0e 94 4c 05 	call	0xa98	; 0xa98 <NOKIA5110_enu_DrawCharacter>
    NOKIA5110_enu_DrawCharacter(0x3E, PWMSCOPE_X_AXIS_VERTICAL_SHIFT - 3, PWMSCOPE_X_AXIS_HORIZOTAL_SHIFT + 79, PWMSCOPE_X_AXIS_COLOUR, NOKIA5110_ENABLE_OVERLAP);
      f0:	21 e0       	ldi	r18, 0x01	; 1
      f2:	4f e4       	ldi	r20, 0x4F	; 79
      f4:	68 e2       	ldi	r22, 0x28	; 40
      f6:	8e e3       	ldi	r24, 0x3E	; 62
      f8:	0e 94 4c 05 	call	0xa98	; 0xa98 <NOKIA5110_enu_DrawCharacter>

    //Drawing Scale
    
    return Local_u8_ErrorFlag;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	0f 91       	pop	r16
     100:	08 95       	ret

00000102 <PWMScope_enu_Initialization>:
 * @brief Initializes all the modules needed and prints the home screen
 * 
 * @return ErrorState_t 
 */
extern ErrorState_t PWMScope_enu_Initialization(void)
{
     102:	0f 93       	push	r16
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
    u8 Local_u8_ErrorFlag = ES_NOK;

    //Initializations    
    NOKIA5110_enu_Initialization();    //Initializing LCD
     108:	0e 94 c2 04 	call	0x984	; 0x984 <NOKIA5110_enu_Initialization>

    ICU_enu_Initialization(); //Initializing ICU
     10c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ICU_enu_Initialization>
    
    //Drawing Scope Screen
    enu_GenerateScopeScreen();
     110:	0e 94 55 00 	call	0xaa	; 0xaa <enu_GenerateScopeScreen>

    //Displaying Frequency in HZ
    NOKIA5110_enu_DrawNumber(LOC_af32_SignalsParameters[0], 0, 30, NOKIA5110_BLACK_COLOUR);
     114:	c2 e9       	ldi	r28, 0x92	; 146
     116:	d5 e0       	ldi	r29, 0x05	; 5
     118:	68 81       	ld	r22, Y
     11a:	79 81       	ldd	r23, Y+1	; 0x01
     11c:	8a 81       	ldd	r24, Y+2	; 0x02
     11e:	9b 81       	ldd	r25, Y+3	; 0x03
     120:	01 e0       	ldi	r16, 0x01	; 1
     122:	2e e1       	ldi	r18, 0x1E	; 30
     124:	40 e0       	ldi	r20, 0x00	; 0
     126:	0e 94 52 05 	call	0xaa4	; 0xaa4 <NOKIA5110_enu_DrawNumber>
            
    //Displaying Duty Ratio in %
    NOKIA5110_enu_DrawNumber(LOC_af32_SignalsParameters[1], 9, 30, NOKIA5110_BLACK_COLOUR);
     12a:	6c 81       	ldd	r22, Y+4	; 0x04
     12c:	7d 81       	ldd	r23, Y+5	; 0x05
     12e:	8e 81       	ldd	r24, Y+6	; 0x06
     130:	9f 81       	ldd	r25, Y+7	; 0x07
     132:	2e e1       	ldi	r18, 0x1E	; 30
     134:	49 e0       	ldi	r20, 0x09	; 9
     136:	0e 94 52 05 	call	0xaa4	; 0xaa4 <NOKIA5110_enu_DrawNumber>

    //Setting GIE
    SREG_vid_EnableBitI();
     13a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <SREG_vid_EnableBitI>

    return Local_u8_ErrorFlag;
}
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	0f 91       	pop	r16
     146:	08 95       	ret

00000148 <PWMScope_enu_RunScope>:
    u8 Local_u8_NewWave = False;

    while(1)
    {
        //Saving Old Values
        LOC_af32_OldSignalsParameters[0] = LOC_af32_SignalsParameters[0];
     148:	c2 e9       	ldi	r28, 0x92	; 146
     14a:	d5 e0       	ldi	r29, 0x05	; 5
     14c:	88 81       	ld	r24, Y
     14e:	99 81       	ldd	r25, Y+1	; 0x01
     150:	aa 81       	ldd	r26, Y+2	; 0x02
     152:	bb 81       	ldd	r27, Y+3	; 0x03
     154:	06 e8       	ldi	r16, 0x86	; 134
     156:	15 e0       	ldi	r17, 0x05	; 5
     158:	f8 01       	movw	r30, r16
     15a:	80 83       	st	Z, r24
     15c:	91 83       	std	Z+1, r25	; 0x01
     15e:	a2 83       	std	Z+2, r26	; 0x02
     160:	b3 83       	std	Z+3, r27	; 0x03
        LOC_af32_OldSignalsParameters[1] = LOC_af32_SignalsParameters[1];
     162:	8c 81       	ldd	r24, Y+4	; 0x04
     164:	9d 81       	ldd	r25, Y+5	; 0x05
     166:	ae 81       	ldd	r26, Y+6	; 0x06
     168:	bf 81       	ldd	r27, Y+7	; 0x07
     16a:	84 83       	std	Z+4, r24	; 0x04
     16c:	95 83       	std	Z+5, r25	; 0x05
     16e:	a6 83       	std	Z+6, r26	; 0x06
     170:	b7 83       	std	Z+7, r27	; 0x07
        LOC_af32_OldSignalsParameters[2] = LOC_af32_SignalsParameters[2];
     172:	88 85       	ldd	r24, Y+8	; 0x08
     174:	99 85       	ldd	r25, Y+9	; 0x09
     176:	aa 85       	ldd	r26, Y+10	; 0x0a
     178:	bb 85       	ldd	r27, Y+11	; 0x0b
     17a:	80 87       	std	Z+8, r24	; 0x08
     17c:	91 87       	std	Z+9, r25	; 0x09
     17e:	a2 87       	std	Z+10, r26	; 0x0a
     180:	b3 87       	std	Z+11, r27	; 0x0b

        ICU_enu_StartCapture();//Starting a capture
     182:	0e 94 8a 01 	call	0x314	; 0x314 <ICU_enu_StartCapture>
        
        ICU_enu_CalculateParameters(LOC_af32_SignalsParameters);//Calculating Parameters
     186:	ce 01       	movw	r24, r28
     188:	0e 94 a6 01 	call	0x34c	; 0x34c <ICU_enu_CalculateParameters>
        
        Local_u8_NewWave = (LOC_af32_OldSignalsParameters[0] != LOC_af32_SignalsParameters[0]) || (LOC_af32_OldSignalsParameters[1] != LOC_af32_SignalsParameters[1]) || (LOC_af32_OldSignalsParameters[2] != LOC_af32_SignalsParameters[2]);
     18c:	f8 01       	movw	r30, r16
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	c8 80       	ld	r12, Y
     198:	d9 80       	ldd	r13, Y+1	; 0x01
     19a:	ea 80       	ldd	r14, Y+2	; 0x02
     19c:	fb 80       	ldd	r15, Y+3	; 0x03
     19e:	a7 01       	movw	r20, r14
     1a0:	96 01       	movw	r18, r12
     1a2:	0e 94 3d 0b 	call	0x167a	; 0x167a <__cmpsf2>
     1a6:	81 11       	cpse	r24, r1
     1a8:	2a c0       	rjmp	.+84     	; 0x1fe <PWMScope_enu_RunScope+0xb6>
     1aa:	60 91 8a 05 	lds	r22, 0x058A	; 0x80058a <__data_end+0x4>
     1ae:	70 91 8b 05 	lds	r23, 0x058B	; 0x80058b <__data_end+0x5>
     1b2:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <__data_end+0x6>
     1b6:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <__data_end+0x7>
     1ba:	20 91 96 05 	lds	r18, 0x0596	; 0x800596 <LOC_af32_SignalsParameters+0x4>
     1be:	30 91 97 05 	lds	r19, 0x0597	; 0x800597 <LOC_af32_SignalsParameters+0x5>
     1c2:	40 91 98 05 	lds	r20, 0x0598	; 0x800598 <LOC_af32_SignalsParameters+0x6>
     1c6:	50 91 99 05 	lds	r21, 0x0599	; 0x800599 <LOC_af32_SignalsParameters+0x7>
     1ca:	0e 94 3d 0b 	call	0x167a	; 0x167a <__cmpsf2>
     1ce:	81 11       	cpse	r24, r1
     1d0:	18 c0       	rjmp	.+48     	; 0x202 <PWMScope_enu_RunScope+0xba>
     1d2:	60 91 8e 05 	lds	r22, 0x058E	; 0x80058e <__data_end+0x8>
     1d6:	70 91 8f 05 	lds	r23, 0x058F	; 0x80058f <__data_end+0x9>
     1da:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <__data_end+0xa>
     1de:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <__data_end+0xb>
     1e2:	20 91 9a 05 	lds	r18, 0x059A	; 0x80059a <LOC_af32_SignalsParameters+0x8>
     1e6:	30 91 9b 05 	lds	r19, 0x059B	; 0x80059b <LOC_af32_SignalsParameters+0x9>
     1ea:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <LOC_af32_SignalsParameters+0xa>
     1ee:	50 91 9d 05 	lds	r21, 0x059D	; 0x80059d <LOC_af32_SignalsParameters+0xb>
     1f2:	0e 94 3d 0b 	call	0x167a	; 0x167a <__cmpsf2>
     1f6:	88 23       	and	r24, r24
     1f8:	31 f0       	breq	.+12     	; 0x206 <PWMScope_enu_RunScope+0xbe>
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	05 c0       	rjmp	.+10     	; 0x208 <PWMScope_enu_RunScope+0xc0>
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	03 c0       	rjmp	.+6      	; 0x208 <PWMScope_enu_RunScope+0xc0>
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	01 c0       	rjmp	.+2      	; 0x208 <PWMScope_enu_RunScope+0xc0>
     206:	80 e0       	ldi	r24, 0x00	; 0

        if(Local_u8_NewWave)
     208:	88 23       	and	r24, r24
     20a:	09 f4       	brne	.+2      	; 0x20e <PWMScope_enu_RunScope+0xc6>
     20c:	9d cf       	rjmp	.-198    	; 0x148 <PWMScope_enu_RunScope>
        {
            //Displaying Frequency in HZ
            NOKIA5110_enu_DrawNumber(LOC_af32_SignalsParameters[0], 0, 30, NOKIA5110_BLACK_COLOUR);
     20e:	01 e0       	ldi	r16, 0x01	; 1
     210:	2e e1       	ldi	r18, 0x1E	; 30
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	c7 01       	movw	r24, r14
     216:	b6 01       	movw	r22, r12
     218:	0e 94 52 05 	call	0xaa4	; 0xaa4 <NOKIA5110_enu_DrawNumber>
            
            //Displaying Duty Ratio in %
            NOKIA5110_enu_DrawNumber(LOC_af32_SignalsParameters[1], 9, 30, NOKIA5110_BLACK_COLOUR);
     21c:	60 91 96 05 	lds	r22, 0x0596	; 0x800596 <LOC_af32_SignalsParameters+0x4>
     220:	70 91 97 05 	lds	r23, 0x0597	; 0x800597 <LOC_af32_SignalsParameters+0x5>
     224:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <LOC_af32_SignalsParameters+0x6>
     228:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <LOC_af32_SignalsParameters+0x7>
     22c:	2e e1       	ldi	r18, 0x1E	; 30
     22e:	49 e0       	ldi	r20, 0x09	; 9
     230:	0e 94 52 05 	call	0xaa4	; 0xaa4 <NOKIA5110_enu_DrawNumber>
     234:	89 cf       	rjmp	.-238    	; 0x148 <PWMScope_enu_RunScope>

00000236 <vid_IncrementOverFlowCounter>:
}

void vid_IncrementOverFlowCounter()
{

    LOC_au32_NumberOfOverflowsArray[0]++;
     236:	e0 ea       	ldi	r30, 0xA0	; 160
     238:	f5 e0       	ldi	r31, 0x05	; 5
     23a:	80 81       	ld	r24, Z
     23c:	91 81       	ldd	r25, Z+1	; 0x01
     23e:	a2 81       	ldd	r26, Z+2	; 0x02
     240:	b3 81       	ldd	r27, Z+3	; 0x03
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	a1 1d       	adc	r26, r1
     246:	b1 1d       	adc	r27, r1
     248:	80 83       	st	Z, r24
     24a:	91 83       	std	Z+1, r25	; 0x01
     24c:	a2 83       	std	Z+2, r26	; 0x02
     24e:	b3 83       	std	Z+3, r27	; 0x03
     250:	08 95       	ret

00000252 <vid_CapturingFunction>:

u16 TestVariable;
void vid_CapturingFunction(void* Copy_pvid_FunctionParameters)
{

    switch (LOC_u8_State)
     252:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <LOC_u8_State>
     256:	82 30       	cpi	r24, 0x02	; 2
     258:	61 f1       	breq	.+88     	; 0x2b2 <vid_CapturingFunction+0x60>
     25a:	83 30       	cpi	r24, 0x03	; 3
     25c:	a9 f0       	breq	.+42     	; 0x288 <vid_CapturingFunction+0x36>
     25e:	81 30       	cpi	r24, 0x01	; 1
     260:	f1 f5       	brne	.+124    	; 0x2de <vid_CapturingFunction+0x8c>
        
        
        case ICU_FIRST_RISING_EDGE:
        {
            
            Timer1_enu_SetTCNT1(0);
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 17 09 	call	0x122e	; 0x122e <Timer1_enu_SetTCNT1>

            LOC_au32_NumberOfOverflowsArray[0] = 0; //Resetting Overflow Counter
     26a:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <LOC_au32_NumberOfOverflowsArray>
     26e:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <LOC_au32_NumberOfOverflowsArray+0x1>
     272:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <LOC_au32_NumberOfOverflowsArray+0x2>
     276:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <LOC_au32_NumberOfOverflowsArray+0x3>

            Timer1_enu_SetInputCaptureEdge(TIMER1_ICU_FALLING_EDGE);            
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	0e 94 9d 09 	call	0x133a	; 0x133a <Timer1_enu_SetInputCaptureEdge>
            
            LOC_u8_State = ICU_FALLING_EDGE;  //Setting state machine to Falling edge
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <LOC_u8_State>
            

            break;
     286:	08 95       	ret
        }

        case ICU_FALLING_EDGE:
        {
            
            Timer1_enu_GetICR1(&LOC_u32_TonCounts);
     288:	8c ea       	ldi	r24, 0xAC	; 172
     28a:	95 e0       	ldi	r25, 0x05	; 5
     28c:	0e 94 02 09 	call	0x1204	; 0x1204 <Timer1_enu_GetICR1>

            LOC_au32_NumberOfOverflowsArray[1] = LOC_au32_NumberOfOverflowsArray[0];
     290:	e0 ea       	ldi	r30, 0xA0	; 160
     292:	f5 e0       	ldi	r31, 0x05	; 5
     294:	80 81       	ld	r24, Z
     296:	91 81       	ldd	r25, Z+1	; 0x01
     298:	a2 81       	ldd	r26, Z+2	; 0x02
     29a:	b3 81       	ldd	r27, Z+3	; 0x03
     29c:	84 83       	std	Z+4, r24	; 0x04
     29e:	95 83       	std	Z+5, r25	; 0x05
     2a0:	a6 83       	std	Z+6, r26	; 0x06
     2a2:	b7 83       	std	Z+7, r27	; 0x07
            
            Timer1_enu_SetInputCaptureEdge(TIMER1_ICU_RISING_EDGE);
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	0e 94 9d 09 	call	0x133a	; 0x133a <Timer1_enu_SetInputCaptureEdge>
            
            LOC_u8_State = ICU_SECOND_RISING_EDGE; //Setting state machine to Falling edge
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <LOC_u8_State>
            
            


            break;
     2b0:	08 95       	ret
        }
        
        case ICU_SECOND_RISING_EDGE:
        {
            Timer1_enu_GetICR1(&LOC_u32_PeriodCounts);
     2b2:	80 eb       	ldi	r24, 0xB0	; 176
     2b4:	95 e0       	ldi	r25, 0x05	; 5
     2b6:	0e 94 02 09 	call	0x1204	; 0x1204 <Timer1_enu_GetICR1>
            
            LOC_au32_NumberOfOverflowsArray[2] = LOC_au32_NumberOfOverflowsArray[0];
     2ba:	e0 ea       	ldi	r30, 0xA0	; 160
     2bc:	f5 e0       	ldi	r31, 0x05	; 5
     2be:	80 81       	ld	r24, Z
     2c0:	91 81       	ldd	r25, Z+1	; 0x01
     2c2:	a2 81       	ldd	r26, Z+2	; 0x02
     2c4:	b3 81       	ldd	r27, Z+3	; 0x03
     2c6:	80 87       	std	Z+8, r24	; 0x08
     2c8:	91 87       	std	Z+9, r25	; 0x09
     2ca:	a2 87       	std	Z+10, r26	; 0x0a
     2cc:	b3 87       	std	Z+11, r27	; 0x0b

            #if ICU_MODE == ICU_SNGLE_CAPTURE_MODE
            Timer1_enu_DisableInterrupt(TIMER1_CAPTURE_EVENT_ISR);
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0e 94 2d 09 	call	0x125a	; 0x125a <Timer1_enu_DisableInterrupt>
            Timer1_enu_DisableInterrupt(TIMER1_OVERFLOW_ISR);
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	0e 94 2d 09 	call	0x125a	; 0x125a <Timer1_enu_DisableInterrupt>
            LOC_u8_State = ICU_IDLE;
     2da:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <LOC_u8_State>
     2de:	08 95       	ret

000002e0 <ICU_enu_Initialization>:
extern ErrorState_t ICU_enu_Initialization()
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    //Initialize Timer peripheral: Timer1, Normal, PS 1024, and  Interrupt Mode for overflow and input capture
    Timer1_enu_Initialization();
     2e0:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <Timer1_enu_Initialization>
    Timer1_enu_DisableInterrupt(TIMER1_CAPTURE_EVENT_ISR);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	0e 94 2d 09 	call	0x125a	; 0x125a <Timer1_enu_DisableInterrupt>
    Timer1_enu_SetCallBackFunction(TIMER1_CAPTURE_EVENT_ISR, vid_CapturingFunction, NULL);
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	69 e2       	ldi	r22, 0x29	; 41
     2f0:	71 e0       	ldi	r23, 0x01	; 1
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	0e 94 1b 09 	call	0x1236	; 0x1236 <Timer1_enu_SetCallBackFunction>
    Timer1_enu_SetCallBackFunction(TIMER1_OVERFLOW_ISR, vid_IncrementOverFlowCounter, NULL);
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	6b e1       	ldi	r22, 0x1B	; 27
     2fe:	71 e0       	ldi	r23, 0x01	; 1
     300:	83 e0       	ldi	r24, 0x03	; 3
     302:	0e 94 1b 09 	call	0x1236	; 0x1236 <Timer1_enu_SetCallBackFunction>
    Timer1_enu_DisableInterrupt(TIMER1_OVERFLOW_ISR);
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	0e 94 2d 09 	call	0x125a	; 0x125a <Timer1_enu_DisableInterrupt>


    //Initialize ICU module
    LOC_u8_State = ICU_IDLE; //State machine must start as IDLE until activation
     30c:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <LOC_u8_State>
    // Timer_enu_DisableInterruptMode(ICU_TIMER_USED, TIMER_NORMAL); //Disabling Timer Interrupt
    // Timer_enu_SetCallBack(ICU_TIMER_USED, TIMER_NORMAL, vid_IncrementOverFlowCounter, NULL);//Setting Call Back Function

    return Local_u8_ErrorFlag;

}
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	08 95       	ret

00000314 <ICU_enu_StartCapture>:

extern ErrorState_t ICU_enu_StartCapture()
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    if(LOC_u8_State == ICU_IDLE)
     314:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <LOC_u8_State>
     318:	81 11       	cpse	r24, r1
     31a:	16 c0       	rjmp	.+44     	; 0x348 <ICU_enu_StartCapture+0x34>
    {
        
        LOC_u8_State = ICU_FIRST_RISING_EDGE; //State machine will begin from the 'FIRS_RISING_EGDE' State
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <LOC_u8_State>
        
        Timer1_enu_GetPS(&LOC_u16_Timer_PS);
     322:	8e e9       	ldi	r24, 0x9E	; 158
     324:	95 e0       	ldi	r25, 0x05	; 5
     326:	0e 94 69 09 	call	0x12d2	; 0x12d2 <Timer1_enu_GetPS>
        
        Timer1_enu_SetInputCaptureEdge(TIMER1_ICU_RISING_EDGE);
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	0e 94 9d 09 	call	0x133a	; 0x133a <Timer1_enu_SetInputCaptureEdge>

        Timer1_enu_ClearFlag(TIMER1_CAPTURE_EVENT_ISR); //Clearing Flag in case of pending interrupts
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 ad 09 	call	0x135a	; 0x135a <Timer1_enu_ClearFlag>
        
        Timer1_enu_ClearFlag(TIMER1_OVERFLOW_ISR); //Clearing Flag in case of pending interrupts
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	0e 94 ad 09 	call	0x135a	; 0x135a <Timer1_enu_ClearFlag>

        Timer1_enu_EnableInterrupt(TIMER1_CAPTURE_EVENT_ISR);
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	0e 94 4b 09 	call	0x1296	; 0x1296 <Timer1_enu_EnableInterrupt>
    
        Timer1_enu_EnableInterrupt(TIMER1_OVERFLOW_ISR);
     342:	83 e0       	ldi	r24, 0x03	; 3
     344:	0e 94 4b 09 	call	0x1296	; 0x1296 <Timer1_enu_EnableInterrupt>
    }

    return Local_u8_ErrorFlag;
}
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	08 95       	ret

0000034c <ICU_enu_CalculateParameters>:

extern ErrorState_t ICU_enu_CalculateParameters(f32* Copy_pf32_SignalParametersArray)
{
     34c:	8f 92       	push	r8
     34e:	9f 92       	push	r9
     350:	af 92       	push	r10
     352:	bf 92       	push	r11
     354:	cf 92       	push	r12
     356:	df 92       	push	r13
     358:	ef 92       	push	r14
     35a:	ff 92       	push	r15
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	ec 01       	movw	r28, r24
    u8 Local_u8_ErrorFlag = ES_NOK;
    f32 Local_f32_TimerFrequency = 16000000.0/LOC_u16_Timer_PS; 
     362:	60 91 9e 05 	lds	r22, 0x059E	; 0x80059e <LOC_u16_Timer_PS>
     366:	70 91 9f 05 	lds	r23, 0x059F	; 0x80059f <LOC_u16_Timer_PS+0x1>
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__floatunsisf>
     372:	9b 01       	movw	r18, r22
     374:	ac 01       	movw	r20, r24
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	74 e2       	ldi	r23, 0x24	; 36
     37a:	84 e7       	ldi	r24, 0x74	; 116
     37c:	9b e4       	ldi	r25, 0x4B	; 75
     37e:	0e 94 42 0b 	call	0x1684	; 0x1684 <__divsf3>
     382:	6b 01       	movw	r12, r22
     384:	7c 01       	movw	r14, r24
    
    if(LOC_u8_State == ICU_IDLE)
     386:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <LOC_u8_State>
     38a:	81 11       	cpse	r24, r1
     38c:	8a c0       	rjmp	.+276    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
    {

        LOC_u32_PeriodCounts += 65536ULL*LOC_au32_NumberOfOverflowsArray[2]; //Total Number of Period Counts
     38e:	e0 ea       	ldi	r30, 0xA0	; 160
     390:	f5 e0       	ldi	r31, 0x05	; 5
     392:	80 85       	ldd	r24, Z+8	; 0x08
     394:	91 85       	ldd	r25, Z+9	; 0x09
     396:	a2 85       	ldd	r26, Z+10	; 0x0a
     398:	b3 85       	ldd	r27, Z+11	; 0x0b
     39a:	dc 01       	movw	r26, r24
     39c:	99 27       	eor	r25, r25
     39e:	88 27       	eor	r24, r24
     3a0:	40 91 b0 05 	lds	r20, 0x05B0	; 0x8005b0 <LOC_u32_PeriodCounts>
     3a4:	50 91 b1 05 	lds	r21, 0x05B1	; 0x8005b1 <LOC_u32_PeriodCounts+0x1>
     3a8:	60 91 b2 05 	lds	r22, 0x05B2	; 0x8005b2 <LOC_u32_PeriodCounts+0x2>
     3ac:	70 91 b3 05 	lds	r23, 0x05B3	; 0x8005b3 <LOC_u32_PeriodCounts+0x3>
     3b0:	9a 01       	movw	r18, r20
     3b2:	ab 01       	movw	r20, r22
     3b4:	28 0f       	add	r18, r24
     3b6:	39 1f       	adc	r19, r25
     3b8:	4a 1f       	adc	r20, r26
     3ba:	5b 1f       	adc	r21, r27
     3bc:	20 93 b0 05 	sts	0x05B0, r18	; 0x8005b0 <LOC_u32_PeriodCounts>
     3c0:	30 93 b1 05 	sts	0x05B1, r19	; 0x8005b1 <LOC_u32_PeriodCounts+0x1>
     3c4:	40 93 b2 05 	sts	0x05B2, r20	; 0x8005b2 <LOC_u32_PeriodCounts+0x2>
     3c8:	50 93 b3 05 	sts	0x05B3, r21	; 0x8005b3 <LOC_u32_PeriodCounts+0x3>

        LOC_u32_TonCounts += 65536ULL*LOC_au32_NumberOfOverflowsArray[1]; //Total Number of Duty Counts
     3cc:	84 81       	ldd	r24, Z+4	; 0x04
     3ce:	95 81       	ldd	r25, Z+5	; 0x05
     3d0:	a6 81       	ldd	r26, Z+6	; 0x06
     3d2:	b7 81       	ldd	r27, Z+7	; 0x07
     3d4:	dc 01       	movw	r26, r24
     3d6:	99 27       	eor	r25, r25
     3d8:	88 27       	eor	r24, r24
     3da:	80 90 ac 05 	lds	r8, 0x05AC	; 0x8005ac <LOC_u32_TonCounts>
     3de:	90 90 ad 05 	lds	r9, 0x05AD	; 0x8005ad <LOC_u32_TonCounts+0x1>
     3e2:	a0 90 ae 05 	lds	r10, 0x05AE	; 0x8005ae <LOC_u32_TonCounts+0x2>
     3e6:	b0 90 af 05 	lds	r11, 0x05AF	; 0x8005af <LOC_u32_TonCounts+0x3>
     3ea:	88 0d       	add	r24, r8
     3ec:	99 1d       	adc	r25, r9
     3ee:	aa 1d       	adc	r26, r10
     3f0:	bb 1d       	adc	r27, r11
     3f2:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <LOC_u32_TonCounts>
     3f6:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <LOC_u32_TonCounts+0x1>
     3fa:	a0 93 ae 05 	sts	0x05AE, r26	; 0x8005ae <LOC_u32_TonCounts+0x2>
     3fe:	b0 93 af 05 	sts	0x05AF, r27	; 0x8005af <LOC_u32_TonCounts+0x3>

        //Calculating Frequency in KHz
        if(LOC_u32_PeriodCounts != 0)
     402:	21 15       	cp	r18, r1
     404:	31 05       	cpc	r19, r1
     406:	41 05       	cpc	r20, r1
     408:	51 05       	cpc	r21, r1
     40a:	89 f0       	breq	.+34     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
        {
            Copy_pf32_SignalParametersArray[0] = (Local_f32_TimerFrequency/(LOC_u32_PeriodCounts*1000UL));
     40c:	a8 ee       	ldi	r26, 0xE8	; 232
     40e:	b3 e0       	ldi	r27, 0x03	; 3
     410:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__muluhisi3>
     414:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__floatunsisf>
     418:	9b 01       	movw	r18, r22
     41a:	ac 01       	movw	r20, r24
     41c:	c7 01       	movw	r24, r14
     41e:	b6 01       	movw	r22, r12
     420:	0e 94 42 0b 	call	0x1684	; 0x1684 <__divsf3>
     424:	68 83       	st	Y, r22
     426:	79 83       	std	Y+1, r23	; 0x01
     428:	8a 83       	std	Y+2, r24	; 0x02
     42a:	9b 83       	std	Y+3, r25	; 0x03
     42c:	04 c0       	rjmp	.+8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
        }
        else
        {
            Copy_pf32_SignalParametersArray[0] = 0; //dc
     42e:	18 82       	st	Y, r1
     430:	19 82       	std	Y+1, r1	; 0x01
     432:	1a 82       	std	Y+2, r1	; 0x02
     434:	1b 82       	std	Y+3, r1	; 0x03
        }

        if(LOC_u32_PeriodCounts != 0)
     436:	c0 90 b0 05 	lds	r12, 0x05B0	; 0x8005b0 <LOC_u32_PeriodCounts>
     43a:	d0 90 b1 05 	lds	r13, 0x05B1	; 0x8005b1 <LOC_u32_PeriodCounts+0x1>
     43e:	e0 90 b2 05 	lds	r14, 0x05B2	; 0x8005b2 <LOC_u32_PeriodCounts+0x2>
     442:	f0 90 b3 05 	lds	r15, 0x05B3	; 0x8005b3 <LOC_u32_PeriodCounts+0x3>
     446:	c1 14       	cp	r12, r1
     448:	d1 04       	cpc	r13, r1
     44a:	e1 04       	cpc	r14, r1
     44c:	f1 04       	cpc	r15, r1
     44e:	09 f1       	breq	.+66     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
        {
            //Calculating Duty Ratio in %
            Copy_pf32_SignalParametersArray[1] = ((f32)LOC_u32_TonCounts*100UL)/(LOC_u32_PeriodCounts);
     450:	60 91 ac 05 	lds	r22, 0x05AC	; 0x8005ac <LOC_u32_TonCounts>
     454:	70 91 ad 05 	lds	r23, 0x05AD	; 0x8005ad <LOC_u32_TonCounts+0x1>
     458:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <LOC_u32_TonCounts+0x2>
     45c:	90 91 af 05 	lds	r25, 0x05AF	; 0x8005af <LOC_u32_TonCounts+0x3>
     460:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__floatunsisf>
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	48 ec       	ldi	r20, 0xC8	; 200
     46a:	52 e4       	ldi	r21, 0x42	; 66
     46c:	0e 94 95 0c 	call	0x192a	; 0x192a <__mulsf3>
     470:	4b 01       	movw	r8, r22
     472:	5c 01       	movw	r10, r24
     474:	c7 01       	movw	r24, r14
     476:	b6 01       	movw	r22, r12
     478:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__floatunsisf>
     47c:	9b 01       	movw	r18, r22
     47e:	ac 01       	movw	r20, r24
     480:	c5 01       	movw	r24, r10
     482:	b4 01       	movw	r22, r8
     484:	0e 94 42 0b 	call	0x1684	; 0x1684 <__divsf3>
     488:	6c 83       	std	Y+4, r22	; 0x04
     48a:	7d 83       	std	Y+5, r23	; 0x05
     48c:	8e 83       	std	Y+6, r24	; 0x06
     48e:	9f 83       	std	Y+7, r25	; 0x07
     490:	08 c0       	rjmp	.+16     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
        }   
        else
        {
            Copy_pf32_SignalParametersArray[1] = 100; 
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	a8 ec       	ldi	r26, 0xC8	; 200
     498:	b2 e4       	ldi	r27, 0x42	; 66
     49a:	8c 83       	std	Y+4, r24	; 0x04
     49c:	9d 83       	std	Y+5, r25	; 0x05
     49e:	ae 83       	std	Y+6, r26	; 0x06
     4a0:	bf 83       	std	Y+7, r27	; 0x07
        }
    
    }

    return Local_u8_ErrorFlag;
}
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	df 90       	pop	r13
     4ae:	cf 90       	pop	r12
     4b0:	bf 90       	pop	r11
     4b2:	af 90       	pop	r10
     4b4:	9f 90       	pop	r9
     4b6:	8f 90       	pop	r8
     4b8:	08 95       	ret

000004ba <enu_GenerateFrame>:
    u8 Local_u8_ErrorFlag = ES_NOK;

    Local_u8_ErrorFlag = enu_CopyPixelByCooridnates(Copy_u8_Yoriginal, Copy_u8_Xoriginal, Copy_u8_Ycopied, Copy_u8_Xcopied);

    return Local_u8_ErrorFlag;
}
     4ba:	fb 01       	movw	r30, r22
     4bc:	10 82       	st	Z, r1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	87 30       	cpi	r24, 0x07	; 7
     4c2:	91 05       	cpc	r25, r1
     4c4:	08 f0       	brcs	.+2      	; 0x4c8 <enu_GenerateFrame+0xe>
     4c6:	67 c0       	rjmp	.+206    	; 0x596 <enu_GenerateFrame+0xdc>
     4c8:	fc 01       	movw	r30, r24
     4ca:	e6 5d       	subi	r30, 0xD6	; 214
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__tablejump2__>
     4d2:	e0 e6       	ldi	r30, 0x60	; 96
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	20 81       	ld	r18, Z
     4d8:	91 81       	ldd	r25, Z+1	; 0x01
     4da:	42 81       	ldd	r20, Z+2	; 0x02
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	22 0f       	add	r18, r18
     4e0:	33 1f       	adc	r19, r19
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	89 2f       	mov	r24, r25
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	20 62       	ori	r18, 0x20	; 32
     4f0:	82 2b       	or	r24, r18
     4f2:	84 2b       	or	r24, r20
     4f4:	fb 01       	movw	r30, r22
     4f6:	80 83       	st	Z, r24
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	08 95       	ret
     4fc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     500:	88 23       	and	r24, r24
     502:	51 f0       	breq	.+20     	; 0x518 <enu_GenerateFrame+0x5e>
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	61 f0       	breq	.+24     	; 0x520 <enu_GenerateFrame+0x66>
     508:	82 30       	cpi	r24, 0x02	; 2
     50a:	71 f0       	breq	.+28     	; 0x528 <enu_GenerateFrame+0x6e>
     50c:	83 30       	cpi	r24, 0x03	; 3
     50e:	81 f4       	brne	.+32     	; 0x530 <enu_GenerateFrame+0x76>
     510:	41 e0       	ldi	r20, 0x01	; 1
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	0f c0       	rjmp	.+30     	; 0x536 <enu_GenerateFrame+0x7c>
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0b c0       	rjmp	.+22     	; 0x536 <enu_GenerateFrame+0x7c>
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	07 c0       	rjmp	.+14     	; 0x536 <enu_GenerateFrame+0x7c>
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	03 c0       	rjmp	.+6      	; 0x536 <enu_GenerateFrame+0x7c>
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	81 11       	cpse	r24, r1
     538:	2f c0       	rjmp	.+94     	; 0x598 <enu_GenerateFrame+0xde>
     53a:	29 2f       	mov	r18, r25
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	22 0f       	add	r18, r18
     540:	33 1f       	adc	r19, r19
     542:	22 0f       	add	r18, r18
     544:	33 1f       	adc	r19, r19
     546:	24 2b       	or	r18, r20
     548:	28 60       	ori	r18, 0x08	; 8
     54a:	fb 01       	movw	r30, r22
     54c:	20 83       	st	Z, r18
     54e:	08 95       	ret
     550:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     554:	80 64       	ori	r24, 0x40	; 64
     556:	fb 01       	movw	r30, r22
     558:	80 83       	st	Z, r24
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	08 95       	ret
     55e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     562:	80 68       	ori	r24, 0x80	; 128
     564:	fb 01       	movw	r30, r22
     566:	80 83       	st	Z, r24
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	08 95       	ret
     56c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     570:	84 60       	ori	r24, 0x04	; 4
     572:	fb 01       	movw	r30, r22
     574:	80 83       	st	Z, r24
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	08 95       	ret
     57a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
     57e:	80 61       	ori	r24, 0x10	; 16
     580:	fb 01       	movw	r30, r22
     582:	80 83       	st	Z, r24
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	08 95       	ret
     588:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
     58c:	80 68       	ori	r24, 0x80	; 128
     58e:	fb 01       	movw	r30, r22
     590:	80 83       	st	Z, r24
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	08 95       	ret
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	08 95       	ret

0000059a <enu_ConvertCoordinatesToAddresses>:
     59a:	00 97       	sbiw	r24, 0x00	; 0
     59c:	51 f0       	breq	.+20     	; 0x5b2 <enu_ConvertCoordinatesToAddresses+0x18>
     59e:	fc 01       	movw	r30, r24
     5a0:	20 81       	ld	r18, Z
     5a2:	20 33       	cpi	r18, 0x30	; 48
     5a4:	40 f4       	brcc	.+16     	; 0x5b6 <enu_ConvertCoordinatesToAddresses+0x1c>
     5a6:	26 95       	lsr	r18
     5a8:	26 95       	lsr	r18
     5aa:	26 95       	lsr	r18
     5ac:	20 83       	st	Z, r18
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	08 95       	ret
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	08 95       	ret
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	08 95       	ret

000005ba <enu_PassByteToSPI>:
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	1f 92       	push	r1
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	18 2f       	mov	r17, r24
     5c8:	ce 01       	movw	r24, r28
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	0e 94 cf 08 	call	0x119e	; 0x119e <SPI_enu_GetCommState>
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	81 11       	cpse	r24, r1
     5d4:	15 c0       	rjmp	.+42     	; 0x600 <enu_PassByteToSPI+0x46>
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	64 e0       	ldi	r22, 0x04	; 4
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enu_SetPinValue>
     5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <enu_PassByteToSPI+0x28>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <enu_PassByteToSPI+0x2a>
     5e4:	81 2f       	mov	r24, r17
     5e6:	0e 94 b9 08 	call	0x1172	; 0x1172 <SPI_enu_MasterSend>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <enu_PassByteToSPI+0x32>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <enu_PassByteToSPI+0x34>
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	64 e0       	ldi	r22, 0x04	; 4
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enu_SetPinValue>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <enu_PassByteToSPI+0x40>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <enu_PassByteToSPI+0x42>
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <enu_PassByteToSPI+0x48>
     600:	84 e0       	ldi	r24, 0x04	; 4
     602:	0f 90       	pop	r0
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	08 95       	ret

0000060c <enu_SendCommand>:
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	1f 92       	push	r1
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	be 01       	movw	r22, r28
     618:	6f 5f       	subi	r22, 0xFF	; 255
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <enu_GenerateFrame>
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	63 e0       	ldi	r22, 0x03	; 3
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enu_SetPinValue>
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <enu_PassByteToSPI>
     630:	0f 90       	pop	r0
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <enu_SendData>:
     638:	cf 93       	push	r28
     63a:	c8 2f       	mov	r28, r24
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	63 e0       	ldi	r22, 0x03	; 3
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enu_SetPinValue>
     646:	8c 2f       	mov	r24, r28
     648:	0e 94 dd 02 	call	0x5ba	; 0x5ba <enu_PassByteToSPI>
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <enu_DrawPixel>:
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	1f 92       	push	r1
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	89 83       	std	Y+1, r24	; 0x01
     662:	64 35       	cpi	r22, 0x54	; 84
     664:	c8 f5       	brcc	.+114    	; 0x6d8 <enu_DrawPixel+0x88>
     666:	80 33       	cpi	r24, 0x30	; 48
     668:	c8 f5       	brcc	.+114    	; 0x6dc <enu_DrawPixel+0x8c>
     66a:	42 30       	cpi	r20, 0x02	; 2
     66c:	c8 f5       	brcc	.+114    	; 0x6e0 <enu_DrawPixel+0x90>
     66e:	f4 2e       	mov	r15, r20
     670:	16 2f       	mov	r17, r22
     672:	08 2f       	mov	r16, r24
     674:	07 70       	andi	r16, 0x07	; 7
     676:	ce 01       	movw	r24, r28
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	0e 94 cd 02 	call	0x59a	; 0x59a <enu_ConvertCoordinatesToAddresses>
     67e:	49 81       	ldd	r20, Y+1	; 0x01
     680:	84 e5       	ldi	r24, 0x54	; 84
     682:	48 9f       	mul	r20, r24
     684:	f0 01       	movw	r30, r0
     686:	11 24       	eor	r1, r1
     688:	eb 54       	subi	r30, 0x4B	; 75
     68a:	fa 4f       	sbci	r31, 0xFA	; 250
     68c:	e1 0f       	add	r30, r17
     68e:	f1 1d       	adc	r31, r1
     690:	80 81       	ld	r24, Z
     692:	21 e0       	ldi	r18, 0x01	; 1
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	00 2e       	mov	r0, r16
     698:	02 c0       	rjmp	.+4      	; 0x69e <enu_DrawPixel+0x4e>
     69a:	22 0f       	add	r18, r18
     69c:	33 1f       	adc	r19, r19
     69e:	0a 94       	dec	r0
     6a0:	e2 f7       	brpl	.-8      	; 0x69a <enu_DrawPixel+0x4a>
     6a2:	20 95       	com	r18
     6a4:	28 23       	and	r18, r24
     6a6:	8f 2d       	mov	r24, r15
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <enu_DrawPixel+0x60>
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	0a 95       	dec	r16
     6b2:	e2 f7       	brpl	.-8      	; 0x6ac <enu_DrawPixel+0x5c>
     6b4:	02 2f       	mov	r16, r18
     6b6:	08 2b       	or	r16, r24
     6b8:	00 83       	st	Z, r16
     6ba:	e0 e6       	ldi	r30, 0x60	; 96
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	44 83       	std	Z+4, r20	; 0x04
     6c0:	15 83       	std	Z+5, r17	; 0x05
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	0e 94 06 03 	call	0x60c	; 0x60c <enu_SendCommand>
     6c8:	83 e0       	ldi	r24, 0x03	; 3
     6ca:	0e 94 06 03 	call	0x60c	; 0x60c <enu_SendCommand>
     6ce:	80 2f       	mov	r24, r16
     6d0:	0e 94 1c 03 	call	0x638	; 0x638 <enu_SendData>
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <enu_DrawPixel+0x92>
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	03 c0       	rjmp	.+6      	; 0x6e2 <enu_DrawPixel+0x92>
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <enu_DrawPixel+0x92>
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	0f 90       	pop	r0
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	08 95       	ret

000006f0 <enu_DrawFillRectangle>:
     6f0:	af 92       	push	r10
     6f2:	bf 92       	push	r11
     6f4:	cf 92       	push	r12
     6f6:	df 92       	push	r13
     6f8:	ef 92       	push	r14
     6fa:	ff 92       	push	r15
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	1f 92       	push	r1
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	a8 2e       	mov	r10, r24
     70c:	16 2f       	mov	r17, r22
     70e:	19 82       	std	Y+1, r1	; 0x01
     710:	64 35       	cpi	r22, 0x54	; 84
     712:	28 f4       	brcc	.+10     	; 0x71e <enu_DrawFillRectangle+0x2e>
     714:	8f e2       	ldi	r24, 0x2F	; 47
     716:	8a 15       	cp	r24, r10
     718:	20 f4       	brcc	.+8      	; 0x722 <enu_DrawFillRectangle+0x32>
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	03 c0       	rjmp	.+6      	; 0x724 <enu_DrawFillRectangle+0x34>
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	01 c0       	rjmp	.+2      	; 0x724 <enu_DrawFillRectangle+0x34>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	45 35       	cpi	r20, 0x55	; 85
     726:	20 f4       	brcc	.+8      	; 0x730 <enu_DrawFillRectangle+0x40>
     728:	21 33       	cpi	r18, 0x31	; 49
     72a:	20 f0       	brcs	.+8      	; 0x734 <enu_DrawFillRectangle+0x44>
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	03 c0       	rjmp	.+6      	; 0x736 <enu_DrawFillRectangle+0x46>
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	01 c0       	rjmp	.+2      	; 0x736 <enu_DrawFillRectangle+0x46>
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	69 01       	movw	r12, r18
     73a:	ca 0c       	add	r12, r10
     73c:	d1 1c       	adc	r13, r1
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	7a 01       	movw	r14, r20
     742:	e1 0e       	add	r14, r17
     744:	f1 1c       	adc	r15, r1
     746:	88 23       	and	r24, r24
     748:	49 f1       	breq	.+82     	; 0x79c <enu_DrawFillRectangle+0xac>
     74a:	02 30       	cpi	r16, 0x02	; 2
     74c:	48 f5       	brcc	.+82     	; 0x7a0 <enu_DrawFillRectangle+0xb0>
     74e:	99 23       	and	r25, r25
     750:	49 f1       	breq	.+82     	; 0x7a4 <enu_DrawFillRectangle+0xb4>
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	0e 94 cd 02 	call	0x59a	; 0x59a <enu_ConvertCoordinatesToAddresses>
     75a:	e0 e6       	ldi	r30, 0x60	; 96
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	84 83       	std	Z+4, r24	; 0x04
     762:	15 83       	std	Z+5, r17	; 0x05
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	0e 94 06 03 	call	0x60c	; 0x60c <enu_SendCommand>
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	0e 94 06 03 	call	0x60c	; 0x60c <enu_SendCommand>
     770:	0e c0       	rjmp	.+28     	; 0x78e <enu_DrawFillRectangle+0x9e>
     772:	40 2f       	mov	r20, r16
     774:	61 2f       	mov	r22, r17
     776:	8b 2d       	mov	r24, r11
     778:	0e 94 28 03 	call	0x650	; 0x650 <enu_DrawPixel>
     77c:	b3 94       	inc	r11
     77e:	01 c0       	rjmp	.+2      	; 0x782 <enu_DrawFillRectangle+0x92>
     780:	ba 2c       	mov	r11, r10
     782:	8b 2d       	mov	r24, r11
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	8c 15       	cp	r24, r12
     788:	9d 05       	cpc	r25, r13
     78a:	9c f3       	brlt	.-26     	; 0x772 <enu_DrawFillRectangle+0x82>
     78c:	1f 5f       	subi	r17, 0xFF	; 255
     78e:	81 2f       	mov	r24, r17
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	8e 15       	cp	r24, r14
     794:	9f 05       	cpc	r25, r15
     796:	a4 f3       	brlt	.-24     	; 0x780 <enu_DrawFillRectangle+0x90>
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <enu_DrawFillRectangle+0xb6>
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	03 c0       	rjmp	.+6      	; 0x7a6 <enu_DrawFillRectangle+0xb6>
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <enu_DrawFillRectangle+0xb6>
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	0f 90       	pop	r0
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	bf 90       	pop	r11
     7ba:	af 90       	pop	r10
     7bc:	08 95       	ret

000007be <enu_DrawASCII>:
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	c8 2e       	mov	r12, r24
     7d0:	f6 2e       	mov	r15, r22
     7d2:	e4 2e       	mov	r14, r20
     7d4:	d2 2e       	mov	r13, r18
     7d6:	01 30       	cpi	r16, 0x01	; 1
     7d8:	39 f4       	brne	.+14     	; 0x7e8 <enu_DrawASCII+0x2a>
     7da:	00 e0       	ldi	r16, 0x00	; 0
     7dc:	28 e0       	ldi	r18, 0x08	; 8
     7de:	45 e0       	ldi	r20, 0x05	; 5
     7e0:	6e 2d       	mov	r22, r14
     7e2:	8f 2d       	mov	r24, r15
     7e4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <enu_DrawFillRectangle>
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	1e c0       	rjmp	.+60     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     7ec:	8c 2d       	mov	r24, r12
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	fc 01       	movw	r30, r24
     7f2:	ee 0f       	add	r30, r30
     7f4:	ff 1f       	adc	r31, r31
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	e8 0f       	add	r30, r24
     7fc:	f9 1f       	adc	r31, r25
     7fe:	e1 0f       	add	r30, r17
     800:	f1 1d       	adc	r31, r1
     802:	ea 57       	subi	r30, 0x7A	; 122
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	d0 81       	ld	r29, Z
     808:	c0 e0       	ldi	r28, 0x00	; 0
     80a:	0b c0       	rjmp	.+22     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     80c:	d0 ff       	sbrs	r29, 0
     80e:	07 c0       	rjmp	.+14     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     810:	4d 2d       	mov	r20, r13
     812:	61 2f       	mov	r22, r17
     814:	6e 0d       	add	r22, r14
     816:	8c 2f       	mov	r24, r28
     818:	8f 0d       	add	r24, r15
     81a:	0e 94 28 03 	call	0x650	; 0x650 <enu_DrawPixel>
     81e:	cf 5f       	subi	r28, 0xFF	; 255
     820:	d6 95       	lsr	r29
     822:	c8 30       	cpi	r28, 0x08	; 8
     824:	98 f3       	brcs	.-26     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     826:	1f 5f       	subi	r17, 0xFF	; 255
     828:	15 30       	cpi	r17, 0x05	; 5
     82a:	00 f3       	brcs	.-64     	; 0x7ec <enu_DrawASCII+0x2e>
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	df 90       	pop	r13
     83c:	cf 90       	pop	r12
     83e:	08 95       	ret

00000840 <enu_DrawVerticalLine>:
     840:	af 92       	push	r10
     842:	bf 92       	push	r11
     844:	cf 92       	push	r12
     846:	df 92       	push	r13
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	80 33       	cpi	r24, 0x30	; 48
     856:	40 f4       	brcc	.+16     	; 0x868 <__stack+0x9>
     858:	64 35       	cpi	r22, 0x54	; 84
     85a:	40 f4       	brcc	.+16     	; 0x86c <__stack+0xd>
     85c:	02 30       	cpi	r16, 0x02	; 2
     85e:	40 f4       	brcc	.+16     	; 0x870 <__stack+0x11>
     860:	41 33       	cpi	r20, 0x31	; 49
     862:	40 f0       	brcs	.+16     	; 0x874 <__stack+0x15>
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	07 c0       	rjmp	.+14     	; 0x876 <__stack+0x17>
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	05 c0       	rjmp	.+10     	; 0x876 <__stack+0x17>
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	03 c0       	rjmp	.+6      	; 0x876 <__stack+0x17>
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	01 c0       	rjmp	.+2      	; 0x876 <__stack+0x17>
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	91 11       	cpse	r25, r1
     878:	1c c0       	rjmp	.+56     	; 0x8b2 <__stack+0x53>
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	29 c0       	rjmp	.+82     	; 0x8d0 <__stack+0x71>
     87e:	ec 2c       	mov	r14, r12
     880:	f1 2c       	mov	r15, r1
     882:	ed 0c       	add	r14, r13
     884:	f1 1c       	adc	r15, r1
     886:	dd 2d       	mov	r29, r13
     888:	dc 0d       	add	r29, r12
     88a:	cd 2d       	mov	r28, r13
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	80 e3       	ldi	r24, 0x30	; 48
     890:	e8 16       	cp	r14, r24
     892:	f1 04       	cpc	r15, r1
     894:	24 f0       	brlt	.+8      	; 0x89e <__stack+0x3f>
     896:	c0 33       	cpi	r28, 0x30	; 48
     898:	10 f0       	brcs	.+4      	; 0x89e <__stack+0x3f>
     89a:	d0 53       	subi	r29, 0x30	; 48
     89c:	c0 e0       	ldi	r28, 0x00	; 0
     89e:	40 2f       	mov	r20, r16
     8a0:	61 2f       	mov	r22, r17
     8a2:	8c 2f       	mov	r24, r28
     8a4:	0e 94 28 03 	call	0x650	; 0x650 <enu_DrawPixel>
     8a8:	cf 5f       	subi	r28, 0xFF	; 255
     8aa:	dc 17       	cp	r29, r28
     8ac:	80 f7       	brcc	.-32     	; 0x88e <__stack+0x2f>
     8ae:	1f 5f       	subi	r17, 0xFF	; 255
     8b0:	05 c0       	rjmp	.+10     	; 0x8bc <__stack+0x5d>
     8b2:	a2 2e       	mov	r10, r18
     8b4:	c4 2e       	mov	r12, r20
     8b6:	b6 2e       	mov	r11, r22
     8b8:	d8 2e       	mov	r13, r24
     8ba:	16 2f       	mov	r17, r22
     8bc:	a1 2f       	mov	r26, r17
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	ea 2d       	mov	r30, r10
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	eb 0d       	add	r30, r11
     8c6:	f1 1d       	adc	r31, r1
     8c8:	ae 17       	cp	r26, r30
     8ca:	bf 07       	cpc	r27, r31
     8cc:	c4 f2       	brlt	.-80     	; 0x87e <__stack+0x1f>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	08 95       	ret

000008e6 <enu_DrawHorizontalLine>:
     8e6:	af 92       	push	r10
     8e8:	bf 92       	push	r11
     8ea:	cf 92       	push	r12
     8ec:	df 92       	push	r13
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	80 33       	cpi	r24, 0x30	; 48
     8fc:	30 f4       	brcc	.+12     	; 0x90a <enu_DrawHorizontalLine+0x24>
     8fe:	64 35       	cpi	r22, 0x54	; 84
     900:	30 f4       	brcc	.+12     	; 0x90e <enu_DrawHorizontalLine+0x28>
     902:	02 30       	cpi	r16, 0x02	; 2
     904:	30 f0       	brcs	.+12     	; 0x912 <enu_DrawHorizontalLine+0x2c>
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	05 c0       	rjmp	.+10     	; 0x914 <enu_DrawHorizontalLine+0x2e>
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	03 c0       	rjmp	.+6      	; 0x914 <enu_DrawHorizontalLine+0x2e>
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	01 c0       	rjmp	.+2      	; 0x914 <enu_DrawHorizontalLine+0x2e>
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	91 11       	cpse	r25, r1
     916:	1c c0       	rjmp	.+56     	; 0x950 <enu_DrawHorizontalLine+0x6a>
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	29 c0       	rjmp	.+82     	; 0x96e <enu_DrawHorizontalLine+0x88>
     91c:	ec 2c       	mov	r14, r12
     91e:	f1 2c       	mov	r15, r1
     920:	ed 0c       	add	r14, r13
     922:	f1 1c       	adc	r15, r1
     924:	dd 2d       	mov	r29, r13
     926:	dc 0d       	add	r29, r12
     928:	cd 2d       	mov	r28, r13
     92a:	0e c0       	rjmp	.+28     	; 0x948 <enu_DrawHorizontalLine+0x62>
     92c:	84 e5       	ldi	r24, 0x54	; 84
     92e:	e8 16       	cp	r14, r24
     930:	f1 04       	cpc	r15, r1
     932:	24 f0       	brlt	.+8      	; 0x93c <enu_DrawHorizontalLine+0x56>
     934:	c4 35       	cpi	r28, 0x54	; 84
     936:	10 f0       	brcs	.+4      	; 0x93c <enu_DrawHorizontalLine+0x56>
     938:	d4 55       	subi	r29, 0x54	; 84
     93a:	c0 e0       	ldi	r28, 0x00	; 0
     93c:	40 2f       	mov	r20, r16
     93e:	6c 2f       	mov	r22, r28
     940:	81 2f       	mov	r24, r17
     942:	0e 94 28 03 	call	0x650	; 0x650 <enu_DrawPixel>
     946:	cf 5f       	subi	r28, 0xFF	; 255
     948:	dc 17       	cp	r29, r28
     94a:	80 f7       	brcc	.-32     	; 0x92c <enu_DrawHorizontalLine+0x46>
     94c:	1f 5f       	subi	r17, 0xFF	; 255
     94e:	05 c0       	rjmp	.+10     	; 0x95a <enu_DrawHorizontalLine+0x74>
     950:	a2 2e       	mov	r10, r18
     952:	c4 2e       	mov	r12, r20
     954:	d6 2e       	mov	r13, r22
     956:	b8 2e       	mov	r11, r24
     958:	18 2f       	mov	r17, r24
     95a:	a1 2f       	mov	r26, r17
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	ea 2d       	mov	r30, r10
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	eb 0d       	add	r30, r11
     964:	f1 1d       	adc	r31, r1
     966:	ae 17       	cp	r26, r30
     968:	bf 07       	cpc	r27, r31
     96a:	c4 f2       	brlt	.-80     	; 0x91c <enu_DrawHorizontalLine+0x36>
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	bf 90       	pop	r11
     980:	af 90       	pop	r10
     982:	08 95       	ret

00000984 <NOKIA5110_enu_Initialization>:
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	1f 92       	push	r1
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	41 e0       	ldi	r20, 0x01	; 1
     994:	65 e0       	ldi	r22, 0x05	; 5
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	0e 94 a0 06 	call	0xd40	; 0xd40 <DIO_enu_SetPinDiretion>
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	67 e0       	ldi	r22, 0x07	; 7
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	0e 94 a0 06 	call	0xd40	; 0xd40 <DIO_enu_SetPinDiretion>
     9a6:	41 e0       	ldi	r20, 0x01	; 1
     9a8:	64 e0       	ldi	r22, 0x04	; 4
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enu_SetPinValue>
     9b0:	41 e0       	ldi	r20, 0x01	; 1
     9b2:	64 e0       	ldi	r22, 0x04	; 4
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0e 94 a0 06 	call	0xd40	; 0xd40 <DIO_enu_SetPinDiretion>
     9ba:	41 e0       	ldi	r20, 0x01	; 1
     9bc:	62 e0       	ldi	r22, 0x02	; 2
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enu_SetPinValue>
     9c4:	41 e0       	ldi	r20, 0x01	; 1
     9c6:	62 e0       	ldi	r22, 0x02	; 2
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	0e 94 a0 06 	call	0xd40	; 0xd40 <DIO_enu_SetPinDiretion>
     9ce:	41 e0       	ldi	r20, 0x01	; 1
     9d0:	63 e0       	ldi	r22, 0x03	; 3
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	0e 94 a0 06 	call	0xd40	; 0xd40 <DIO_enu_SetPinDiretion>
     9d8:	0e 94 9f 08 	call	0x113e	; 0x113e <SPI_enu_Initialization>
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	64 e0       	ldi	r22, 0x04	; 4
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enu_SetPinValue>
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	62 e0       	ldi	r22, 0x02	; 2
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_enu_SetPinState>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <NOKIA5110_enu_Initialization+0x6e>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <NOKIA5110_enu_Initialization+0x70>
     9f4:	41 e0       	ldi	r20, 0x01	; 1
     9f6:	62 e0       	ldi	r22, 0x02	; 2
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_enu_SetPinState>
     9fe:	be 01       	movw	r22, r28
     a00:	6f 5f       	subi	r22, 0xFF	; 255
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	0e 94 5d 02 	call	0x4ba	; 0x4ba <enu_GenerateFrame>
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <enu_PassByteToSPI>
     a10:	be 01       	movw	r22, r28
     a12:	6f 5f       	subi	r22, 0xFF	; 255
     a14:	7f 4f       	sbci	r23, 0xFF	; 255
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	0e 94 5d 02 	call	0x4ba	; 0x4ba <enu_GenerateFrame>
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <enu_PassByteToSPI>
     a22:	00 e6       	ldi	r16, 0x60	; 96
     a24:	10 e0       	ldi	r17, 0x00	; 0
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	f8 01       	movw	r30, r16
     a2a:	82 83       	std	Z+2, r24	; 0x02
     a2c:	be 01       	movw	r22, r28
     a2e:	6f 5f       	subi	r22, 0xFF	; 255
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0e 94 5d 02 	call	0x4ba	; 0x4ba <enu_GenerateFrame>
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <enu_PassByteToSPI>
     a3e:	be 01       	movw	r22, r28
     a40:	6f 5f       	subi	r22, 0xFF	; 255
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	0e 94 5d 02 	call	0x4ba	; 0x4ba <enu_GenerateFrame>
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <enu_PassByteToSPI>
     a50:	be 01       	movw	r22, r28
     a52:	6f 5f       	subi	r22, 0xFF	; 255
     a54:	7f 4f       	sbci	r23, 0xFF	; 255
     a56:	85 e0       	ldi	r24, 0x05	; 5
     a58:	0e 94 5d 02 	call	0x4ba	; 0x4ba <enu_GenerateFrame>
     a5c:	89 81       	ldd	r24, Y+1	; 0x01
     a5e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <enu_PassByteToSPI>
     a62:	be 01       	movw	r22, r28
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	86 e0       	ldi	r24, 0x06	; 6
     a6a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <enu_GenerateFrame>
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	0e 94 dd 02 	call	0x5ba	; 0x5ba <enu_PassByteToSPI>
     a74:	f8 01       	movw	r30, r16
     a76:	12 82       	std	Z+2, r1	; 0x02
     a78:	be 01       	movw	r22, r28
     a7a:	6f 5f       	subi	r22, 0xFF	; 255
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 5d 02 	call	0x4ba	; 0x4ba <enu_GenerateFrame>
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	0e 94 dd 02 	call	0x5ba	; 0x5ba <enu_PassByteToSPI>
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	0f 90       	pop	r0
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	08 95       	ret

00000a98 <NOKIA5110_enu_DrawCharacter>:
     a98:	0f 93       	push	r16
     a9a:	21 e0       	ldi	r18, 0x01	; 1
     a9c:	0e 94 df 03 	call	0x7be	; 0x7be <enu_DrawASCII>
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret

00000aa4 <NOKIA5110_enu_DrawNumber>:
     aa4:	4f 92       	push	r4
     aa6:	5f 92       	push	r5
     aa8:	6f 92       	push	r6
     aaa:	7f 92       	push	r7
     aac:	8f 92       	push	r8
     aae:	9f 92       	push	r9
     ab0:	af 92       	push	r10
     ab2:	bf 92       	push	r11
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	2a 97       	sbiw	r28, 0x0a	; 10
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	2b 01       	movw	r4, r22
     ad6:	3c 01       	movw	r6, r24
     ad8:	a4 2e       	mov	r10, r20
     ada:	b2 2e       	mov	r11, r18
     adc:	90 2e       	mov	r9, r16
     ade:	8f e2       	ldi	r24, 0x2F	; 47
     ae0:	84 17       	cp	r24, r20
     ae2:	40 f0       	brcs	.+16     	; 0xaf4 <NOKIA5110_enu_DrawNumber+0x50>
     ae4:	93 e5       	ldi	r25, 0x53	; 83
     ae6:	92 17       	cp	r25, r18
     ae8:	38 f0       	brcs	.+14     	; 0xaf8 <NOKIA5110_enu_DrawNumber+0x54>
     aea:	a1 e0       	ldi	r26, 0x01	; 1
     aec:	a0 17       	cp	r26, r16
     aee:	30 f4       	brcc	.+12     	; 0xafc <NOKIA5110_enu_DrawNumber+0x58>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	05 c0       	rjmp	.+10     	; 0xafe <NOKIA5110_enu_DrawNumber+0x5a>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	03 c0       	rjmp	.+6      	; 0xafe <NOKIA5110_enu_DrawNumber+0x5a>
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	01 c0       	rjmp	.+2      	; 0xafe <NOKIA5110_enu_DrawNumber+0x5a>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	88 23       	and	r24, r24
     b00:	09 f4       	brne	.+2      	; 0xb04 <NOKIA5110_enu_DrawNumber+0x60>
     b02:	dc c0       	rjmp	.+440    	; 0xcbc <NOKIA5110_enu_DrawNumber+0x218>
     b04:	fe 01       	movw	r30, r28
     b06:	31 96       	adiw	r30, 0x01	; 1
     b08:	8a e0       	ldi	r24, 0x0A	; 10
     b0a:	df 01       	movw	r26, r30
     b0c:	1d 92       	st	X+, r1
     b0e:	8a 95       	dec	r24
     b10:	e9 f7       	brne	.-6      	; 0xb0c <NOKIA5110_enu_DrawNumber+0x68>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	a9 01       	movw	r20, r18
     b18:	c3 01       	movw	r24, r6
     b1a:	b2 01       	movw	r22, r4
     b1c:	0e 94 3d 0b 	call	0x167a	; 0x167a <__cmpsf2>
     b20:	88 23       	and	r24, r24
     b22:	3c f4       	brge	.+14     	; 0xb32 <NOKIA5110_enu_DrawNumber+0x8e>
     b24:	77 fa       	bst	r7, 7
     b26:	70 94       	com	r7
     b28:	77 f8       	bld	r7, 7
     b2a:	70 94       	com	r7
     b2c:	88 24       	eor	r8, r8
     b2e:	83 94       	inc	r8
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <NOKIA5110_enu_DrawNumber+0x90>
     b32:	81 2c       	mov	r8, r1
     b34:	c3 01       	movw	r24, r6
     b36:	b2 01       	movw	r22, r4
     b38:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__fixunssfsi>
     b3c:	6b 01       	movw	r12, r22
     b3e:	7c 01       	movw	r14, r24
     b40:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__floatunsisf>
     b44:	9b 01       	movw	r18, r22
     b46:	ac 01       	movw	r20, r24
     b48:	c3 01       	movw	r24, r6
     b4a:	b2 01       	movw	r22, r4
     b4c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
     b50:	2b 01       	movw	r4, r22
     b52:	3c 01       	movw	r6, r24
     b54:	10 e0       	ldi	r17, 0x00	; 0
     b56:	c7 01       	movw	r24, r14
     b58:	b6 01       	movw	r22, r12
     b5a:	2a e0       	ldi	r18, 0x0A	; 10
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__udivmodsi4>
     b66:	e1 e0       	ldi	r30, 0x01	; 1
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	ec 0f       	add	r30, r28
     b6c:	fd 1f       	adc	r31, r29
     b6e:	e1 0f       	add	r30, r17
     b70:	f1 1d       	adc	r31, r1
     b72:	60 5d       	subi	r22, 0xD0	; 208
     b74:	60 83       	st	Z, r22
     b76:	c2 2e       	mov	r12, r18
     b78:	d3 2e       	mov	r13, r19
     b7a:	e4 2e       	mov	r14, r20
     b7c:	f5 2e       	mov	r15, r21
     b7e:	1f 5f       	subi	r17, 0xFF	; 255
     b80:	c1 14       	cp	r12, r1
     b82:	d1 04       	cpc	r13, r1
     b84:	e1 04       	cpc	r14, r1
     b86:	f1 04       	cpc	r15, r1
     b88:	31 f7       	brne	.-52     	; 0xb56 <NOKIA5110_enu_DrawNumber+0xb2>
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	a9 01       	movw	r20, r18
     b90:	c3 01       	movw	r24, r6
     b92:	b2 01       	movw	r22, r4
     b94:	0e 94 3d 0b 	call	0x167a	; 0x167a <__cmpsf2>
     b98:	81 11       	cpse	r24, r1
     b9a:	3f c0       	rjmp	.+126    	; 0xc1a <NOKIA5110_enu_DrawNumber+0x176>
     b9c:	f1 2c       	mov	r15, r1
     b9e:	4b c0       	rjmp	.+150    	; 0xc36 <NOKIA5110_enu_DrawNumber+0x192>
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	40 e2       	ldi	r20, 0x20	; 32
     ba6:	51 e4       	ldi	r21, 0x41	; 65
     ba8:	c3 01       	movw	r24, r6
     baa:	b2 01       	movw	r22, r4
     bac:	0e 94 95 0c 	call	0x192a	; 0x192a <__mulsf3>
     bb0:	2b 01       	movw	r4, r22
     bb2:	3c 01       	movw	r6, r24
     bb4:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__fixunssfsi>
     bb8:	e1 e0       	ldi	r30, 0x01	; 1
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	ec 0f       	add	r30, r28
     bbe:	fd 1f       	adc	r31, r29
     bc0:	ef 0d       	add	r30, r15
     bc2:	f1 1d       	adc	r31, r1
     bc4:	20 e3       	ldi	r18, 0x30	; 48
     bc6:	26 0f       	add	r18, r22
     bc8:	20 83       	st	Z, r18
     bca:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__floatunsisf>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	c3 01       	movw	r24, r6
     bd4:	b2 01       	movw	r22, r4
     bd6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
     bda:	2b 01       	movw	r4, r22
     bdc:	3c 01       	movw	r6, r24
     bde:	f3 94       	inc	r15
     be0:	0f 5f       	subi	r16, 0xFF	; 255
     be2:	03 30       	cpi	r16, 0x03	; 3
     be4:	e1 f4       	brne	.+56     	; 0xc1e <NOKIA5110_enu_DrawNumber+0x17a>
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	40 e2       	ldi	r20, 0x20	; 32
     bec:	51 e4       	ldi	r21, 0x41	; 65
     bee:	0e 94 95 0c 	call	0x192a	; 0x192a <__mulsf3>
     bf2:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__fixunssfsi>
     bf6:	65 30       	cpi	r22, 0x05	; 5
     bf8:	71 05       	cpc	r23, r1
     bfa:	81 05       	cpc	r24, r1
     bfc:	91 05       	cpc	r25, r1
     bfe:	78 f0       	brcs	.+30     	; 0xc1e <NOKIA5110_enu_DrawNumber+0x17a>
     c00:	ef 2d       	mov	r30, r15
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	31 97       	sbiw	r30, 0x01	; 1
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	8c 0f       	add	r24, r28
     c0c:	9d 1f       	adc	r25, r29
     c0e:	e8 0f       	add	r30, r24
     c10:	f9 1f       	adc	r31, r25
     c12:	80 81       	ld	r24, Z
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	80 83       	st	Z, r24
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <NOKIA5110_enu_DrawNumber+0x17a>
     c1a:	f1 2e       	mov	r15, r17
     c1c:	00 e0       	ldi	r16, 0x00	; 0
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	a9 01       	movw	r20, r18
     c24:	c3 01       	movw	r24, r6
     c26:	b2 01       	movw	r22, r4
     c28:	0e 94 3d 0b 	call	0x167a	; 0x167a <__cmpsf2>
     c2c:	88 23       	and	r24, r24
     c2e:	19 f0       	breq	.+6      	; 0xc36 <NOKIA5110_enu_DrawNumber+0x192>
     c30:	03 30       	cpi	r16, 0x03	; 3
     c32:	09 f0       	breq	.+2      	; 0xc36 <NOKIA5110_enu_DrawNumber+0x192>
     c34:	b5 cf       	rjmp	.-150    	; 0xba0 <NOKIA5110_enu_DrawNumber+0xfc>
     c36:	88 20       	and	r8, r8
     c38:	49 f0       	breq	.+18     	; 0xc4c <NOKIA5110_enu_DrawNumber+0x1a8>
     c3a:	01 e0       	ldi	r16, 0x01	; 1
     c3c:	29 2d       	mov	r18, r9
     c3e:	4b 2d       	mov	r20, r11
     c40:	6a 2d       	mov	r22, r10
     c42:	8d e2       	ldi	r24, 0x2D	; 45
     c44:	0e 94 df 03 	call	0x7be	; 0x7be <enu_DrawASCII>
     c48:	96 e0       	ldi	r25, 0x06	; 6
     c4a:	b9 0e       	add	r11, r25
     c4c:	e1 2e       	mov	r14, r17
     c4e:	13 c0       	rjmp	.+38     	; 0xc76 <NOKIA5110_enu_DrawNumber+0x1d2>
     c50:	ee 2d       	mov	r30, r14
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	a1 e0       	ldi	r26, 0x01	; 1
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ac 0f       	add	r26, r28
     c5c:	bd 1f       	adc	r27, r29
     c5e:	ea 0f       	add	r30, r26
     c60:	fb 1f       	adc	r31, r27
     c62:	01 e0       	ldi	r16, 0x01	; 1
     c64:	29 2d       	mov	r18, r9
     c66:	4b 2d       	mov	r20, r11
     c68:	6a 2d       	mov	r22, r10
     c6a:	80 81       	ld	r24, Z
     c6c:	0e 94 df 03 	call	0x7be	; 0x7be <enu_DrawASCII>
     c70:	b6 e0       	ldi	r27, 0x06	; 6
     c72:	bb 0e       	add	r11, r27
     c74:	ea 94       	dec	r14
     c76:	e1 10       	cpse	r14, r1
     c78:	eb cf       	rjmp	.-42     	; 0xc50 <NOKIA5110_enu_DrawNumber+0x1ac>
     c7a:	4f ef       	ldi	r20, 0xFF	; 255
     c7c:	4b 0d       	add	r20, r11
     c7e:	ff 20       	and	r15, r15
     c80:	d9 f0       	breq	.+54     	; 0xcb8 <NOKIA5110_enu_DrawNumber+0x214>
     c82:	01 e0       	ldi	r16, 0x01	; 1
     c84:	29 2d       	mov	r18, r9
     c86:	6a 2d       	mov	r22, r10
     c88:	8e e2       	ldi	r24, 0x2E	; 46
     c8a:	0e 94 df 03 	call	0x7be	; 0x7be <enu_DrawASCII>
     c8e:	84 e0       	ldi	r24, 0x04	; 4
     c90:	b8 0e       	add	r11, r24
     c92:	10 c0       	rjmp	.+32     	; 0xcb4 <NOKIA5110_enu_DrawNumber+0x210>
     c94:	e1 e0       	ldi	r30, 0x01	; 1
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	ec 0f       	add	r30, r28
     c9a:	fd 1f       	adc	r31, r29
     c9c:	e1 0f       	add	r30, r17
     c9e:	f1 1d       	adc	r31, r1
     ca0:	01 e0       	ldi	r16, 0x01	; 1
     ca2:	29 2d       	mov	r18, r9
     ca4:	4b 2d       	mov	r20, r11
     ca6:	6a 2d       	mov	r22, r10
     ca8:	80 81       	ld	r24, Z
     caa:	0e 94 df 03 	call	0x7be	; 0x7be <enu_DrawASCII>
     cae:	96 e0       	ldi	r25, 0x06	; 6
     cb0:	b9 0e       	add	r11, r25
     cb2:	1f 5f       	subi	r17, 0xFF	; 255
     cb4:	1f 15       	cp	r17, r15
     cb6:	70 f3       	brcs	.-36     	; 0xc94 <NOKIA5110_enu_DrawNumber+0x1f0>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <NOKIA5110_enu_DrawNumber+0x21a>
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	2a 96       	adiw	r28, 0x0a	; 10
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	ff 90       	pop	r15
     cd4:	ef 90       	pop	r14
     cd6:	df 90       	pop	r13
     cd8:	cf 90       	pop	r12
     cda:	bf 90       	pop	r11
     cdc:	af 90       	pop	r10
     cde:	9f 90       	pop	r9
     ce0:	8f 90       	pop	r8
     ce2:	7f 90       	pop	r7
     ce4:	6f 90       	pop	r6
     ce6:	5f 90       	pop	r5
     ce8:	4f 90       	pop	r4
     cea:	08 95       	ret

00000cec <NOKIA5110_enu_DrawVerticalLine>:
     cec:	0f 93       	push	r16
     cee:	0e 94 20 04 	call	0x840	; 0x840 <enu_DrawVerticalLine>
     cf2:	0f 91       	pop	r16
     cf4:	08 95       	ret

00000cf6 <NOKIA5110_enu_DrawHorizontalLine>:
     cf6:	0f 93       	push	r16
     cf8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <enu_DrawHorizontalLine>
     cfc:	0f 91       	pop	r16
     cfe:	08 95       	ret

00000d00 <NOKIA5110_enu_DrawString>:
 * @param Copy_u8_Xstart x - coordinate of the starting point
 * @param Copy_u8_Colour Colour
 * @return ErrorState_t 
 */
extern ErrorState_t NOKIA5110_enu_DrawString(const u8* Copy_pu8_StringArray, u8 Copy_u8_Ystart, u8 Copy_u8_Xstart, u8 Copy_u8_Colour)
{
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
     d0e:	e6 2e       	mov	r14, r22
     d10:	14 2f       	mov	r17, r20
     d12:	f2 2e       	mov	r15, r18
    u8 Local_u8_ErrorFlag = ES_NOK, Local_u8_y = 0, Local_u8_x = 0;
    u8* Local_pu8_PrintingString = Copy_pu8_StringArray;

    if(Copy_pu8_StringArray)
     d14:	89 2b       	or	r24, r25
     d16:	51 f4       	brne	.+20     	; 0xd2c <NOKIA5110_enu_DrawString+0x2c>
        
        Local_u8_ErrorFlag = ES_OK;
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	0b c0       	rjmp	.+22     	; 0xd32 <NOKIA5110_enu_DrawString+0x32>
    {
        Local_u8_y = Copy_u8_Ystart;
        Local_u8_x =Copy_u8_Xstart;
        while(*Local_pu8_PrintingString)
        {
            enu_DrawASCII(*Local_pu8_PrintingString, Local_u8_y, Local_u8_x, Copy_u8_Colour, NOKIA5110_DISABLE_OVERLAP);
     d1c:	01 e0       	ldi	r16, 0x01	; 1
     d1e:	2f 2d       	mov	r18, r15
     d20:	41 2f       	mov	r20, r17
     d22:	6e 2d       	mov	r22, r14
     d24:	0e 94 df 03 	call	0x7be	; 0x7be <enu_DrawASCII>

            Local_u8_x += 6;
     d28:	1a 5f       	subi	r17, 0xFA	; 250

            Local_pu8_PrintingString++;
     d2a:	21 96       	adiw	r28, 0x01	; 1

    if(Copy_pu8_StringArray)
    {
        Local_u8_y = Copy_u8_Ystart;
        Local_u8_x =Copy_u8_Xstart;
        while(*Local_pu8_PrintingString)
     d2c:	88 81       	ld	r24, Y
     d2e:	81 11       	cpse	r24, r1
     d30:	f5 cf       	rjmp	.-22     	; 0xd1c <NOKIA5110_enu_DrawString+0x1c>
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	08 95       	ret

00000d40 <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
     d40:	84 30       	cpi	r24, 0x04	; 4
     d42:	08 f0       	brcs	.+2      	; 0xd46 <DIO_enu_SetPinDiretion+0x6>
     d44:	6f c0       	rjmp	.+222    	; 0xe24 <DIO_enu_SetPinDiretion+0xe4>
     d46:	68 30       	cpi	r22, 0x08	; 8
     d48:	08 f0       	brcs	.+2      	; 0xd4c <DIO_enu_SetPinDiretion+0xc>
     d4a:	6e c0       	rjmp	.+220    	; 0xe28 <DIO_enu_SetPinDiretion+0xe8>
     d4c:	42 30       	cpi	r20, 0x02	; 2
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <DIO_enu_SetPinDiretion+0x12>
     d50:	6d c0       	rjmp	.+218    	; 0xe2c <DIO_enu_SetPinDiretion+0xec>
    {
        switch (Copy_u8_PinGroup)
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	f9 f0       	breq	.+62     	; 0xd94 <DIO_enu_SetPinDiretion+0x54>
     d56:	30 f0       	brcs	.+12     	; 0xd64 <DIO_enu_SetPinDiretion+0x24>
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	a1 f1       	breq	.+104    	; 0xdc4 <DIO_enu_SetPinDiretion+0x84>
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	09 f4       	brne	.+2      	; 0xd62 <DIO_enu_SetPinDiretion+0x22>
     d60:	49 c0       	rjmp	.+146    	; 0xdf4 <DIO_enu_SetPinDiretion+0xb4>
     d62:	66 c0       	rjmp	.+204    	; 0xe30 <DIO_enu_SetPinDiretion+0xf0>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
     d64:	2a b3       	in	r18, 0x1a	; 26
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	06 2e       	mov	r0, r22
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <DIO_enu_SetPinDiretion+0x32>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <DIO_enu_SetPinDiretion+0x2e>
     d76:	80 95       	com	r24
     d78:	82 23       	and	r24, r18
     d7a:	8a bb       	out	0x1a, r24	; 26
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
     d7c:	2a b3       	in	r18, 0x1a	; 26
     d7e:	84 2f       	mov	r24, r20
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_enu_SetPinDiretion+0x48>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	6a 95       	dec	r22
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_enu_SetPinDiretion+0x44>
     d8c:	82 2b       	or	r24, r18
     d8e:	8a bb       	out	0x1a, r24	; 26

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     d90:	80 e0       	ldi	r24, 0x00	; 0

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
            break;
     d92:	08 95       	ret

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
     d94:	87 b3       	in	r24, 0x17	; 23
     d96:	21 e0       	ldi	r18, 0x01	; 1
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	06 2e       	mov	r0, r22
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_enu_SetPinDiretion+0x62>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_enu_SetPinDiretion+0x5e>
     da6:	20 95       	com	r18
     da8:	28 23       	and	r18, r24
     daa:	27 bb       	out	0x17, r18	; 23
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
     dac:	27 b3       	in	r18, 0x17	; 23
     dae:	84 2f       	mov	r24, r20
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_enu_SetPinDiretion+0x78>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	6a 95       	dec	r22
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_enu_SetPinDiretion+0x74>
     dbc:	82 2b       	or	r24, r18
     dbe:	87 bb       	out	0x17, r24	; 23

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     dc0:	80 e0       	ldi	r24, 0x00	; 0
            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
            break;
     dc2:	08 95       	ret

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
     dc4:	84 b3       	in	r24, 0x14	; 20
     dc6:	21 e0       	ldi	r18, 0x01	; 1
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	06 2e       	mov	r0, r22
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <DIO_enu_SetPinDiretion+0x92>
     dce:	22 0f       	add	r18, r18
     dd0:	33 1f       	adc	r19, r19
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <DIO_enu_SetPinDiretion+0x8e>
     dd6:	20 95       	com	r18
     dd8:	28 23       	and	r18, r24
     dda:	24 bb       	out	0x14, r18	; 20
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
     ddc:	24 b3       	in	r18, 0x14	; 20
     dde:	84 2f       	mov	r24, r20
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_enu_SetPinDiretion+0xa8>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	6a 95       	dec	r22
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_enu_SetPinDiretion+0xa4>
     dec:	82 2b       	or	r24, r18
     dee:	84 bb       	out	0x14, r24	; 20

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     df0:	80 e0       	ldi	r24, 0x00	; 0
            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
            break;
     df2:	08 95       	ret

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
     df4:	81 b3       	in	r24, 0x11	; 17
     df6:	21 e0       	ldi	r18, 0x01	; 1
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	06 2e       	mov	r0, r22
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_enu_SetPinDiretion+0xc2>
     dfe:	22 0f       	add	r18, r18
     e00:	33 1f       	adc	r19, r19
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <DIO_enu_SetPinDiretion+0xbe>
     e06:	20 95       	com	r18
     e08:	28 23       	and	r18, r24
     e0a:	21 bb       	out	0x11, r18	; 17
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
     e0c:	21 b3       	in	r18, 0x11	; 17
     e0e:	84 2f       	mov	r24, r20
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <DIO_enu_SetPinDiretion+0xd8>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	6a 95       	dec	r22
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <DIO_enu_SetPinDiretion+0xd4>
     e1c:	82 2b       	or	r24, r18
     e1e:	81 bb       	out	0x11, r24	; 17

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     e20:	80 e0       	ldi	r24, 0x00	; 0
            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
            break;
     e22:	08 95       	ret
        Local_u8_ErrorFlag = ES_OK;

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	08 95       	ret
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	08 95       	ret
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	08 95       	ret

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     e30:	80 e0       	ldi	r24, 0x00	; 0
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
     e32:	08 95       	ret

00000e34 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
     e34:	84 30       	cpi	r24, 0x04	; 4
     e36:	08 f0       	brcs	.+2      	; 0xe3a <DIO_enu_SetPinState+0x6>
     e38:	6f c0       	rjmp	.+222    	; 0xf18 <DIO_enu_SetPinState+0xe4>
     e3a:	68 30       	cpi	r22, 0x08	; 8
     e3c:	08 f0       	brcs	.+2      	; 0xe40 <DIO_enu_SetPinState+0xc>
     e3e:	6e c0       	rjmp	.+220    	; 0xf1c <DIO_enu_SetPinState+0xe8>
     e40:	42 30       	cpi	r20, 0x02	; 2
     e42:	08 f0       	brcs	.+2      	; 0xe46 <DIO_enu_SetPinState+0x12>
     e44:	6d c0       	rjmp	.+218    	; 0xf20 <DIO_enu_SetPinState+0xec>
    {
        switch (Copy_u8_PinGroup)
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	f9 f0       	breq	.+62     	; 0xe88 <DIO_enu_SetPinState+0x54>
     e4a:	30 f0       	brcs	.+12     	; 0xe58 <DIO_enu_SetPinState+0x24>
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	a1 f1       	breq	.+104    	; 0xeb8 <DIO_enu_SetPinState+0x84>
     e50:	83 30       	cpi	r24, 0x03	; 3
     e52:	09 f4       	brne	.+2      	; 0xe56 <DIO_enu_SetPinState+0x22>
     e54:	49 c0       	rjmp	.+146    	; 0xee8 <DIO_enu_SetPinState+0xb4>
     e56:	66 c0       	rjmp	.+204    	; 0xf24 <DIO_enu_SetPinState+0xf0>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
     e58:	2b b3       	in	r18, 0x1b	; 27
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	06 2e       	mov	r0, r22
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_enu_SetPinState+0x32>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_enu_SetPinState+0x2e>
     e6a:	80 95       	com	r24
     e6c:	82 23       	and	r24, r18
     e6e:	8b bb       	out	0x1b, r24	; 27
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     e70:	2b b3       	in	r18, 0x1b	; 27
     e72:	84 2f       	mov	r24, r20
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_enu_SetPinState+0x48>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	6a 95       	dec	r22
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_enu_SetPinState+0x44>
     e80:	82 2b       	or	r24, r18
     e82:	8b bb       	out	0x1b, r24	; 27

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     e84:	80 e0       	ldi	r24, 0x00	; 0
        switch (Copy_u8_PinGroup)
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
     e86:	08 95       	ret

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
     e88:	88 b3       	in	r24, 0x18	; 24
     e8a:	21 e0       	ldi	r18, 0x01	; 1
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	06 2e       	mov	r0, r22
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_enu_SetPinState+0x62>
     e92:	22 0f       	add	r18, r18
     e94:	33 1f       	adc	r19, r19
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_enu_SetPinState+0x5e>
     e9a:	20 95       	com	r18
     e9c:	28 23       	and	r18, r24
     e9e:	28 bb       	out	0x18, r18	; 24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     ea0:	28 b3       	in	r18, 0x18	; 24
     ea2:	84 2f       	mov	r24, r20
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_enu_SetPinState+0x78>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	6a 95       	dec	r22
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_enu_SetPinState+0x74>
     eb0:	82 2b       	or	r24, r18
     eb2:	88 bb       	out	0x18, r24	; 24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     eb4:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
     eb6:	08 95       	ret

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
     eb8:	85 b3       	in	r24, 0x15	; 21
     eba:	21 e0       	ldi	r18, 0x01	; 1
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	06 2e       	mov	r0, r22
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_enu_SetPinState+0x92>
     ec2:	22 0f       	add	r18, r18
     ec4:	33 1f       	adc	r19, r19
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_enu_SetPinState+0x8e>
     eca:	20 95       	com	r18
     ecc:	28 23       	and	r18, r24
     ece:	25 bb       	out	0x15, r18	; 21
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     ed0:	25 b3       	in	r18, 0x15	; 21
     ed2:	84 2f       	mov	r24, r20
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <DIO_enu_SetPinState+0xa8>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	6a 95       	dec	r22
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <DIO_enu_SetPinState+0xa4>
     ee0:	82 2b       	or	r24, r18
     ee2:	85 bb       	out	0x15, r24	; 21

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     ee4:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
     ee6:	08 95       	ret

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
     ee8:	82 b3       	in	r24, 0x12	; 18
     eea:	21 e0       	ldi	r18, 0x01	; 1
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	06 2e       	mov	r0, r22
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_enu_SetPinState+0xc2>
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_enu_SetPinState+0xbe>
     efa:	20 95       	com	r18
     efc:	28 23       	and	r18, r24
     efe:	22 bb       	out	0x12, r18	; 18
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     f00:	22 b3       	in	r18, 0x12	; 18
     f02:	84 2f       	mov	r24, r20
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_enu_SetPinState+0xd8>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	6a 95       	dec	r22
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_enu_SetPinState+0xd4>
     f10:	82 2b       	or	r24, r18
     f12:	82 bb       	out	0x12, r24	; 18

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     f14:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
            break;
     f16:	08 95       	ret

        Local_u8_ErrorFlag = ES_OK;
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	08 95       	ret
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	08 95       	ret
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	08 95       	ret

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     f24:	80 e0       	ldi	r24, 0x00	; 0
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
     f26:	08 95       	ret

00000f28 <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
     f28:	84 30       	cpi	r24, 0x04	; 4
     f2a:	08 f0       	brcs	.+2      	; 0xf2e <DIO_enu_SetPinValue+0x6>
     f2c:	7b c0       	rjmp	.+246    	; 0x1024 <DIO_enu_SetPinValue+0xfc>
     f2e:	68 30       	cpi	r22, 0x08	; 8
     f30:	08 f0       	brcs	.+2      	; 0xf34 <DIO_enu_SetPinValue+0xc>
     f32:	7a c0       	rjmp	.+244    	; 0x1028 <DIO_enu_SetPinValue+0x100>
     f34:	42 30       	cpi	r20, 0x02	; 2
     f36:	08 f0       	brcs	.+2      	; 0xf3a <DIO_enu_SetPinValue+0x12>
     f38:	79 c0       	rjmp	.+242    	; 0x102c <DIO_enu_SetPinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	11 f1       	breq	.+68     	; 0xf82 <DIO_enu_SetPinValue+0x5a>
     f3e:	30 f0       	brcs	.+12     	; 0xf4c <DIO_enu_SetPinValue+0x24>
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	d1 f1       	breq	.+116    	; 0xfb8 <DIO_enu_SetPinValue+0x90>
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	09 f4       	brne	.+2      	; 0xf4a <DIO_enu_SetPinValue+0x22>
     f48:	52 c0       	rjmp	.+164    	; 0xfee <DIO_enu_SetPinValue+0xc6>
     f4a:	72 c0       	rjmp	.+228    	; 0x1030 <DIO_enu_SetPinValue+0x108>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
     f4c:	41 30       	cpi	r20, 0x01	; 1
     f4e:	61 f4       	brne	.+24     	; 0xf68 <DIO_enu_SetPinValue+0x40>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
     f50:	2b b3       	in	r18, 0x1b	; 27
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_enu_SetPinValue+0x34>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	6a 95       	dec	r22
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_enu_SetPinValue+0x30>
     f60:	82 2b       	or	r24, r18
     f62:	8b bb       	out	0x1b, r24	; 27
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	08 95       	ret
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
     f68:	2b b3       	in	r18, 0x1b	; 27
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_enu_SetPinValue+0x4c>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	6a 95       	dec	r22
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_enu_SetPinValue+0x48>
     f78:	80 95       	com	r24
     f7a:	82 23       	and	r24, r18
     f7c:	8b bb       	out	0x1b, r24	; 27
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	08 95       	ret
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
     f82:	41 30       	cpi	r20, 0x01	; 1
     f84:	61 f4       	brne	.+24     	; 0xf9e <DIO_enu_SetPinValue+0x76>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
     f86:	28 b3       	in	r18, 0x18	; 24
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_enu_SetPinValue+0x6a>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	6a 95       	dec	r22
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_enu_SetPinValue+0x66>
     f96:	82 2b       	or	r24, r18
     f98:	88 bb       	out	0x18, r24	; 24
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	08 95       	ret
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
     f9e:	28 b3       	in	r18, 0x18	; 24
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_enu_SetPinValue+0x82>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	6a 95       	dec	r22
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_enu_SetPinValue+0x7e>
     fae:	80 95       	com	r24
     fb0:	82 23       	and	r24, r18
     fb2:	88 bb       	out	0x18, r24	; 24
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	08 95       	ret
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
     fb8:	41 30       	cpi	r20, 0x01	; 1
     fba:	61 f4       	brne	.+24     	; 0xfd4 <DIO_enu_SetPinValue+0xac>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
     fbc:	25 b3       	in	r18, 0x15	; 21
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_enu_SetPinValue+0xa0>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	6a 95       	dec	r22
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_enu_SetPinValue+0x9c>
     fcc:	82 2b       	or	r24, r18
     fce:	85 bb       	out	0x15, r24	; 21
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	08 95       	ret
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
     fd4:	25 b3       	in	r18, 0x15	; 21
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_enu_SetPinValue+0xb8>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	6a 95       	dec	r22
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_enu_SetPinValue+0xb4>
     fe4:	80 95       	com	r24
     fe6:	82 23       	and	r24, r18
     fe8:	85 bb       	out	0x15, r24	; 21
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	08 95       	ret
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
     fee:	41 30       	cpi	r20, 0x01	; 1
     ff0:	61 f4       	brne	.+24     	; 0x100a <DIO_enu_SetPinValue+0xe2>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
     ff2:	22 b3       	in	r18, 0x12	; 18
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_enu_SetPinValue+0xd6>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	6a 95       	dec	r22
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_enu_SetPinValue+0xd2>
    1002:	82 2b       	or	r24, r18
    1004:	82 bb       	out	0x12, r24	; 18
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	08 95       	ret
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
    100a:	22 b3       	in	r18, 0x12	; 18
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_enu_SetPinValue+0xee>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	6a 95       	dec	r22
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_enu_SetPinValue+0xea>
    101a:	80 95       	com	r24
    101c:	82 23       	and	r24, r18
    101e:	82 bb       	out	0x12, r24	; 18
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	08 95       	ret


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	08 95       	ret
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	08 95       	ret
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	08 95       	ret
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
    1030:	80 e0       	ldi	r24, 0x00	; 0
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    }

    return Local_u8_ErrorFlag;
}
    1032:	08 95       	ret

00001034 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
    1034:	1f 92       	push	r1
    1036:	0f 92       	push	r0
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	0f 92       	push	r0
    103c:	11 24       	eor	r1, r1
    103e:	2f 93       	push	r18
    1040:	3f 93       	push	r19
    1042:	4f 93       	push	r20
    1044:	5f 93       	push	r21
    1046:	6f 93       	push	r22
    1048:	7f 93       	push	r23
    104a:	8f 93       	push	r24
    104c:	9f 93       	push	r25
    104e:	af 93       	push	r26
    1050:	bf 93       	push	r27
    1052:	ef 93       	push	r30
    1054:	ff 93       	push	r31
    if(pfun_ISRPointers[EXTI_INT0])
    1056:	e0 91 b3 07 	lds	r30, 0x07B3	; 0x8007b3 <pfun_ISRPointers>
    105a:	f0 91 b4 07 	lds	r31, 0x07B4	; 0x8007b4 <pfun_ISRPointers+0x1>
    105e:	30 97       	sbiw	r30, 0x00	; 0
    1060:	29 f0       	breq	.+10     	; 0x106c <__vector_1+0x38>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
    1062:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <apvid_ISRParameters>
    1066:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <apvid_ISRParameters+0x1>
    106a:	09 95       	icall
    }
}
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	7f 91       	pop	r23
    107a:	6f 91       	pop	r22
    107c:	5f 91       	pop	r21
    107e:	4f 91       	pop	r20
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <__vector_2>:
//INT1
void __vector_2 (void)
{
    108e:	1f 92       	push	r1
    1090:	0f 92       	push	r0
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	0f 92       	push	r0
    1096:	11 24       	eor	r1, r1
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
    if(pfun_ISRPointers[EXTI_INT1])
    10b0:	e0 91 b5 07 	lds	r30, 0x07B5	; 0x8007b5 <pfun_ISRPointers+0x2>
    10b4:	f0 91 b6 07 	lds	r31, 0x07B6	; 0x8007b6 <pfun_ISRPointers+0x3>
    10b8:	30 97       	sbiw	r30, 0x00	; 0
    10ba:	29 f0       	breq	.+10     	; 0x10c6 <__vector_2+0x38>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
    10bc:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <apvid_ISRParameters+0x2>
    10c0:	90 91 b0 07 	lds	r25, 0x07B0	; 0x8007b0 <apvid_ISRParameters+0x3>
    10c4:	09 95       	icall
    }
}
    10c6:	ff 91       	pop	r31
    10c8:	ef 91       	pop	r30
    10ca:	bf 91       	pop	r27
    10cc:	af 91       	pop	r26
    10ce:	9f 91       	pop	r25
    10d0:	8f 91       	pop	r24
    10d2:	7f 91       	pop	r23
    10d4:	6f 91       	pop	r22
    10d6:	5f 91       	pop	r21
    10d8:	4f 91       	pop	r20
    10da:	3f 91       	pop	r19
    10dc:	2f 91       	pop	r18
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	0f 90       	pop	r0
    10e4:	1f 90       	pop	r1
    10e6:	18 95       	reti

000010e8 <__vector_3>:
//INT2
void __vector_3 (void)
{
    10e8:	1f 92       	push	r1
    10ea:	0f 92       	push	r0
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	0f 92       	push	r0
    10f0:	11 24       	eor	r1, r1
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	ef 93       	push	r30
    1108:	ff 93       	push	r31
    if(pfun_ISRPointers[EXTI_INT2])
    110a:	e0 91 b7 07 	lds	r30, 0x07B7	; 0x8007b7 <pfun_ISRPointers+0x4>
    110e:	f0 91 b8 07 	lds	r31, 0x07B8	; 0x8007b8 <pfun_ISRPointers+0x5>
    1112:	30 97       	sbiw	r30, 0x00	; 0
    1114:	19 f0       	breq	.+6      	; 0x111c <__vector_3+0x34>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	09 95       	icall
    }
    
}
    111c:	ff 91       	pop	r31
    111e:	ef 91       	pop	r30
    1120:	bf 91       	pop	r27
    1122:	af 91       	pop	r26
    1124:	9f 91       	pop	r25
    1126:	8f 91       	pop	r24
    1128:	7f 91       	pop	r23
    112a:	6f 91       	pop	r22
    112c:	5f 91       	pop	r21
    112e:	4f 91       	pop	r20
    1130:	3f 91       	pop	r19
    1132:	2f 91       	pop	r18
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <SPI_enu_Initialization>:
            break;
        }
    }

    return Local_u8_ErrorFlag;
}
    113e:	8d b1       	in	r24, 0x0d	; 13
    1140:	80 61       	ori	r24, 0x10	; 16
    1142:	8d b9       	out	0x0d, r24	; 13
    1144:	8d b1       	in	r24, 0x0d	; 13
    1146:	8c 7f       	andi	r24, 0xFC	; 252
    1148:	8d b9       	out	0x0d, r24	; 13
    114a:	8e b1       	in	r24, 0x0e	; 14
    114c:	8e 7f       	andi	r24, 0xFE	; 254
    114e:	8e b9       	out	0x0e, r24	; 14
    1150:	8d b1       	in	r24, 0x0d	; 13
    1152:	8f 77       	andi	r24, 0x7F	; 127
    1154:	8d b9       	out	0x0d, r24	; 13
    1156:	8d b1       	in	r24, 0x0d	; 13
    1158:	87 7f       	andi	r24, 0xF7	; 247
    115a:	8d b9       	out	0x0d, r24	; 13
    115c:	8d b1       	in	r24, 0x0d	; 13
    115e:	8b 7f       	andi	r24, 0xFB	; 251
    1160:	8d b9       	out	0x0d, r24	; 13
    1162:	8d b1       	in	r24, 0x0d	; 13
    1164:	8f 7d       	andi	r24, 0xDF	; 223
    1166:	8d b9       	out	0x0d, r24	; 13
    1168:	8d b1       	in	r24, 0x0d	; 13
    116a:	80 64       	ori	r24, 0x40	; 64
    116c:	8d b9       	out	0x0d, r24	; 13
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	08 95       	ret

00001172 <SPI_enu_MasterSend>:
    1172:	90 91 b9 07 	lds	r25, 0x07B9	; 0x8007b9 <LOC_u8_SPIState>
    1176:	91 30       	cpi	r25, 0x01	; 1
    1178:	71 f0       	breq	.+28     	; 0x1196 <SPI_enu_MasterSend+0x24>
    117a:	91 11       	cpse	r25, r1
    117c:	0e c0       	rjmp	.+28     	; 0x119a <SPI_enu_MasterSend+0x28>
    117e:	8f b9       	out	0x0f, r24	; 15
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <LOC_u8_SPIState>
    1186:	01 c0       	rjmp	.+2      	; 0x118a <SPI_enu_MasterSend+0x18>
    1188:	8f b1       	in	r24, 0x0f	; 15
    118a:	77 9b       	sbis	0x0e, 7	; 14
    118c:	fd cf       	rjmp	.-6      	; 0x1188 <SPI_enu_MasterSend+0x16>
    118e:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <LOC_u8_SPIState>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 95       	ret
    1196:	84 e0       	ldi	r24, 0x04	; 4
    1198:	08 95       	ret
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	08 95       	ret

0000119e <SPI_enu_GetCommState>:
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	31 f0       	breq	.+12     	; 0x11ae <SPI_enu_GetCommState+0x10>
    11a2:	20 91 b9 07 	lds	r18, 0x07B9	; 0x8007b9 <LOC_u8_SPIState>
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 83       	st	Z, r18
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	08 95       	ret
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	08 95       	ret

000011b2 <__vector_12>:

// ISR
void __vector_12 (void)__attribute__((signal));

void __vector_12 (void)
{
    11b2:	1f 92       	push	r1
    11b4:	0f 92       	push	r0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	0f 92       	push	r0
    11ba:	11 24       	eor	r1, r1
    #if SPI_ISR_STATUS == SPI_INTERNAL_ISR        
    
        #if SPI_MCU_MODE == SPI_MASTER_MODE
    
            if ((SPCR >> SPCR_MSTR) & 1) // Making sure the SPIF was rasied due to an SPI operation ending
    11bc:	6c 99       	sbic	0x0d, 4	; 13
            {
                LOC_u8_SPIState = SPI_FREE;
    11be:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <LOC_u8_SPIState>
    #else
    
        #error SPI_EXTERNAL_ISR is invald
    
    #endif
}
    11c2:	0f 90       	pop	r0
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	0f 90       	pop	r0
    11c8:	1f 90       	pop	r1
    11ca:	18 95       	reti

000011cc <SREG_vid_EnableBitI>:

void SREG_vid_EnableBitI(void)
{
    asm("SEI");
    11cc:	78 94       	sei
    11ce:	08 95       	ret

000011d0 <Timer1_enu_Initialization>:
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    }

    return Local_u8_ErrorFlag;
}
    11d0:	8f b5       	in	r24, 0x2f	; 47
    11d2:	8c 7f       	andi	r24, 0xFC	; 252
    11d4:	8f bd       	out	0x2f, r24	; 47
    11d6:	8e b5       	in	r24, 0x2e	; 46
    11d8:	87 7e       	andi	r24, 0xE7	; 231
    11da:	8e bd       	out	0x2e, r24	; 46
    11dc:	89 b7       	in	r24, 0x39	; 57
    11de:	8b 7f       	andi	r24, 0xFB	; 251
    11e0:	89 bf       	out	0x39, r24	; 57
    11e2:	8e b5       	in	r24, 0x2e	; 46
    11e4:	8f 7b       	andi	r24, 0xBF	; 191
    11e6:	8e bd       	out	0x2e, r24	; 46
    11e8:	89 b7       	in	r24, 0x39	; 57
    11ea:	8f 7d       	andi	r24, 0xDF	; 223
    11ec:	89 bf       	out	0x39, r24	; 57
    11ee:	8e b5       	in	r24, 0x2e	; 46
    11f0:	80 68       	ori	r24, 0x80	; 128
    11f2:	8e bd       	out	0x2e, r24	; 46
    11f4:	8e b5       	in	r24, 0x2e	; 46
    11f6:	88 7f       	andi	r24, 0xF8	; 248
    11f8:	8e bd       	out	0x2e, r24	; 46
    11fa:	8e b5       	in	r24, 0x2e	; 46
    11fc:	82 60       	ori	r24, 0x02	; 2
    11fe:	8e bd       	out	0x2e, r24	; 46
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	08 95       	ret

00001204 <Timer1_enu_GetICR1>:
    1204:	fc 01       	movw	r30, r24
    1206:	89 2b       	or	r24, r25
    1208:	81 f0       	breq	.+32     	; 0x122a <Timer1_enu_GetICR1+0x26>
    120a:	26 b5       	in	r18, 0x26	; 38
    120c:	42 2f       	mov	r20, r18
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	51 83       	std	Z+1, r21	; 0x01
    1212:	40 83       	st	Z, r20
    1214:	97 b5       	in	r25, 0x27	; 39
    1216:	29 2f       	mov	r18, r25
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	32 2f       	mov	r19, r18
    121c:	22 27       	eor	r18, r18
    121e:	24 2b       	or	r18, r20
    1220:	35 2b       	or	r19, r21
    1222:	31 83       	std	Z+1, r19	; 0x01
    1224:	20 83       	st	Z, r18
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	08 95       	ret
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	08 95       	ret

0000122e <Timer1_enu_SetTCNT1>:
    122e:	9d bd       	out	0x2d, r25	; 45
    1230:	8c bd       	out	0x2c, r24	; 44
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	08 95       	ret

00001236 <Timer1_enu_SetCallBackFunction>:

extern ErrorState_t Timer1_enu_SetCallBackFunction(u8 Copy_u8_InterruptType, void (*Copy_pfun_AppFunction)(void*), void* Copy_pvid_Prameters)
{
    u8 Local_u8_ErrorFLag = Local_u8_ErrorFLag;

    if(Copy_pfun_AppFunction)
    1236:	61 15       	cp	r22, r1
    1238:	71 05       	cpc	r23, r1
    123a:	69 f0       	breq	.+26     	; 0x1256 <Timer1_enu_SetCallBackFunction+0x20>
    {
        LOC_apfun_IntServiceRoutinesFunctions[Copy_u8_InterruptType] = Copy_pfun_AppFunction;
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	fc 01       	movw	r30, r24
    1244:	ee 53       	subi	r30, 0x3E	; 62
    1246:	f8 4f       	sbci	r31, 0xF8	; 248
    1248:	71 83       	std	Z+1, r23	; 0x01
    124a:	60 83       	st	Z, r22

        LOC_apvid_IntServiceRoutinesParameters[Copy_u8_InterruptType] = Copy_pvid_Prameters;
    124c:	fc 01       	movw	r30, r24
    124e:	e6 54       	subi	r30, 0x46	; 70
    1250:	f8 4f       	sbci	r31, 0xF8	; 248
    1252:	51 83       	std	Z+1, r21	; 0x01
    1254:	40 83       	st	Z, r20
    {
        Local_u8_ErrorFLag = ES_NULL_POINTER;
    }

    return Local_u8_ErrorFLag;
}
    1256:	83 e0       	ldi	r24, 0x03	; 3
    1258:	08 95       	ret

0000125a <Timer1_enu_DisableInterrupt>:

extern ErrorState_t Timer1_enu_DisableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    switch (Copy_u8_InterruptType)
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	59 f0       	breq	.+22     	; 0x1274 <Timer1_enu_DisableInterrupt+0x1a>
    125e:	28 f0       	brcs	.+10     	; 0x126a <Timer1_enu_DisableInterrupt+0x10>
    1260:	82 30       	cpi	r24, 0x02	; 2
    1262:	69 f0       	breq	.+26     	; 0x127e <Timer1_enu_DisableInterrupt+0x24>
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	81 f0       	breq	.+32     	; 0x1288 <Timer1_enu_DisableInterrupt+0x2e>
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <Timer1_enu_DisableInterrupt+0x38>
    {
        case TIMER1_CAPTURE_EVENT_ISR:
        {
            TIMSK &= ~(1<< TIMSK_TICIE1);
    126a:	89 b7       	in	r24, 0x39	; 57
    126c:	8f 7d       	andi	r24, 0xDF	; 223
    126e:	89 bf       	out	0x39, r24	; 57
    return Local_u8_ErrorFLag;
}

extern ErrorState_t Timer1_enu_DisableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    {
        case TIMER1_CAPTURE_EVENT_ISR:
        {
            TIMSK &= ~(1<< TIMSK_TICIE1);

            break;
    1272:	08 95       	ret
        } 
        case TIMER1_CTC_A_ISR:
        {
            TIMSK &= ~(1<< TIMSK_OCIE1A);
    1274:	89 b7       	in	r24, 0x39	; 57
    1276:	8f 7e       	andi	r24, 0xEF	; 239
    1278:	89 bf       	out	0x39, r24	; 57
    return Local_u8_ErrorFLag;
}

extern ErrorState_t Timer1_enu_DisableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    127a:	81 e0       	ldi	r24, 0x01	; 1
        } 
        case TIMER1_CTC_A_ISR:
        {
            TIMSK &= ~(1<< TIMSK_OCIE1A);

            break;
    127c:	08 95       	ret
        } 
        case TIMER1_CTC_B_ISR:
        {
            TIMSK &= ~(1<< TIMSK_OCIE1A);
    127e:	89 b7       	in	r24, 0x39	; 57
    1280:	8f 7e       	andi	r24, 0xEF	; 239
    1282:	89 bf       	out	0x39, r24	; 57
    return Local_u8_ErrorFLag;
}

extern ErrorState_t Timer1_enu_DisableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    1284:	81 e0       	ldi	r24, 0x01	; 1
        } 
        case TIMER1_CTC_B_ISR:
        {
            TIMSK &= ~(1<< TIMSK_OCIE1A);

            break;
    1286:	08 95       	ret
        } 

        case TIMER1_OVERFLOW_ISR:
        {
            TIMSK &= ~(1<< TIMSK_TOIE1);
    1288:	89 b7       	in	r24, 0x39	; 57
    128a:	8b 7f       	andi	r24, 0xFB	; 251
    128c:	89 bf       	out	0x39, r24	; 57
    return Local_u8_ErrorFLag;
}

extern ErrorState_t Timer1_enu_DisableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    128e:	81 e0       	ldi	r24, 0x01	; 1

        case TIMER1_OVERFLOW_ISR:
        {
            TIMSK &= ~(1<< TIMSK_TOIE1);
            
            break;
    1290:	08 95       	ret
        } 
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1292:	82 e0       	ldi	r24, 0x02	; 2
            break;
        }
    }
    return Local_u8_ErrorFlag;
}
    1294:	08 95       	ret

00001296 <Timer1_enu_EnableInterrupt>:

extern ErrorState_t Timer1_enu_EnableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    switch (Copy_u8_InterruptType)
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	59 f0       	breq	.+22     	; 0x12b0 <Timer1_enu_EnableInterrupt+0x1a>
    129a:	28 f0       	brcs	.+10     	; 0x12a6 <Timer1_enu_EnableInterrupt+0x10>
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	69 f0       	breq	.+26     	; 0x12ba <Timer1_enu_EnableInterrupt+0x24>
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	81 f0       	breq	.+32     	; 0x12c4 <Timer1_enu_EnableInterrupt+0x2e>
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <Timer1_enu_EnableInterrupt+0x38>
    {
        case TIMER1_CAPTURE_EVENT_ISR:
        {
            TIMSK |= (1<< TIMSK_TICIE1);
    12a6:	89 b7       	in	r24, 0x39	; 57
    12a8:	80 62       	ori	r24, 0x20	; 32
    12aa:	89 bf       	out	0x39, r24	; 57

            Local_u8_ErrorFlag = ES_OK;
    12ac:	80 e0       	ldi	r24, 0x00	; 0

            break;
    12ae:	08 95       	ret
        } 
        case TIMER1_CTC_A_ISR:
        {
            TIMSK |= (1<< TIMSK_OCIE1A);
    12b0:	89 b7       	in	r24, 0x39	; 57
    12b2:	80 61       	ori	r24, 0x10	; 16
    12b4:	89 bf       	out	0x39, r24	; 57
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_EnableInterrupt(u8 Copy_u8_InterruptType)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
        } 
        case TIMER1_CTC_A_ISR:
        {
            TIMSK |= (1<< TIMSK_OCIE1A);

            break;
    12b8:	08 95       	ret
        } 
        case TIMER1_CTC_B_ISR:
        {
            TIMSK |= (1<< TIMSK_OCIE1A);
    12ba:	89 b7       	in	r24, 0x39	; 57
    12bc:	80 61       	ori	r24, 0x10	; 16
    12be:	89 bf       	out	0x39, r24	; 57

            Local_u8_ErrorFlag = ES_OK;
    12c0:	80 e0       	ldi	r24, 0x00	; 0
            break;
    12c2:	08 95       	ret
        } 

        case TIMER1_OVERFLOW_ISR:
        {
            TIMSK |= (1<< TIMSK_TOIE1);
    12c4:	89 b7       	in	r24, 0x39	; 57
    12c6:	84 60       	ori	r24, 0x04	; 4
    12c8:	89 bf       	out	0x39, r24	; 57
            
            Local_u8_ErrorFlag = ES_OK;
    12ca:	80 e0       	ldi	r24, 0x00	; 0
            break;
    12cc:	08 95       	ret
        } 
    
        default:
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    12ce:	82 e0       	ldi	r24, 0x02	; 2
            break;
        }
    }

    return Local_u8_ErrorFlag;
}
    12d0:	08 95       	ret

000012d2 <Timer1_enu_GetPS>:

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    12d2:	fc 01       	movw	r30, r24
    u8 Local_u8_ErrorFlag = ES_NOK;


    
        u8 Local_u8_CS_Bits = TCCR1B & 0x07; //Acquiring the least significant 3 bits CS2:0\
    12d4:	9e b5       	in	r25, 0x2e	; 46
    12d6:	97 70       	andi	r25, 0x07	; 7

        switch (Local_u8_CS_Bits)
    12d8:	92 30       	cpi	r25, 0x02	; 2
    12da:	a9 f0       	breq	.+42     	; 0x1306 <Timer1_enu_GetPS+0x34>
    12dc:	28 f4       	brcc	.+10     	; 0x12e8 <Timer1_enu_GetPS+0x16>
    12de:	99 23       	and	r25, r25
    12e0:	49 f0       	breq	.+18     	; 0x12f4 <Timer1_enu_GetPS+0x22>
    12e2:	91 30       	cpi	r25, 0x01	; 1
    12e4:	59 f0       	breq	.+22     	; 0x12fc <Timer1_enu_GetPS+0x2a>
    12e6:	27 c0       	rjmp	.+78     	; 0x1336 <Timer1_enu_GetPS+0x64>
    12e8:	94 30       	cpi	r25, 0x04	; 4
    12ea:	c9 f0       	breq	.+50     	; 0x131e <Timer1_enu_GetPS+0x4c>
    12ec:	90 f0       	brcs	.+36     	; 0x1312 <Timer1_enu_GetPS+0x40>
    12ee:	95 30       	cpi	r25, 0x05	; 5
    12f0:	e1 f0       	breq	.+56     	; 0x132a <Timer1_enu_GetPS+0x58>
    12f2:	21 c0       	rjmp	.+66     	; 0x1336 <Timer1_enu_GetPS+0x64>
        {
            
            case 0:
            {
                *Copy_pu16_PS = 0;
    12f4:	11 82       	std	Z+1, r1	; 0x01
    12f6:	10 82       	st	Z, r1
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
            
            case 0:
            {
                *Copy_pu16_PS = 0;
                    
                    break;
    12fa:	08 95       	ret
            }

            case 1:
            {
                *Copy_pu16_PS = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	80 83       	st	Z, r24

                break;
    1304:	08 95       	ret
            }

            case 2:
            {
                *Copy_pu16_PS = 8;
    1306:	88 e0       	ldi	r24, 0x08	; 8
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	91 83       	std	Z+1, r25	; 0x01
    130c:	80 83       	st	Z, r24
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    130e:	81 e0       	ldi	r24, 0x01	; 1

            case 2:
            {
                *Copy_pu16_PS = 8;
                    
                break;
    1310:	08 95       	ret
            }

            case 3:
            {
                *Copy_pu16_PS = 64;
    1312:	80 e4       	ldi	r24, 0x40	; 64
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    131a:	81 e0       	ldi	r24, 0x01	; 1

            case 3:
            {
                *Copy_pu16_PS = 64;
                    
                break;
    131c:	08 95       	ret
            }

            case 4:
            {
                *Copy_pu16_PS = 256;
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	80 83       	st	Z, r24
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    1326:	81 e0       	ldi	r24, 0x01	; 1

            case 4:
            {
                *Copy_pu16_PS = 256;
                    
                break;
    1328:	08 95       	ret
            }

            case 5:
            {
                *Copy_pu16_PS = 1024;
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	94 e0       	ldi	r25, 0x04	; 4
    132e:	91 83       	std	Z+1, r25	; 0x01
    1330:	80 83       	st	Z, r24
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_GetPS(u16* Copy_pu16_PS)
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    1332:	81 e0       	ldi	r24, 0x01	; 1

            case 5:
            {
                *Copy_pu16_PS = 1024;
                    
                break;
    1334:	08 95       	ret
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1336:	82 e0       	ldi	r24, 0x02	; 2
              
        }


    return Local_u8_ErrorFlag;
}
    1338:	08 95       	ret

0000133a <Timer1_enu_SetInputCaptureEdge>:

extern ErrorState_t Timer1_enu_SetInputCaptureEdge(u8 Copy_u8_EdgeType)
{
    u8 Local_u8_Error_Flag = ES_NOK;
    
    if(Copy_u8_EdgeType == TIMER1_ICU_FALLING_EDGE )
    133a:	81 11       	cpse	r24, r1
    133c:	05 c0       	rjmp	.+10     	; 0x1348 <Timer1_enu_SetInputCaptureEdge+0xe>
    {
        TCCR1B &= ~(1 << TCCR1B_ICES1);
    133e:	8e b5       	in	r24, 0x2e	; 46
    1340:	8f 7b       	andi	r24, 0xBF	; 191
    1342:	8e bd       	out	0x2e, r24	; 46
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_SetInputCaptureEdge(u8 Copy_u8_EdgeType)
{
    u8 Local_u8_Error_Flag = ES_NOK;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	08 95       	ret
    
    if(Copy_u8_EdgeType == TIMER1_ICU_FALLING_EDGE )
    {
        TCCR1B &= ~(1 << TCCR1B_ICES1);
    }
    else if( Copy_u8_EdgeType == TIMER1_ICU_RISING_EDGE)
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	29 f4       	brne	.+10     	; 0x1356 <Timer1_enu_SetInputCaptureEdge+0x1c>
    {
        TCCR1B |= (1 << TCCR1B_ICES1);
    134c:	8e b5       	in	r24, 0x2e	; 46
    134e:	80 64       	ori	r24, 0x40	; 64
    1350:	8e bd       	out	0x2e, r24	; 46
    return Local_u8_ErrorFlag;
}

extern ErrorState_t Timer1_enu_SetInputCaptureEdge(u8 Copy_u8_EdgeType)
{
    u8 Local_u8_Error_Flag = ES_NOK;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	08 95       	ret
    {
        TCCR1B |= (1 << TCCR1B_ICES1);
    }
    else
    {
        Local_u8_Error_Flag = ES_OUT_OF_RANGE;
    1356:	82 e0       	ldi	r24, 0x02	; 2
    }
    return Local_u8_Error_Flag;
}
    1358:	08 95       	ret

0000135a <Timer1_enu_ClearFlag>:

extern ErrorState_t Timer1_enu_ClearFlag(u8 Copy_u8_InterruptType)
{
    u8 Lcoal_u8_ErrorFlag = ES_NOK;

    switch (Copy_u8_InterruptType)
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	59 f0       	breq	.+22     	; 0x1374 <Timer1_enu_ClearFlag+0x1a>
    135e:	28 f0       	brcs	.+10     	; 0x136a <Timer1_enu_ClearFlag+0x10>
    1360:	82 30       	cpi	r24, 0x02	; 2
    1362:	69 f0       	breq	.+26     	; 0x137e <Timer1_enu_ClearFlag+0x24>
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	81 f0       	breq	.+32     	; 0x1388 <Timer1_enu_ClearFlag+0x2e>
    1368:	14 c0       	rjmp	.+40     	; 0x1392 <Timer1_enu_ClearFlag+0x38>
    {
        case TIMER1_CAPTURE_EVENT_ISR:
        {
            //Clearing Input Capture Flag
            TIFR |= (1 << TIFR_ICF1);
    136a:	88 b7       	in	r24, 0x38	; 56
    136c:	80 62       	ori	r24, 0x20	; 32
    136e:	88 bf       	out	0x38, r24	; 56

            Lcoal_u8_ErrorFlag = ES_OK;
    1370:	80 e0       	ldi	r24, 0x00	; 0
            break;
    1372:	08 95       	ret
        }

        case TIMER1_CTC_A_ISR:
        {
            //Clearing Output Compare Flag A
            TIFR |= (1 << TIFR_OCF1A);
    1374:	88 b7       	in	r24, 0x38	; 56
    1376:	80 61       	ori	r24, 0x10	; 16
    1378:	88 bf       	out	0x38, r24	; 56

            Lcoal_u8_ErrorFlag = ES_OK;
    137a:	80 e0       	ldi	r24, 0x00	; 0
            break;
    137c:	08 95       	ret
        }

        case TIMER1_CTC_B_ISR:
        {
            //Clearing Output Compare Flag B
            TIFR |= (1 << TIFR_OCF1B);
    137e:	88 b7       	in	r24, 0x38	; 56
    1380:	88 60       	ori	r24, 0x08	; 8
    1382:	88 bf       	out	0x38, r24	; 56

            Lcoal_u8_ErrorFlag = ES_OK;
    1384:	80 e0       	ldi	r24, 0x00	; 0
            break;
    1386:	08 95       	ret
        }

        case TIMER1_OVERFLOW_ISR:
        {
            //Clearing Overflow Flag 
            TIFR |= (1 << TIFR_TOV1);
    1388:	88 b7       	in	r24, 0x38	; 56
    138a:	84 60       	ori	r24, 0x04	; 4
    138c:	88 bf       	out	0x38, r24	; 56

            Lcoal_u8_ErrorFlag = ES_OK;
    138e:	80 e0       	ldi	r24, 0x00	; 0
            break;
    1390:	08 95       	ret
        }

        default:
        {
            Lcoal_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1392:	82 e0       	ldi	r24, 0x02	; 2
            break;
        }
    }
    return Lcoal_u8_ErrorFlag;
}
    1394:	08 95       	ret

00001396 <__vector_6>:
void __vector_7 (void)__attribute__((signal));
void __vector_8 (void)__attribute__((signal));
void __vector_9 (void)__attribute__((signal));

void __vector_6 (void)
{
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	2f 93       	push	r18
    13a2:	3f 93       	push	r19
    13a4:	4f 93       	push	r20
    13a6:	5f 93       	push	r21
    13a8:	6f 93       	push	r22
    13aa:	7f 93       	push	r23
    13ac:	8f 93       	push	r24
    13ae:	9f 93       	push	r25
    13b0:	af 93       	push	r26
    13b2:	bf 93       	push	r27
    13b4:	ef 93       	push	r30
    13b6:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CAPTURE_EVENT_ISR])
    13b8:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <LOC_apfun_IntServiceRoutinesFunctions>
    13bc:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <LOC_apfun_IntServiceRoutinesFunctions+0x1>
    13c0:	30 97       	sbiw	r30, 0x00	; 0
    13c2:	29 f0       	breq	.+10     	; 0x13ce <__vector_6+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CAPTURE_EVENT_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CAPTURE_EVENT_ISR]);
    13c4:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <LOC_apvid_IntServiceRoutinesParameters>
    13c8:	90 91 bb 07 	lds	r25, 0x07BB	; 0x8007bb <LOC_apvid_IntServiceRoutinesParameters+0x1>
    13cc:	09 95       	icall
    }
}
    13ce:	ff 91       	pop	r31
    13d0:	ef 91       	pop	r30
    13d2:	bf 91       	pop	r27
    13d4:	af 91       	pop	r26
    13d6:	9f 91       	pop	r25
    13d8:	8f 91       	pop	r24
    13da:	7f 91       	pop	r23
    13dc:	6f 91       	pop	r22
    13de:	5f 91       	pop	r21
    13e0:	4f 91       	pop	r20
    13e2:	3f 91       	pop	r19
    13e4:	2f 91       	pop	r18
    13e6:	0f 90       	pop	r0
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	0f 90       	pop	r0
    13ec:	1f 90       	pop	r1
    13ee:	18 95       	reti

000013f0 <__vector_7>:

void __vector_7 (void)
{
    13f0:	1f 92       	push	r1
    13f2:	0f 92       	push	r0
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	0f 92       	push	r0
    13f8:	11 24       	eor	r1, r1
    13fa:	2f 93       	push	r18
    13fc:	3f 93       	push	r19
    13fe:	4f 93       	push	r20
    1400:	5f 93       	push	r21
    1402:	6f 93       	push	r22
    1404:	7f 93       	push	r23
    1406:	8f 93       	push	r24
    1408:	9f 93       	push	r25
    140a:	af 93       	push	r26
    140c:	bf 93       	push	r27
    140e:	ef 93       	push	r30
    1410:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_A_ISR])
    1412:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <LOC_apfun_IntServiceRoutinesFunctions+0x2>
    1416:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <LOC_apfun_IntServiceRoutinesFunctions+0x3>
    141a:	30 97       	sbiw	r30, 0x00	; 0
    141c:	29 f0       	breq	.+10     	; 0x1428 <__vector_7+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_A_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CTC_A_ISR]);
    141e:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <LOC_apvid_IntServiceRoutinesParameters+0x2>
    1422:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <LOC_apvid_IntServiceRoutinesParameters+0x3>
    1426:	09 95       	icall
    }
}
    1428:	ff 91       	pop	r31
    142a:	ef 91       	pop	r30
    142c:	bf 91       	pop	r27
    142e:	af 91       	pop	r26
    1430:	9f 91       	pop	r25
    1432:	8f 91       	pop	r24
    1434:	7f 91       	pop	r23
    1436:	6f 91       	pop	r22
    1438:	5f 91       	pop	r21
    143a:	4f 91       	pop	r20
    143c:	3f 91       	pop	r19
    143e:	2f 91       	pop	r18
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	0f 90       	pop	r0
    1446:	1f 90       	pop	r1
    1448:	18 95       	reti

0000144a <__vector_8>:

void __vector_8 (void)
{
    144a:	1f 92       	push	r1
    144c:	0f 92       	push	r0
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	0f 92       	push	r0
    1452:	11 24       	eor	r1, r1
    1454:	2f 93       	push	r18
    1456:	3f 93       	push	r19
    1458:	4f 93       	push	r20
    145a:	5f 93       	push	r21
    145c:	6f 93       	push	r22
    145e:	7f 93       	push	r23
    1460:	8f 93       	push	r24
    1462:	9f 93       	push	r25
    1464:	af 93       	push	r26
    1466:	bf 93       	push	r27
    1468:	ef 93       	push	r30
    146a:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_B_ISR])
    146c:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <LOC_apfun_IntServiceRoutinesFunctions+0x4>
    1470:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <LOC_apfun_IntServiceRoutinesFunctions+0x5>
    1474:	30 97       	sbiw	r30, 0x00	; 0
    1476:	29 f0       	breq	.+10     	; 0x1482 <__vector_8+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_CTC_B_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_CTC_B_ISR]);
    1478:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <LOC_apvid_IntServiceRoutinesParameters+0x4>
    147c:	90 91 bf 07 	lds	r25, 0x07BF	; 0x8007bf <LOC_apvid_IntServiceRoutinesParameters+0x5>
    1480:	09 95       	icall
    }
}
    1482:	ff 91       	pop	r31
    1484:	ef 91       	pop	r30
    1486:	bf 91       	pop	r27
    1488:	af 91       	pop	r26
    148a:	9f 91       	pop	r25
    148c:	8f 91       	pop	r24
    148e:	7f 91       	pop	r23
    1490:	6f 91       	pop	r22
    1492:	5f 91       	pop	r21
    1494:	4f 91       	pop	r20
    1496:	3f 91       	pop	r19
    1498:	2f 91       	pop	r18
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0
    14a0:	1f 90       	pop	r1
    14a2:	18 95       	reti

000014a4 <__vector_9>:

void __vector_9 (void)
{
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	2f 93       	push	r18
    14b0:	3f 93       	push	r19
    14b2:	4f 93       	push	r20
    14b4:	5f 93       	push	r21
    14b6:	6f 93       	push	r22
    14b8:	7f 93       	push	r23
    14ba:	8f 93       	push	r24
    14bc:	9f 93       	push	r25
    14be:	af 93       	push	r26
    14c0:	bf 93       	push	r27
    14c2:	ef 93       	push	r30
    14c4:	ff 93       	push	r31
    if(LOC_apfun_IntServiceRoutinesFunctions[TIMER1_OVERFLOW_ISR])
    14c6:	e0 91 c8 07 	lds	r30, 0x07C8	; 0x8007c8 <LOC_apfun_IntServiceRoutinesFunctions+0x6>
    14ca:	f0 91 c9 07 	lds	r31, 0x07C9	; 0x8007c9 <LOC_apfun_IntServiceRoutinesFunctions+0x7>
    14ce:	30 97       	sbiw	r30, 0x00	; 0
    14d0:	29 f0       	breq	.+10     	; 0x14dc <__vector_9+0x38>
    {
       LOC_apfun_IntServiceRoutinesFunctions[TIMER1_OVERFLOW_ISR](LOC_apvid_IntServiceRoutinesParameters[TIMER1_OVERFLOW_ISR]);
    14d2:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <LOC_apvid_IntServiceRoutinesParameters+0x6>
    14d6:	90 91 c1 07 	lds	r25, 0x07C1	; 0x8007c1 <LOC_apvid_IntServiceRoutinesParameters+0x7>
    14da:	09 95       	icall
    }
}
    14dc:	ff 91       	pop	r31
    14de:	ef 91       	pop	r30
    14e0:	bf 91       	pop	r27
    14e2:	af 91       	pop	r26
    14e4:	9f 91       	pop	r25
    14e6:	8f 91       	pop	r24
    14e8:	7f 91       	pop	r23
    14ea:	6f 91       	pop	r22
    14ec:	5f 91       	pop	r21
    14ee:	4f 91       	pop	r20
    14f0:	3f 91       	pop	r19
    14f2:	2f 91       	pop	r18
    14f4:	0f 90       	pop	r0
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	0f 90       	pop	r0
    14fa:	1f 90       	pop	r1
    14fc:	18 95       	reti

000014fe <__vector_4>:
void __vector_11 (void)__attribute__((signal));


void __vector_4 (void)
{
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    14fe:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <apfun_ISRpointers>
    1502:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <apfun_ISRpointers+0x1>
    1506:	30 97       	sbiw	r30, 0x00	; 0
    1508:	29 f0       	breq	.+10     	; 0x1514 <__vector_4+0x16>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    150a:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <apvid_ISRParameters>
    150e:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <apvid_ISRParameters+0x1>
    1512:	09 95       	icall
    1514:	08 95       	ret

00001516 <__vector_5>:
    }
}

void __vector_5 (void)
{
    if(apfun_ISRpointers[TIMER_2_CTC_ISR])
    1516:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <apfun_ISRpointers>
    151a:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <apfun_ISRpointers+0x1>
    151e:	30 97       	sbiw	r30, 0x00	; 0
    1520:	29 f0       	breq	.+10     	; 0x152c <__vector_5+0x16>
    {
       apfun_ISRpointers[TIMER_2_CTC_ISR](apvid_ISRParameters[TIMER_2_CTC_ISR]);
    1522:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <apvid_ISRParameters>
    1526:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <apvid_ISRParameters+0x1>
    152a:	09 95       	icall
    152c:	08 95       	ret

0000152e <__vector_10>:
    }
}

void __vector_10 (void)
{
    if(apfun_ISRpointers[TIMER_0_CTC_ISR])
    152e:	e0 91 e6 07 	lds	r30, 0x07E6	; 0x8007e6 <apfun_ISRpointers+0xc>
    1532:	f0 91 e7 07 	lds	r31, 0x07E7	; 0x8007e7 <apfun_ISRpointers+0xd>
    1536:	30 97       	sbiw	r30, 0x00	; 0
    1538:	29 f0       	breq	.+10     	; 0x1544 <__vector_10+0x16>
    {
       apfun_ISRpointers[TIMER_0_CTC_ISR](apvid_ISRParameters[TIMER_0_CTC_ISR]);
    153a:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <apvid_ISRParameters+0xc>
    153e:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <apvid_ISRParameters+0xd>
    1542:	09 95       	icall
    1544:	08 95       	ret

00001546 <__vector_11>:
    }
}

void __vector_11 (void)
{
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	11 24       	eor	r1, r1
    1550:	2f 93       	push	r18
    1552:	3f 93       	push	r19
    1554:	4f 93       	push	r20
    1556:	5f 93       	push	r21
    1558:	6f 93       	push	r22
    155a:	7f 93       	push	r23
    155c:	8f 93       	push	r24
    155e:	9f 93       	push	r25
    1560:	af 93       	push	r26
    1562:	bf 93       	push	r27
    1564:	ef 93       	push	r30
    1566:	ff 93       	push	r31
    if(apfun_ISRpointers[TIMER_0_OVERFLOW_ISR])
    1568:	e0 91 e8 07 	lds	r30, 0x07E8	; 0x8007e8 <apfun_ISRpointers+0xe>
    156c:	f0 91 e9 07 	lds	r31, 0x07E9	; 0x8007e9 <apfun_ISRpointers+0xf>
    1570:	30 97       	sbiw	r30, 0x00	; 0
    1572:	29 f0       	breq	.+10     	; 0x157e <__vector_11+0x38>
    {
        apfun_ISRpointers[TIMER_0_OVERFLOW_ISR](apvid_ISRParameters[TIMER_0_OVERFLOW_ISR]);
    1574:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <apvid_ISRParameters+0xe>
    1578:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <apvid_ISRParameters+0xf>
    157c:	09 95       	icall
    }
}
    157e:	ff 91       	pop	r31
    1580:	ef 91       	pop	r30
    1582:	bf 91       	pop	r27
    1584:	af 91       	pop	r26
    1586:	9f 91       	pop	r25
    1588:	8f 91       	pop	r24
    158a:	7f 91       	pop	r23
    158c:	6f 91       	pop	r22
    158e:	5f 91       	pop	r21
    1590:	4f 91       	pop	r20
    1592:	3f 91       	pop	r19
    1594:	2f 91       	pop	r18
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <__subsf3>:
    15a0:	50 58       	subi	r21, 0x80	; 128

000015a2 <__addsf3>:
    15a2:	bb 27       	eor	r27, r27
    15a4:	aa 27       	eor	r26, r26
    15a6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3x>
    15aa:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_round>
    15ae:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fp_pscA>
    15b2:	38 f0       	brcs	.+14     	; 0x15c2 <__addsf3+0x20>
    15b4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_pscB>
    15b8:	20 f0       	brcs	.+8      	; 0x15c2 <__addsf3+0x20>
    15ba:	39 f4       	brne	.+14     	; 0x15ca <__addsf3+0x28>
    15bc:	9f 3f       	cpi	r25, 0xFF	; 255
    15be:	19 f4       	brne	.+6      	; 0x15c6 <__addsf3+0x24>
    15c0:	26 f4       	brtc	.+8      	; 0x15ca <__addsf3+0x28>
    15c2:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__fp_nan>
    15c6:	0e f4       	brtc	.+2      	; 0x15ca <__addsf3+0x28>
    15c8:	e0 95       	com	r30
    15ca:	e7 fb       	bst	r30, 7
    15cc:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_inf>

000015d0 <__addsf3x>:
    15d0:	e9 2f       	mov	r30, r25
    15d2:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_split3>
    15d6:	58 f3       	brcs	.-42     	; 0x15ae <__addsf3+0xc>
    15d8:	ba 17       	cp	r27, r26
    15da:	62 07       	cpc	r22, r18
    15dc:	73 07       	cpc	r23, r19
    15de:	84 07       	cpc	r24, r20
    15e0:	95 07       	cpc	r25, r21
    15e2:	20 f0       	brcs	.+8      	; 0x15ec <__addsf3x+0x1c>
    15e4:	79 f4       	brne	.+30     	; 0x1604 <__addsf3x+0x34>
    15e6:	a6 f5       	brtc	.+104    	; 0x1650 <__addsf3x+0x80>
    15e8:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__fp_zero>
    15ec:	0e f4       	brtc	.+2      	; 0x15f0 <__addsf3x+0x20>
    15ee:	e0 95       	com	r30
    15f0:	0b 2e       	mov	r0, r27
    15f2:	ba 2f       	mov	r27, r26
    15f4:	a0 2d       	mov	r26, r0
    15f6:	0b 01       	movw	r0, r22
    15f8:	b9 01       	movw	r22, r18
    15fa:	90 01       	movw	r18, r0
    15fc:	0c 01       	movw	r0, r24
    15fe:	ca 01       	movw	r24, r20
    1600:	a0 01       	movw	r20, r0
    1602:	11 24       	eor	r1, r1
    1604:	ff 27       	eor	r31, r31
    1606:	59 1b       	sub	r21, r25
    1608:	99 f0       	breq	.+38     	; 0x1630 <__addsf3x+0x60>
    160a:	59 3f       	cpi	r21, 0xF9	; 249
    160c:	50 f4       	brcc	.+20     	; 0x1622 <__addsf3x+0x52>
    160e:	50 3e       	cpi	r21, 0xE0	; 224
    1610:	68 f1       	brcs	.+90     	; 0x166c <__addsf3x+0x9c>
    1612:	1a 16       	cp	r1, r26
    1614:	f0 40       	sbci	r31, 0x00	; 0
    1616:	a2 2f       	mov	r26, r18
    1618:	23 2f       	mov	r18, r19
    161a:	34 2f       	mov	r19, r20
    161c:	44 27       	eor	r20, r20
    161e:	58 5f       	subi	r21, 0xF8	; 248
    1620:	f3 cf       	rjmp	.-26     	; 0x1608 <__addsf3x+0x38>
    1622:	46 95       	lsr	r20
    1624:	37 95       	ror	r19
    1626:	27 95       	ror	r18
    1628:	a7 95       	ror	r26
    162a:	f0 40       	sbci	r31, 0x00	; 0
    162c:	53 95       	inc	r21
    162e:	c9 f7       	brne	.-14     	; 0x1622 <__addsf3x+0x52>
    1630:	7e f4       	brtc	.+30     	; 0x1650 <__addsf3x+0x80>
    1632:	1f 16       	cp	r1, r31
    1634:	ba 0b       	sbc	r27, r26
    1636:	62 0b       	sbc	r22, r18
    1638:	73 0b       	sbc	r23, r19
    163a:	84 0b       	sbc	r24, r20
    163c:	ba f0       	brmi	.+46     	; 0x166c <__addsf3x+0x9c>
    163e:	91 50       	subi	r25, 0x01	; 1
    1640:	a1 f0       	breq	.+40     	; 0x166a <__addsf3x+0x9a>
    1642:	ff 0f       	add	r31, r31
    1644:	bb 1f       	adc	r27, r27
    1646:	66 1f       	adc	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	c2 f7       	brpl	.-16     	; 0x163e <__addsf3x+0x6e>
    164e:	0e c0       	rjmp	.+28     	; 0x166c <__addsf3x+0x9c>
    1650:	ba 0f       	add	r27, r26
    1652:	62 1f       	adc	r22, r18
    1654:	73 1f       	adc	r23, r19
    1656:	84 1f       	adc	r24, r20
    1658:	48 f4       	brcc	.+18     	; 0x166c <__addsf3x+0x9c>
    165a:	87 95       	ror	r24
    165c:	77 95       	ror	r23
    165e:	67 95       	ror	r22
    1660:	b7 95       	ror	r27
    1662:	f7 95       	ror	r31
    1664:	9e 3f       	cpi	r25, 0xFE	; 254
    1666:	08 f0       	brcs	.+2      	; 0x166a <__addsf3x+0x9a>
    1668:	b0 cf       	rjmp	.-160    	; 0x15ca <__addsf3+0x28>
    166a:	93 95       	inc	r25
    166c:	88 0f       	add	r24, r24
    166e:	08 f0       	brcs	.+2      	; 0x1672 <__addsf3x+0xa2>
    1670:	99 27       	eor	r25, r25
    1672:	ee 0f       	add	r30, r30
    1674:	97 95       	ror	r25
    1676:	87 95       	ror	r24
    1678:	08 95       	ret

0000167a <__cmpsf2>:
    167a:	0e 94 20 0c 	call	0x1840	; 0x1840 <__fp_cmp>
    167e:	08 f4       	brcc	.+2      	; 0x1682 <__cmpsf2+0x8>
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	08 95       	ret

00001684 <__divsf3>:
    1684:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__divsf3x>
    1688:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_round>
    168c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_pscB>
    1690:	58 f0       	brcs	.+22     	; 0x16a8 <__divsf3+0x24>
    1692:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fp_pscA>
    1696:	40 f0       	brcs	.+16     	; 0x16a8 <__divsf3+0x24>
    1698:	29 f4       	brne	.+10     	; 0x16a4 <__divsf3+0x20>
    169a:	5f 3f       	cpi	r21, 0xFF	; 255
    169c:	29 f0       	breq	.+10     	; 0x16a8 <__divsf3+0x24>
    169e:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_inf>
    16a2:	51 11       	cpse	r21, r1
    16a4:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_szero>
    16a8:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__fp_nan>

000016ac <__divsf3x>:
    16ac:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_split3>
    16b0:	68 f3       	brcs	.-38     	; 0x168c <__divsf3+0x8>

000016b2 <__divsf3_pse>:
    16b2:	99 23       	and	r25, r25
    16b4:	b1 f3       	breq	.-20     	; 0x16a2 <__divsf3+0x1e>
    16b6:	55 23       	and	r21, r21
    16b8:	91 f3       	breq	.-28     	; 0x169e <__divsf3+0x1a>
    16ba:	95 1b       	sub	r25, r21
    16bc:	55 0b       	sbc	r21, r21
    16be:	bb 27       	eor	r27, r27
    16c0:	aa 27       	eor	r26, r26
    16c2:	62 17       	cp	r22, r18
    16c4:	73 07       	cpc	r23, r19
    16c6:	84 07       	cpc	r24, r20
    16c8:	38 f0       	brcs	.+14     	; 0x16d8 <__divsf3_pse+0x26>
    16ca:	9f 5f       	subi	r25, 0xFF	; 255
    16cc:	5f 4f       	sbci	r21, 0xFF	; 255
    16ce:	22 0f       	add	r18, r18
    16d0:	33 1f       	adc	r19, r19
    16d2:	44 1f       	adc	r20, r20
    16d4:	aa 1f       	adc	r26, r26
    16d6:	a9 f3       	breq	.-22     	; 0x16c2 <__divsf3_pse+0x10>
    16d8:	35 d0       	rcall	.+106    	; 0x1744 <__divsf3_pse+0x92>
    16da:	0e 2e       	mov	r0, r30
    16dc:	3a f0       	brmi	.+14     	; 0x16ec <__divsf3_pse+0x3a>
    16de:	e0 e8       	ldi	r30, 0x80	; 128
    16e0:	32 d0       	rcall	.+100    	; 0x1746 <__divsf3_pse+0x94>
    16e2:	91 50       	subi	r25, 0x01	; 1
    16e4:	50 40       	sbci	r21, 0x00	; 0
    16e6:	e6 95       	lsr	r30
    16e8:	00 1c       	adc	r0, r0
    16ea:	ca f7       	brpl	.-14     	; 0x16de <__divsf3_pse+0x2c>
    16ec:	2b d0       	rcall	.+86     	; 0x1744 <__divsf3_pse+0x92>
    16ee:	fe 2f       	mov	r31, r30
    16f0:	29 d0       	rcall	.+82     	; 0x1744 <__divsf3_pse+0x92>
    16f2:	66 0f       	add	r22, r22
    16f4:	77 1f       	adc	r23, r23
    16f6:	88 1f       	adc	r24, r24
    16f8:	bb 1f       	adc	r27, r27
    16fa:	26 17       	cp	r18, r22
    16fc:	37 07       	cpc	r19, r23
    16fe:	48 07       	cpc	r20, r24
    1700:	ab 07       	cpc	r26, r27
    1702:	b0 e8       	ldi	r27, 0x80	; 128
    1704:	09 f0       	breq	.+2      	; 0x1708 <__divsf3_pse+0x56>
    1706:	bb 0b       	sbc	r27, r27
    1708:	80 2d       	mov	r24, r0
    170a:	bf 01       	movw	r22, r30
    170c:	ff 27       	eor	r31, r31
    170e:	93 58       	subi	r25, 0x83	; 131
    1710:	5f 4f       	sbci	r21, 0xFF	; 255
    1712:	3a f0       	brmi	.+14     	; 0x1722 <__divsf3_pse+0x70>
    1714:	9e 3f       	cpi	r25, 0xFE	; 254
    1716:	51 05       	cpc	r21, r1
    1718:	78 f0       	brcs	.+30     	; 0x1738 <__divsf3_pse+0x86>
    171a:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_inf>
    171e:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_szero>
    1722:	5f 3f       	cpi	r21, 0xFF	; 255
    1724:	e4 f3       	brlt	.-8      	; 0x171e <__divsf3_pse+0x6c>
    1726:	98 3e       	cpi	r25, 0xE8	; 232
    1728:	d4 f3       	brlt	.-12     	; 0x171e <__divsf3_pse+0x6c>
    172a:	86 95       	lsr	r24
    172c:	77 95       	ror	r23
    172e:	67 95       	ror	r22
    1730:	b7 95       	ror	r27
    1732:	f7 95       	ror	r31
    1734:	9f 5f       	subi	r25, 0xFF	; 255
    1736:	c9 f7       	brne	.-14     	; 0x172a <__divsf3_pse+0x78>
    1738:	88 0f       	add	r24, r24
    173a:	91 1d       	adc	r25, r1
    173c:	96 95       	lsr	r25
    173e:	87 95       	ror	r24
    1740:	97 f9       	bld	r25, 7
    1742:	08 95       	ret
    1744:	e1 e0       	ldi	r30, 0x01	; 1
    1746:	66 0f       	add	r22, r22
    1748:	77 1f       	adc	r23, r23
    174a:	88 1f       	adc	r24, r24
    174c:	bb 1f       	adc	r27, r27
    174e:	62 17       	cp	r22, r18
    1750:	73 07       	cpc	r23, r19
    1752:	84 07       	cpc	r24, r20
    1754:	ba 07       	cpc	r27, r26
    1756:	20 f0       	brcs	.+8      	; 0x1760 <__divsf3_pse+0xae>
    1758:	62 1b       	sub	r22, r18
    175a:	73 0b       	sbc	r23, r19
    175c:	84 0b       	sbc	r24, r20
    175e:	ba 0b       	sbc	r27, r26
    1760:	ee 1f       	adc	r30, r30
    1762:	88 f7       	brcc	.-30     	; 0x1746 <__divsf3_pse+0x94>
    1764:	e0 95       	com	r30
    1766:	08 95       	ret

00001768 <__fixunssfsi>:
    1768:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_splitA>
    176c:	88 f0       	brcs	.+34     	; 0x1790 <__fixunssfsi+0x28>
    176e:	9f 57       	subi	r25, 0x7F	; 127
    1770:	98 f0       	brcs	.+38     	; 0x1798 <__fixunssfsi+0x30>
    1772:	b9 2f       	mov	r27, r25
    1774:	99 27       	eor	r25, r25
    1776:	b7 51       	subi	r27, 0x17	; 23
    1778:	b0 f0       	brcs	.+44     	; 0x17a6 <__fixunssfsi+0x3e>
    177a:	e1 f0       	breq	.+56     	; 0x17b4 <__fixunssfsi+0x4c>
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	88 1f       	adc	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	1a f0       	brmi	.+6      	; 0x178c <__fixunssfsi+0x24>
    1786:	ba 95       	dec	r27
    1788:	c9 f7       	brne	.-14     	; 0x177c <__fixunssfsi+0x14>
    178a:	14 c0       	rjmp	.+40     	; 0x17b4 <__fixunssfsi+0x4c>
    178c:	b1 30       	cpi	r27, 0x01	; 1
    178e:	91 f0       	breq	.+36     	; 0x17b4 <__fixunssfsi+0x4c>
    1790:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fp_zero>
    1794:	b1 e0       	ldi	r27, 0x01	; 1
    1796:	08 95       	ret
    1798:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__fp_zero>
    179c:	67 2f       	mov	r22, r23
    179e:	78 2f       	mov	r23, r24
    17a0:	88 27       	eor	r24, r24
    17a2:	b8 5f       	subi	r27, 0xF8	; 248
    17a4:	39 f0       	breq	.+14     	; 0x17b4 <__fixunssfsi+0x4c>
    17a6:	b9 3f       	cpi	r27, 0xF9	; 249
    17a8:	cc f3       	brlt	.-14     	; 0x179c <__fixunssfsi+0x34>
    17aa:	86 95       	lsr	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	b3 95       	inc	r27
    17b2:	d9 f7       	brne	.-10     	; 0x17aa <__fixunssfsi+0x42>
    17b4:	3e f4       	brtc	.+14     	; 0x17c4 <__fixunssfsi+0x5c>
    17b6:	90 95       	com	r25
    17b8:	80 95       	com	r24
    17ba:	70 95       	com	r23
    17bc:	61 95       	neg	r22
    17be:	7f 4f       	sbci	r23, 0xFF	; 255
    17c0:	8f 4f       	sbci	r24, 0xFF	; 255
    17c2:	9f 4f       	sbci	r25, 0xFF	; 255
    17c4:	08 95       	ret

000017c6 <__floatunsisf>:
    17c6:	e8 94       	clt
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <__floatsisf+0x12>

000017ca <__floatsisf>:
    17ca:	97 fb       	bst	r25, 7
    17cc:	3e f4       	brtc	.+14     	; 0x17dc <__floatsisf+0x12>
    17ce:	90 95       	com	r25
    17d0:	80 95       	com	r24
    17d2:	70 95       	com	r23
    17d4:	61 95       	neg	r22
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	8f 4f       	sbci	r24, 0xFF	; 255
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	99 23       	and	r25, r25
    17de:	a9 f0       	breq	.+42     	; 0x180a <__floatsisf+0x40>
    17e0:	f9 2f       	mov	r31, r25
    17e2:	96 e9       	ldi	r25, 0x96	; 150
    17e4:	bb 27       	eor	r27, r27
    17e6:	93 95       	inc	r25
    17e8:	f6 95       	lsr	r31
    17ea:	87 95       	ror	r24
    17ec:	77 95       	ror	r23
    17ee:	67 95       	ror	r22
    17f0:	b7 95       	ror	r27
    17f2:	f1 11       	cpse	r31, r1
    17f4:	f8 cf       	rjmp	.-16     	; 0x17e6 <__floatsisf+0x1c>
    17f6:	fa f4       	brpl	.+62     	; 0x1836 <__floatsisf+0x6c>
    17f8:	bb 0f       	add	r27, r27
    17fa:	11 f4       	brne	.+4      	; 0x1800 <__floatsisf+0x36>
    17fc:	60 ff       	sbrs	r22, 0
    17fe:	1b c0       	rjmp	.+54     	; 0x1836 <__floatsisf+0x6c>
    1800:	6f 5f       	subi	r22, 0xFF	; 255
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	8f 4f       	sbci	r24, 0xFF	; 255
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	16 c0       	rjmp	.+44     	; 0x1836 <__floatsisf+0x6c>
    180a:	88 23       	and	r24, r24
    180c:	11 f0       	breq	.+4      	; 0x1812 <__floatsisf+0x48>
    180e:	96 e9       	ldi	r25, 0x96	; 150
    1810:	11 c0       	rjmp	.+34     	; 0x1834 <__floatsisf+0x6a>
    1812:	77 23       	and	r23, r23
    1814:	21 f0       	breq	.+8      	; 0x181e <__floatsisf+0x54>
    1816:	9e e8       	ldi	r25, 0x8E	; 142
    1818:	87 2f       	mov	r24, r23
    181a:	76 2f       	mov	r23, r22
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <__floatsisf+0x5e>
    181e:	66 23       	and	r22, r22
    1820:	71 f0       	breq	.+28     	; 0x183e <__floatsisf+0x74>
    1822:	96 e8       	ldi	r25, 0x86	; 134
    1824:	86 2f       	mov	r24, r22
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	2a f0       	brmi	.+10     	; 0x1836 <__floatsisf+0x6c>
    182c:	9a 95       	dec	r25
    182e:	66 0f       	add	r22, r22
    1830:	77 1f       	adc	r23, r23
    1832:	88 1f       	adc	r24, r24
    1834:	da f7       	brpl	.-10     	; 0x182c <__floatsisf+0x62>
    1836:	88 0f       	add	r24, r24
    1838:	96 95       	lsr	r25
    183a:	87 95       	ror	r24
    183c:	97 f9       	bld	r25, 7
    183e:	08 95       	ret

00001840 <__fp_cmp>:
    1840:	99 0f       	add	r25, r25
    1842:	00 08       	sbc	r0, r0
    1844:	55 0f       	add	r21, r21
    1846:	aa 0b       	sbc	r26, r26
    1848:	e0 e8       	ldi	r30, 0x80	; 128
    184a:	fe ef       	ldi	r31, 0xFE	; 254
    184c:	16 16       	cp	r1, r22
    184e:	17 06       	cpc	r1, r23
    1850:	e8 07       	cpc	r30, r24
    1852:	f9 07       	cpc	r31, r25
    1854:	c0 f0       	brcs	.+48     	; 0x1886 <__fp_cmp+0x46>
    1856:	12 16       	cp	r1, r18
    1858:	13 06       	cpc	r1, r19
    185a:	e4 07       	cpc	r30, r20
    185c:	f5 07       	cpc	r31, r21
    185e:	98 f0       	brcs	.+38     	; 0x1886 <__fp_cmp+0x46>
    1860:	62 1b       	sub	r22, r18
    1862:	73 0b       	sbc	r23, r19
    1864:	84 0b       	sbc	r24, r20
    1866:	95 0b       	sbc	r25, r21
    1868:	39 f4       	brne	.+14     	; 0x1878 <__fp_cmp+0x38>
    186a:	0a 26       	eor	r0, r26
    186c:	61 f0       	breq	.+24     	; 0x1886 <__fp_cmp+0x46>
    186e:	23 2b       	or	r18, r19
    1870:	24 2b       	or	r18, r20
    1872:	25 2b       	or	r18, r21
    1874:	21 f4       	brne	.+8      	; 0x187e <__fp_cmp+0x3e>
    1876:	08 95       	ret
    1878:	0a 26       	eor	r0, r26
    187a:	09 f4       	brne	.+2      	; 0x187e <__fp_cmp+0x3e>
    187c:	a1 40       	sbci	r26, 0x01	; 1
    187e:	a6 95       	lsr	r26
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	81 1d       	adc	r24, r1
    1884:	81 1d       	adc	r24, r1
    1886:	08 95       	ret

00001888 <__fp_inf>:
    1888:	97 f9       	bld	r25, 7
    188a:	9f 67       	ori	r25, 0x7F	; 127
    188c:	80 e8       	ldi	r24, 0x80	; 128
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	08 95       	ret

00001894 <__fp_nan>:
    1894:	9f ef       	ldi	r25, 0xFF	; 255
    1896:	80 ec       	ldi	r24, 0xC0	; 192
    1898:	08 95       	ret

0000189a <__fp_pscA>:
    189a:	00 24       	eor	r0, r0
    189c:	0a 94       	dec	r0
    189e:	16 16       	cp	r1, r22
    18a0:	17 06       	cpc	r1, r23
    18a2:	18 06       	cpc	r1, r24
    18a4:	09 06       	cpc	r0, r25
    18a6:	08 95       	ret

000018a8 <__fp_pscB>:
    18a8:	00 24       	eor	r0, r0
    18aa:	0a 94       	dec	r0
    18ac:	12 16       	cp	r1, r18
    18ae:	13 06       	cpc	r1, r19
    18b0:	14 06       	cpc	r1, r20
    18b2:	05 06       	cpc	r0, r21
    18b4:	08 95       	ret

000018b6 <__fp_round>:
    18b6:	09 2e       	mov	r0, r25
    18b8:	03 94       	inc	r0
    18ba:	00 0c       	add	r0, r0
    18bc:	11 f4       	brne	.+4      	; 0x18c2 <__fp_round+0xc>
    18be:	88 23       	and	r24, r24
    18c0:	52 f0       	brmi	.+20     	; 0x18d6 <__fp_round+0x20>
    18c2:	bb 0f       	add	r27, r27
    18c4:	40 f4       	brcc	.+16     	; 0x18d6 <__fp_round+0x20>
    18c6:	bf 2b       	or	r27, r31
    18c8:	11 f4       	brne	.+4      	; 0x18ce <__fp_round+0x18>
    18ca:	60 ff       	sbrs	r22, 0
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <__fp_round+0x20>
    18ce:	6f 5f       	subi	r22, 0xFF	; 255
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	8f 4f       	sbci	r24, 0xFF	; 255
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	08 95       	ret

000018d8 <__fp_split3>:
    18d8:	57 fd       	sbrc	r21, 7
    18da:	90 58       	subi	r25, 0x80	; 128
    18dc:	44 0f       	add	r20, r20
    18de:	55 1f       	adc	r21, r21
    18e0:	59 f0       	breq	.+22     	; 0x18f8 <__fp_splitA+0x10>
    18e2:	5f 3f       	cpi	r21, 0xFF	; 255
    18e4:	71 f0       	breq	.+28     	; 0x1902 <__fp_splitA+0x1a>
    18e6:	47 95       	ror	r20

000018e8 <__fp_splitA>:
    18e8:	88 0f       	add	r24, r24
    18ea:	97 fb       	bst	r25, 7
    18ec:	99 1f       	adc	r25, r25
    18ee:	61 f0       	breq	.+24     	; 0x1908 <__fp_splitA+0x20>
    18f0:	9f 3f       	cpi	r25, 0xFF	; 255
    18f2:	79 f0       	breq	.+30     	; 0x1912 <__fp_splitA+0x2a>
    18f4:	87 95       	ror	r24
    18f6:	08 95       	ret
    18f8:	12 16       	cp	r1, r18
    18fa:	13 06       	cpc	r1, r19
    18fc:	14 06       	cpc	r1, r20
    18fe:	55 1f       	adc	r21, r21
    1900:	f2 cf       	rjmp	.-28     	; 0x18e6 <__fp_split3+0xe>
    1902:	46 95       	lsr	r20
    1904:	f1 df       	rcall	.-30     	; 0x18e8 <__fp_splitA>
    1906:	08 c0       	rjmp	.+16     	; 0x1918 <__fp_splitA+0x30>
    1908:	16 16       	cp	r1, r22
    190a:	17 06       	cpc	r1, r23
    190c:	18 06       	cpc	r1, r24
    190e:	99 1f       	adc	r25, r25
    1910:	f1 cf       	rjmp	.-30     	; 0x18f4 <__fp_splitA+0xc>
    1912:	86 95       	lsr	r24
    1914:	71 05       	cpc	r23, r1
    1916:	61 05       	cpc	r22, r1
    1918:	08 94       	sec
    191a:	08 95       	ret

0000191c <__fp_zero>:
    191c:	e8 94       	clt

0000191e <__fp_szero>:
    191e:	bb 27       	eor	r27, r27
    1920:	66 27       	eor	r22, r22
    1922:	77 27       	eor	r23, r23
    1924:	cb 01       	movw	r24, r22
    1926:	97 f9       	bld	r25, 7
    1928:	08 95       	ret

0000192a <__mulsf3>:
    192a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__mulsf3x>
    192e:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_round>
    1932:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fp_pscA>
    1936:	38 f0       	brcs	.+14     	; 0x1946 <__mulsf3+0x1c>
    1938:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__fp_pscB>
    193c:	20 f0       	brcs	.+8      	; 0x1946 <__mulsf3+0x1c>
    193e:	95 23       	and	r25, r21
    1940:	11 f0       	breq	.+4      	; 0x1946 <__mulsf3+0x1c>
    1942:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_inf>
    1946:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__fp_nan>
    194a:	11 24       	eor	r1, r1
    194c:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_szero>

00001950 <__mulsf3x>:
    1950:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_split3>
    1954:	70 f3       	brcs	.-36     	; 0x1932 <__mulsf3+0x8>

00001956 <__mulsf3_pse>:
    1956:	95 9f       	mul	r25, r21
    1958:	c1 f3       	breq	.-16     	; 0x194a <__mulsf3+0x20>
    195a:	95 0f       	add	r25, r21
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	55 1f       	adc	r21, r21
    1960:	62 9f       	mul	r22, r18
    1962:	f0 01       	movw	r30, r0
    1964:	72 9f       	mul	r23, r18
    1966:	bb 27       	eor	r27, r27
    1968:	f0 0d       	add	r31, r0
    196a:	b1 1d       	adc	r27, r1
    196c:	63 9f       	mul	r22, r19
    196e:	aa 27       	eor	r26, r26
    1970:	f0 0d       	add	r31, r0
    1972:	b1 1d       	adc	r27, r1
    1974:	aa 1f       	adc	r26, r26
    1976:	64 9f       	mul	r22, r20
    1978:	66 27       	eor	r22, r22
    197a:	b0 0d       	add	r27, r0
    197c:	a1 1d       	adc	r26, r1
    197e:	66 1f       	adc	r22, r22
    1980:	82 9f       	mul	r24, r18
    1982:	22 27       	eor	r18, r18
    1984:	b0 0d       	add	r27, r0
    1986:	a1 1d       	adc	r26, r1
    1988:	62 1f       	adc	r22, r18
    198a:	73 9f       	mul	r23, r19
    198c:	b0 0d       	add	r27, r0
    198e:	a1 1d       	adc	r26, r1
    1990:	62 1f       	adc	r22, r18
    1992:	83 9f       	mul	r24, r19
    1994:	a0 0d       	add	r26, r0
    1996:	61 1d       	adc	r22, r1
    1998:	22 1f       	adc	r18, r18
    199a:	74 9f       	mul	r23, r20
    199c:	33 27       	eor	r19, r19
    199e:	a0 0d       	add	r26, r0
    19a0:	61 1d       	adc	r22, r1
    19a2:	23 1f       	adc	r18, r19
    19a4:	84 9f       	mul	r24, r20
    19a6:	60 0d       	add	r22, r0
    19a8:	21 1d       	adc	r18, r1
    19aa:	82 2f       	mov	r24, r18
    19ac:	76 2f       	mov	r23, r22
    19ae:	6a 2f       	mov	r22, r26
    19b0:	11 24       	eor	r1, r1
    19b2:	9f 57       	subi	r25, 0x7F	; 127
    19b4:	50 40       	sbci	r21, 0x00	; 0
    19b6:	9a f0       	brmi	.+38     	; 0x19de <__mulsf3_pse+0x88>
    19b8:	f1 f0       	breq	.+60     	; 0x19f6 <__mulsf3_pse+0xa0>
    19ba:	88 23       	and	r24, r24
    19bc:	4a f0       	brmi	.+18     	; 0x19d0 <__mulsf3_pse+0x7a>
    19be:	ee 0f       	add	r30, r30
    19c0:	ff 1f       	adc	r31, r31
    19c2:	bb 1f       	adc	r27, r27
    19c4:	66 1f       	adc	r22, r22
    19c6:	77 1f       	adc	r23, r23
    19c8:	88 1f       	adc	r24, r24
    19ca:	91 50       	subi	r25, 0x01	; 1
    19cc:	50 40       	sbci	r21, 0x00	; 0
    19ce:	a9 f7       	brne	.-22     	; 0x19ba <__mulsf3_pse+0x64>
    19d0:	9e 3f       	cpi	r25, 0xFE	; 254
    19d2:	51 05       	cpc	r21, r1
    19d4:	80 f0       	brcs	.+32     	; 0x19f6 <__mulsf3_pse+0xa0>
    19d6:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_inf>
    19da:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__fp_szero>
    19de:	5f 3f       	cpi	r21, 0xFF	; 255
    19e0:	e4 f3       	brlt	.-8      	; 0x19da <__mulsf3_pse+0x84>
    19e2:	98 3e       	cpi	r25, 0xE8	; 232
    19e4:	d4 f3       	brlt	.-12     	; 0x19da <__mulsf3_pse+0x84>
    19e6:	86 95       	lsr	r24
    19e8:	77 95       	ror	r23
    19ea:	67 95       	ror	r22
    19ec:	b7 95       	ror	r27
    19ee:	f7 95       	ror	r31
    19f0:	e7 95       	ror	r30
    19f2:	9f 5f       	subi	r25, 0xFF	; 255
    19f4:	c1 f7       	brne	.-16     	; 0x19e6 <__mulsf3_pse+0x90>
    19f6:	fe 2b       	or	r31, r30
    19f8:	88 0f       	add	r24, r24
    19fa:	91 1d       	adc	r25, r1
    19fc:	96 95       	lsr	r25
    19fe:	87 95       	ror	r24
    1a00:	97 f9       	bld	r25, 7
    1a02:	08 95       	ret

00001a04 <__udivmodsi4>:
    1a04:	a1 e2       	ldi	r26, 0x21	; 33
    1a06:	1a 2e       	mov	r1, r26
    1a08:	aa 1b       	sub	r26, r26
    1a0a:	bb 1b       	sub	r27, r27
    1a0c:	fd 01       	movw	r30, r26
    1a0e:	0d c0       	rjmp	.+26     	; 0x1a2a <__udivmodsi4_ep>

00001a10 <__udivmodsi4_loop>:
    1a10:	aa 1f       	adc	r26, r26
    1a12:	bb 1f       	adc	r27, r27
    1a14:	ee 1f       	adc	r30, r30
    1a16:	ff 1f       	adc	r31, r31
    1a18:	a2 17       	cp	r26, r18
    1a1a:	b3 07       	cpc	r27, r19
    1a1c:	e4 07       	cpc	r30, r20
    1a1e:	f5 07       	cpc	r31, r21
    1a20:	20 f0       	brcs	.+8      	; 0x1a2a <__udivmodsi4_ep>
    1a22:	a2 1b       	sub	r26, r18
    1a24:	b3 0b       	sbc	r27, r19
    1a26:	e4 0b       	sbc	r30, r20
    1a28:	f5 0b       	sbc	r31, r21

00001a2a <__udivmodsi4_ep>:
    1a2a:	66 1f       	adc	r22, r22
    1a2c:	77 1f       	adc	r23, r23
    1a2e:	88 1f       	adc	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	1a 94       	dec	r1
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <__udivmodsi4_loop>
    1a36:	60 95       	com	r22
    1a38:	70 95       	com	r23
    1a3a:	80 95       	com	r24
    1a3c:	90 95       	com	r25
    1a3e:	9b 01       	movw	r18, r22
    1a40:	ac 01       	movw	r20, r24
    1a42:	bd 01       	movw	r22, r26
    1a44:	cf 01       	movw	r24, r30
    1a46:	08 95       	ret

00001a48 <__tablejump2__>:
    1a48:	ee 0f       	add	r30, r30
    1a4a:	ff 1f       	adc	r31, r31
    1a4c:	05 90       	lpm	r0, Z+
    1a4e:	f4 91       	lpm	r31, Z
    1a50:	e0 2d       	mov	r30, r0
    1a52:	09 94       	ijmp

00001a54 <__muluhisi3>:
    1a54:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__umulhisi3>
    1a58:	a5 9f       	mul	r26, r21
    1a5a:	90 0d       	add	r25, r0
    1a5c:	b4 9f       	mul	r27, r20
    1a5e:	90 0d       	add	r25, r0
    1a60:	a4 9f       	mul	r26, r20
    1a62:	80 0d       	add	r24, r0
    1a64:	91 1d       	adc	r25, r1
    1a66:	11 24       	eor	r1, r1
    1a68:	08 95       	ret

00001a6a <__umulhisi3>:
    1a6a:	a2 9f       	mul	r26, r18
    1a6c:	b0 01       	movw	r22, r0
    1a6e:	b3 9f       	mul	r27, r19
    1a70:	c0 01       	movw	r24, r0
    1a72:	a3 9f       	mul	r26, r19
    1a74:	70 0d       	add	r23, r0
    1a76:	81 1d       	adc	r24, r1
    1a78:	11 24       	eor	r1, r1
    1a7a:	91 1d       	adc	r25, r1
    1a7c:	b2 9f       	mul	r27, r18
    1a7e:	70 0d       	add	r23, r0
    1a80:	81 1d       	adc	r24, r1
    1a82:	11 24       	eor	r1, r1
    1a84:	91 1d       	adc	r25, r1
    1a86:	08 95       	ret

00001a88 <_exit>:
    1a88:	f8 94       	cli

00001a8a <__stop_program>:
    1a8a:	ff cf       	rjmp	.-2      	; 0x1a8a <__stop_program>
